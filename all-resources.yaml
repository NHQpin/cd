apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: a3068692983d3d63f803a7f969e03aab25f26842af282138b5a1a221d5661d1e
      cni.projectcalico.org/podIP: ""
      cni.projectcalico.org/podIPs: ""
    creationTimestamp: "2024-08-29T08:55:56Z"
    deletionGracePeriodSeconds: 30
    deletionTimestamp: "2024-09-18T08:32:10Z"
    generateName: nfs-nfs-subdir-external-provisioner-5fc9d4796d-
    labels:
      app: nfs-subdir-external-provisioner
      pod-template-hash: 5fc9d4796d
      release: nfs
    name: nfs-nfs-subdir-external-provisioner-5fc9d4796d-2pcc7
    namespace: adad
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nfs-nfs-subdir-external-provisioner-5fc9d4796d
      uid: 27bd6c64-d20f-4220-b0b1-84bdd4f6d04a
    resourceVersion: "10155282"
    uid: 83220b51-09a0-421a-be7c-eb1b17220ca5
  spec:
    containers:
    - env:
      - name: PROVISIONER_NAME
        value: cluster.local/nfs-nfs-subdir-external-provisioner
      - name: NFS_SERVER
        value: 192.168.1.202
      - name: NFS_PATH
        value: /root/hnagnoud/task3/nfs
      image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
      imagePullPolicy: IfNotPresent
      name: nfs-subdir-external-provisioner
      resources: {}
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /persistentvolumes
        name: nfs-subdir-external-provisioner-root
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vj2vd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: nfs-nfs-subdir-external-provisioner
    serviceAccountName: nfs-nfs-subdir-external-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: nfs-subdir-external-provisioner-root
      nfs:
        path: /root/hnagnoud/task3/nfs
        server: 192.168.1.202
    - name: kube-api-access-vj2vd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T08:55:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:31:41Z"
      reason: PodFailed
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:31:41Z"
      reason: PodFailed
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T08:55:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0ea6f33d99f8725aa4fd37e698a09943cd83ec8b97198dec270a7fedd3525d8a
      image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
      imageID: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner@sha256:63d5e04551ec8b5aae83b6f35938ca5ddc50a88d85492d9731810c31591fa4c9
      lastState: {}
      name: nfs-subdir-external-provisioner
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0ea6f33d99f8725aa4fd37e698a09943cd83ec8b97198dec270a7fedd3525d8a
          exitCode: 2
          finishedAt: "2024-09-18T08:31:40Z"
          reason: Error
          startedAt: "2024-08-29T08:56:00Z"
    hostIP: 192.168.1.227
    phase: Failed
    qosClass: BestEffort
    startTime: "2024-08-29T08:55:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: a77d5ebbc76ffbd4ef7477099683208cc2833b469cfc8a0f61b4e4b3669960b9
      cni.projectcalico.org/podIP: 10.100.234.178/32
      cni.projectcalico.org/podIPs: 10.100.234.178/32
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"web"},"name":"test-adad","namespace":"adad"},"spec":{"containers":[{"image":"nginx:latest","name":"adad-nginx","ports":[{"containerPort":80}],"resources":{"limits":{"cpu":"500m","memory":"128Mi"}},"volumeMounts":[{"mountPath":"/usr/share/nginx/html","name":"ad-nfs"}]}],"volumes":[{"name":"ad-nfs","persistentVolumeClaim":{"claimName":"ad-nfs"}}]}}
    creationTimestamp: "2024-08-29T09:51:58Z"
    labels:
      app: web
    name: test-adad
    namespace: adad
    resourceVersion: "2701628"
    uid: 51f29535-42ff-42c3-9e96-a7886f4307cd
  spec:
    containers:
    - image: nginx:latest
      imagePullPolicy: Always
      name: adad-nginx
      ports:
      - containerPort: 80
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 500m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: ad-nfs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4bsdj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: ad-nfs
      persistentVolumeClaim:
        claimName: ad-nfs
    - name: kube-api-access-4bsdj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:51:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:52:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:52:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:51:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://da4a2b0d6b42e26614f9dc780f9823d84fc77e8aa66a62f2069abecef018a1c5
      image: docker.io/library/nginx:latest
      imageID: docker.io/library/nginx@sha256:447a8665cc1dab95b1ca778e162215839ccbb9189104c79d7ec3a81e14577add
      lastState: {}
      name: adad-nginx
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-29T09:52:04Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.178
    podIPs:
    - ip: 10.100.234.178
    qosClass: Guaranteed
    startTime: "2024-08-29T09:51:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 1bb2804c05c2ffb610ff1eacd16621f72b748c9d1d3c99de5b8a5b89fe89e6e5
      cni.projectcalico.org/podIP: 10.100.38.156/32
      cni.projectcalico.org/podIPs: 10.100.38.156/32
    creationTimestamp: "2024-09-18T08:48:41Z"
    generateName: bookstore-deployment-d5c7d656f-
    labels:
      app: appad-web
      pod-template-hash: d5c7d656f
    name: bookstore-deployment-d5c7d656f-g64nk
    namespace: adapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: bookstore-deployment-d5c7d656f
      uid: 6d65675b-e761-47e2-bfbf-d2e98085c55f
    resourceVersion: "10158835"
    uid: fb9e79a1-1c24-4bda-9bfd-8b87d4ca589e
  spec:
    containers:
    - image: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp:ae4355a9
      imagePullPolicy: IfNotPresent
      name: appad
      ports:
      - containerPort: 5000
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 500m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dcxf6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: hna-secret
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-dcxf6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:48:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:48:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:48:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:48:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1902654d114f025eb23c2e2ee85493d1ed4803f1c0af6f68d96dc2d7f4915b92
      image: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp:ae4355a9
      imageID: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp@sha256:4d189d643b1daf75efe1d2fba679dac0e16e955ecf21683c9d0602412a08cb43
      lastState: {}
      name: appad
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T08:48:41Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.156
    podIPs:
    - ip: 10.100.38.156
    qosClass: Guaranteed
    startTime: "2024-09-18T08:48:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: df3cd53b1afd3214e615c5e3e899f9b1519fd20aa47db1385296073f267f254f
      cni.projectcalico.org/podIP: 10.100.119.164/32
      cni.projectcalico.org/podIPs: 10.100.119.164/32
    creationTimestamp: "2024-09-18T08:48:41Z"
    generateName: bookstore-deployment-d5c7d656f-
    labels:
      app: appad-web
      pod-template-hash: d5c7d656f
    name: bookstore-deployment-d5c7d656f-q6snl
    namespace: adapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: bookstore-deployment-d5c7d656f
      uid: 6d65675b-e761-47e2-bfbf-d2e98085c55f
    resourceVersion: "10158934"
    uid: 64595b80-0f43-4a43-ab26-6547b7dda767
  spec:
    containers:
    - image: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp:ae4355a9
      imagePullPolicy: IfNotPresent
      name: appad
      ports:
      - containerPort: 5000
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 500m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-g5vkx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: hna-secret
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-g5vkx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:48:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:49:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:49:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:48:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e3431a733a8f0d3de0d45aae0989094f01cf7f1b85f29f3259497b3a32f466bc
      image: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp:ae4355a9
      imageID: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp@sha256:4d189d643b1daf75efe1d2fba679dac0e16e955ecf21683c9d0602412a08cb43
      lastState: {}
      name: appad
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T08:49:04Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 10.100.119.164
    podIPs:
    - ip: 10.100.119.164
    qosClass: Guaranteed
    startTime: "2024-09-18T08:48:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 4ee0b87046352e63f1dcdae49ff6081f5e47d9c85ad834860c3ebf4284c4c8a9
      cni.projectcalico.org/podIP: 10.100.38.173/32
      cni.projectcalico.org/podIPs: 10.100.38.173/32
    creationTimestamp: "2024-09-17T02:44:12Z"
    generateName: argocd-application-controller-
    labels:
      app.kubernetes.io/name: argocd-application-controller
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: argocd-application-controller-69d5fbfd85
      statefulset.kubernetes.io/pod-name: argocd-application-controller-0
    name: argocd-application-controller-0
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: argocd-application-controller
      uid: fc1b02e4-c18e-4c4c-b5c9-92cb9adab92f
    resourceVersion: "9686278"
    uid: 7d3644f2-ea6f-48d4-895e-f09ac6ee7918
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-application-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - args:
      - /usr/local/bin/argocd-application-controller
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      - name: ARGOCD_CONTROLLER_REPLICAS
        value: "1"
      - name: ARGOCD_RECONCILIATION_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: timeout.reconciliation
            name: argocd-cm
            optional: true
      - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: timeout.hard.reconciliation
            name: argocd-cm
            optional: true
      - name: ARGOCD_RECONCILIATION_JITTER
        valueFrom:
          configMapKeyRef:
            key: timeout.reconciliation.jitter
            name: argocd-cm
            optional: true
      - name: ARGOCD_REPO_ERROR_GRACE_PERIOD_SECONDS
        valueFrom:
          configMapKeyRef:
            key: controller.repo.error.grace.period.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
        valueFrom:
          configMapKeyRef:
            key: repo.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: controller.repo.server.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
        valueFrom:
          configMapKeyRef:
            key: controller.status.processors
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
        valueFrom:
          configMapKeyRef:
            key: controller.operation.processors
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: controller.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: controller.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: controller.metrics.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: controller.self.heal.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: controller.repo.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: controller.repo.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH
        valueFrom:
          configMapKeyRef:
            key: controller.resource.health.persist
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: controller.app.state.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_SERVER
        valueFrom:
          configMapKeyRef:
            key: redis.server
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_COMPRESSION
        valueFrom:
          configMapKeyRef:
            key: redis.compression
            name: argocd-cmd-params-cm
            optional: true
      - name: REDISDB
        valueFrom:
          configMapKeyRef:
            key: redis.db
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: controller.default.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: otlp.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_INSECURE
        valueFrom:
          configMapKeyRef:
            key: otlp.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_HEADERS
        valueFrom:
          configMapKeyRef:
            key: otlp.headers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: application.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_CONTROLLER_SHARDING_ALGORITHM
        valueFrom:
          configMapKeyRef:
            key: controller.sharding.algorithm
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: controller.kubectl.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_MAX
        valueFrom:
          configMapKeyRef:
            key: controller.k8sclient.retry.max
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
        valueFrom:
          configMapKeyRef:
            key: controller.k8sclient.retry.base.backoff
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_CONTROLLER_SERVER_SIDE_DIFF
        valueFrom:
          configMapKeyRef:
            key: controller.diff.server.side
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: controller.ignore.normalizer.jq.timeout
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      name: argocd-application-controller
      ports:
      - containerPort: 8082
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8082
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/controller/tls
        name: argocd-repo-server-tls
      - mountPath: /home/argocd
        name: argocd-home
      - mountPath: /home/argocd/params
        name: argocd-cmd-params-cm
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mfpm7
        readOnly: true
      workingDir: /home/argocd
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: argocd-application-controller-0
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-application-controller
    serviceAccountName: argocd-application-controller
    subdomain: argocd-application-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: argocd-home
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - configMap:
        defaultMode: 420
        items:
        - key: controller.profile.enabled
          path: profiler.enabled
        name: argocd-cmd-params-cm
        optional: true
      name: argocd-cmd-params-cm
    - name: kube-api-access-mfpm7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://afb28ddeaee6577302b384651e76b71a0e015665e645c8e19a268605deadac51
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: argocd-application-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:20Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.173
    podIPs:
    - ip: 10.100.38.173
    qosClass: BestEffort
    startTime: "2024-09-17T02:44:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: fb5f3465689f270659b9f8a38d21d9059700b68d8f2e8641fd8c998754eb0b9e
      cni.projectcalico.org/podIP: 10.100.38.189/32
      cni.projectcalico.org/podIPs: 10.100.38.189/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: argocd-applicationset-controller-687dcb446b-
    labels:
      app.kubernetes.io/name: argocd-applicationset-controller
      pod-template-hash: 687dcb446b
    name: argocd-applicationset-controller-687dcb446b-nzxjw
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-applicationset-controller-687dcb446b
      uid: e4a8eac7-f8ee-49a5-8451-0586e8d56a5c
    resourceVersion: "9685756"
    uid: 6b0b5afc-1d90-4eed-bf1c-c13e18753e08
  spec:
    containers:
    - args:
      - /usr/local/bin/argocd-applicationset-controller
      env:
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.global.preserved.annotations
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.global.preserved.labels
            name: argocd-cmd-params-cm
            optional: true
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.leader.election
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
        valueFrom:
          configMapKeyRef:
            key: repo.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.policy
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.policy.override
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.debug
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.dryrun
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_MODULES_ENABLED
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.git.submodule
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.progressive.syncs
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.new.git.file.globbing
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.repo.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.repo.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.repo.server.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.concurrent.reconciliations.max
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.scm.root.ca.path
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.allowed.scm.providers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.scm.providers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.webhook.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      name: argocd-applicationset-controller
      ports:
      - containerPort: 7000
        name: webhook
        protocol: TCP
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/gpg/source
        name: gpg-keys
      - mountPath: /app/config/gpg/keys
        name: gpg-keyring
      - mountPath: /tmp
        name: tmp
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5hpp5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-applicationset-controller
    serviceAccountName: argocd-applicationset-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - configMap:
        defaultMode: 420
        name: argocd-gpg-keys-cm
      name: gpg-keys
    - emptyDir: {}
      name: gpg-keyring
    - emptyDir: {}
      name: tmp
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: kube-api-access-5hpp5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://76110e75ba931ba4dd9513ea04198240f0ad2ab3b066b8f984e63592de0749c8
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: argocd-applicationset-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:43:51Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.189
    podIPs:
    - ip: 10.100.38.189
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: b33417d407ced185e473937b2f1712f07507ca481dcb81cbafc7dcdbe53daefb
      cni.projectcalico.org/podIP: 10.100.38.191/32
      cni.projectcalico.org/podIPs: 10.100.38.191/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: argocd-dex-server-6bd555b694-
    labels:
      app.kubernetes.io/name: argocd-dex-server
      pod-template-hash: 6bd555b694
    name: argocd-dex-server-6bd555b694-g2d4h
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-dex-server-6bd555b694
      uid: dba6d210-4cde-46db-adea-e09fb830339f
    resourceVersion: "9685933"
    uid: e1802649-dc50-4726-9276-dfe69cea861e
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - command:
      - /shared/argocd-dex
      - rundex
      env:
      - name: ARGOCD_DEX_SERVER_DISABLE_TLS
        valueFrom:
          configMapKeyRef:
            key: dexserver.disable.tls
            name: argocd-cmd-params-cm
            optional: true
      image: ghcr.io/dexidp/dex:v2.41.1
      imagePullPolicy: Always
      name: dex
      ports:
      - containerPort: 5556
        protocol: TCP
      - containerPort: 5557
        protocol: TCP
      - containerPort: 5558
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /shared
        name: static-files
      - mountPath: /tmp
        name: dexconfig
      - mountPath: /tls
        name: argocd-dex-server-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b8sdb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - /bin/cp
      - -n
      - /usr/local/bin/argocd
      - /shared/argocd-dex
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      name: copyutil
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /shared
        name: static-files
      - mountPath: /tmp
        name: dexconfig
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b8sdb
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-dex-server
    serviceAccountName: argocd-dex-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: static-files
    - emptyDir: {}
      name: dexconfig
    - name: argocd-dex-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-dex-server-tls
    - name: kube-api-access-b8sdb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://54a42779ad424e6c2570082373f42dcd18d36b787d57e1895aa8ab636edbe577
      image: ghcr.io/dexidp/dex:v2.41.1
      imageID: ghcr.io/dexidp/dex@sha256:bc7cfce7c17f52864e2bb2a4dc1d2f86a41e3019f6d42e81d92a301fad0c8a1d
      lastState: {}
      name: dex
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:10Z"
    hostIP: 192.168.1.227
    initContainerStatuses:
    - containerID: containerd://dd297436db096a4397031f16b3579f34769b0f3d28fa5e4e45d0b8125517cc5a
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: copyutil
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://dd297436db096a4397031f16b3579f34769b0f3d28fa5e4e45d0b8125517cc5a
          exitCode: 0
          finishedAt: "2024-09-17T02:43:56Z"
          reason: Completed
          startedAt: "2024-09-17T02:43:56Z"
    phase: Running
    podIP: 10.100.38.191
    podIPs:
    - ip: 10.100.38.191
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 79c948c029216d1de4d9f5e2e5162da3aded04a0eddc54c4d41a3210e6241807
      cni.projectcalico.org/podIP: 10.100.38.132/32
      cni.projectcalico.org/podIPs: 10.100.38.132/32
    creationTimestamp: "2024-09-17T02:44:12Z"
    generateName: argocd-notifications-controller-5f94cb7845-
    labels:
      app.kubernetes.io/name: argocd-notifications-controller
      pod-template-hash: 5f94cb7845
    name: argocd-notifications-controller-5f94cb7845-thcqw
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-notifications-controller-5f94cb7845
      uid: 7c2592d2-e7d4-4a56-899d-a2a3d5766100
    resourceVersion: "10326799"
    uid: 6f51b88e-ebd2-4d1e-80d5-0a0ff7fd70d5
  spec:
    containers:
    - args:
      - /usr/local/bin/argocd-notifications
      env:
      - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: notificationscontroller.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: notificationscontroller.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: application.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
        valueFrom:
          configMapKeyRef:
            key: notificationscontroller.selfservice.enabled
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        tcpSocket:
          port: 9001
        timeoutSeconds: 1
      name: argocd-notifications-controller
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bmxch
        readOnly: true
      workingDir: /app
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: argocd-notifications-controller
    serviceAccountName: argocd-notifications-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: kube-api-access-bmxch
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T19:24:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T19:24:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://54f95141a630653e2bfc1c0565860370b6800753f253cb940c9785b034d46e27
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:78b60a9d1712dde5ba14ef8055fe5858da785d71f4f6f2e910d40c05c937a438
      lastState:
        terminated:
          containerID: containerd://5f9b33fe66c13b8906572e5fa9f0c8aba5f08b92528ac506a88f991131e5bb71
          exitCode: 0
          finishedAt: "2024-09-18T19:19:23Z"
          reason: Completed
          startedAt: "2024-09-18T19:19:22Z"
      name: argocd-notifications-controller
      ready: true
      restartCount: 480
      started: true
      state:
        running:
          startedAt: "2024-09-18T19:24:43Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.132
    podIPs:
    - ip: 10.100.38.132
    qosClass: BestEffort
    startTime: "2024-09-17T02:44:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: d879275289c70557806a1ab75791f54ac7ef6fb9cf9c7f1f107008aaf33652df
      cni.projectcalico.org/podIP: 10.100.234.152/32
      cni.projectcalico.org/podIPs: 10.100.234.152/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: argocd-redis-854d54f6b-
    labels:
      app.kubernetes.io/name: argocd-redis
      pod-template-hash: 854d54f6b
    name: argocd-redis-854d54f6b-5vhlb
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-redis-854d54f6b
      uid: 88abef87-1fbf-4873-8c31-6b44d825f513
    resourceVersion: "9686176"
    uid: eb955c46-c4be-48d7-a286-34faf509b79c
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-redis
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - args:
      - --save
      - ""
      - --appendonly
      - "no"
      - --requirepass $(REDIS_PASSWORD)
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      image: redis:7.0.15-alpine
      imagePullPolicy: Always
      name: redis
      ports:
      - containerPort: 6379
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d87gq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - argocd
      - admin
      - redis-initial-password
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: IfNotPresent
      name: secret-init
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d87gq
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: argocd-redis
    serviceAccountName: argocd-redis
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-d87gq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cf88442f495957259370ba70cadc529bac1b72d1de77a5fb835c615ddbfc892d
      image: docker.io/library/redis:7.0.15-alpine
      imageID: docker.io/library/redis@sha256:c9d92d840fd011c908f040592857c724ae6d877f2aba5c40ad963276507386b2
      lastState: {}
      name: redis
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:16Z"
    hostIP: 192.168.1.93
    initContainerStatuses:
    - containerID: containerd://2800b7b5a89c873491bee60deabad85060f24d84dcaf6645630e02f9ee083258
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: secret-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://2800b7b5a89c873491bee60deabad85060f24d84dcaf6645630e02f9ee083258
          exitCode: 0
          finishedAt: "2024-09-17T02:44:08Z"
          reason: Completed
          startedAt: "2024-09-17T02:44:08Z"
    phase: Running
    podIP: 10.100.234.152
    podIPs:
    - ip: 10.100.234.152
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: b17eab3b5d953fb70f7e53a8ee73d41611cf941f2feda5e9982b45f499c22f2c
      cni.projectcalico.org/podIP: 10.100.38.136/32
      cni.projectcalico.org/podIPs: 10.100.38.136/32
    creationTimestamp: "2024-09-17T02:44:12Z"
    generateName: argocd-repo-server-87bccd956-
    labels:
      app.kubernetes.io/name: argocd-repo-server
      pod-template-hash: 87bccd956
    name: argocd-repo-server-87bccd956-vrm42
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-repo-server-87bccd956
      uid: 3cf2f152-cea1-4a97-b554-943d3620737b
    resourceVersion: "9686272"
    uid: 24520ff2-3d3b-4fd9-9a7c-4b8a28b93e0b
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-repo-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    automountServiceAccountToken: false
    containers:
    - args:
      - /usr/local/bin/argocd-repo-server
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      - name: ARGOCD_RECONCILIATION_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: timeout.reconciliation
            name: argocd-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: reposerver.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LOGLEVEL
        valueFrom:
          configMapKeyRef:
            key: reposerver.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: reposerver.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: reposerver.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: reposerver.metrics.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_DISABLE_TLS
        valueFrom:
          configMapKeyRef:
            key: reposerver.disable.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MIN_VERSION
        valueFrom:
          configMapKeyRef:
            key: reposerver.tls.minversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MAX_VERSION
        valueFrom:
          configMapKeyRef:
            key: reposerver.tls.maxversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_CIPHERS
        valueFrom:
          configMapKeyRef:
            key: reposerver.tls.ciphers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: reposerver.repo.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_SERVER
        valueFrom:
          configMapKeyRef:
            key: redis.server
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_COMPRESSION
        valueFrom:
          configMapKeyRef:
            key: redis.compression
            name: argocd-cmd-params-cm
            optional: true
      - name: REDISDB
        valueFrom:
          configMapKeyRef:
            key: redis.db
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: reposerver.default.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: otlp.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
        valueFrom:
          configMapKeyRef:
            key: otlp.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
        valueFrom:
          configMapKeyRef:
            key: otlp.headers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.max.combined.directory.manifests.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
        valueFrom:
          configMapKeyRef:
            key: reposerver.plugin.tar.exclusions
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
        valueFrom:
          configMapKeyRef:
            key: reposerver.allow.oob.symlinks
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.streamed.manifest.max.tar.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.streamed.manifest.max.extracted.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.helm.manifest.max.extracted.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
        valueFrom:
          configMapKeyRef:
            key: reposerver.disable.helm.manifest.max.extracted.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: reposerver.revision.cache.lock.timeout
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_MODULES_ENABLED
        valueFrom:
          configMapKeyRef:
            key: reposerver.enable.git.submodule
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: reposerver.git.lsremote.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GIT_REQUEST_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: reposerver.git.request.timeout
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_GRPC_MAX_SIZE_MB
        valueFrom:
          configMapKeyRef:
            key: reposerver.grpc.max.size
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
        valueFrom:
          configMapKeyRef:
            key: reposerver.include.hidden.directories
            name: argocd-cmd-params-cm
            optional: true
      - name: HELM_CACHE_HOME
        value: /helm-working-dir
      - name: HELM_CONFIG_HOME
        value: /helm-working-dir
      - name: HELM_DATA_HOME
        value: /helm-working-dir
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz?full=true
          port: 8084
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: argocd-repo-server
      ports:
      - containerPort: 8081
        protocol: TCP
      - containerPort: 8084
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8084
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/gpg/source
        name: gpg-keys
      - mountPath: /app/config/gpg/keys
        name: gpg-keyring
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /tmp
        name: tmp
      - mountPath: /helm-working-dir
        name: helm-working-dir
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - /bin/cp
      - -n
      - /usr/local/bin/argocd
      - /var/run/argocd/argocd-cmp-server
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      name: copyutil
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-repo-server
    serviceAccountName: argocd-repo-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - configMap:
        defaultMode: 420
        name: argocd-gpg-keys-cm
      name: gpg-keys
    - emptyDir: {}
      name: gpg-keyring
    - emptyDir: {}
      name: tmp
    - emptyDir: {}
      name: helm-working-dir
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - emptyDir: {}
      name: var-files
    - emptyDir: {}
      name: plugins
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6052ed3adbf7d80b237fb311599fab72e9844e51ca0cd89c84bf590a56b8ae23
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: argocd-repo-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:23Z"
    hostIP: 192.168.1.227
    initContainerStatuses:
    - containerID: containerd://b69e23b3cae0c1611753d629800eac8f4d0f8b62aca3ecee9bdcbf20cd95960a
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: copyutil
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b69e23b3cae0c1611753d629800eac8f4d0f8b62aca3ecee9bdcbf20cd95960a
          exitCode: 0
          finishedAt: "2024-09-17T02:44:15Z"
          reason: Completed
          startedAt: "2024-09-17T02:44:14Z"
    phase: Running
    podIP: 10.100.38.136
    podIPs:
    - ip: 10.100.38.136
    qosClass: BestEffort
    startTime: "2024-09-17T02:44:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: e190eae14d5e1718302b47dfc6a137d89a9e473738d18edc3f5ef7f1e7483c47
      cni.projectcalico.org/podIP: 10.100.38.147/32
      cni.projectcalico.org/podIPs: 10.100.38.147/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: argocd-server-559586695d-
    labels:
      app.kubernetes.io/name: argocd-server
      pod-template-hash: 559586695d
    name: argocd-server-559586695d-s9gw2
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-server-559586695d
      uid: 8c0e6490-db73-4a01-adab-fd84e26f8453
    resourceVersion: "9686042"
    uid: 06f6d891-12ae-4a5b-89c0-250ab540a880
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - args:
      - /usr/local/bin/argocd-server
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: auth
            name: argocd-redis
      - name: ARGOCD_SERVER_INSECURE
        valueFrom:
          configMapKeyRef:
            key: server.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_BASEHREF
        valueFrom:
          configMapKeyRef:
            key: server.basehref
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_ROOTPATH
        valueFrom:
          configMapKeyRef:
            key: server.rootpath
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LOGFORMAT
        valueFrom:
          configMapKeyRef:
            key: server.log.format
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LOG_LEVEL
        valueFrom:
          configMapKeyRef:
            key: server.log.level
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER
        valueFrom:
          configMapKeyRef:
            key: repo.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DEX_SERVER
        valueFrom:
          configMapKeyRef:
            key: server.dex.server
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DISABLE_AUTH
        valueFrom:
          configMapKeyRef:
            key: server.disable.auth
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_ENABLE_GZIP
        valueFrom:
          configMapKeyRef:
            key: server.enable.gzip
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
        valueFrom:
          configMapKeyRef:
            key: server.repo.server.timeout.seconds
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_X_FRAME_OPTIONS
        valueFrom:
          configMapKeyRef:
            key: server.x.frame.options
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
        valueFrom:
          configMapKeyRef:
            key: server.content.security.policy
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: server.repo.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: server.repo.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
        valueFrom:
          configMapKeyRef:
            key: server.dex.server.plaintext
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
        valueFrom:
          configMapKeyRef:
            key: server.dex.server.strict.tls
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MIN_VERSION
        valueFrom:
          configMapKeyRef:
            key: server.tls.minversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_MAX_VERSION
        valueFrom:
          configMapKeyRef:
            key: server.tls.maxversion
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_TLS_CIPHERS
        valueFrom:
          configMapKeyRef:
            key: server.tls.ciphers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.connection.status.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.oidc.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.login.attempts.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_STATIC_ASSETS
        valueFrom:
          configMapKeyRef:
            key: server.staticassets
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.app.state.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_SERVER
        valueFrom:
          configMapKeyRef:
            key: redis.server
            name: argocd-cmd-params-cm
            optional: true
      - name: REDIS_COMPRESSION
        valueFrom:
          configMapKeyRef:
            key: redis.compression
            name: argocd-cmd-params-cm
            optional: true
      - name: REDISDB
        valueFrom:
          configMapKeyRef:
            key: redis.db
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
        valueFrom:
          configMapKeyRef:
            key: server.default.cache.expiration
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_MAX_COOKIE_NUMBER
        valueFrom:
          configMapKeyRef:
            key: server.http.cookie.maxnumber
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_LISTEN_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: server.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: server.metrics.listen.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OTLP_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: otlp.address
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OTLP_INSECURE
        valueFrom:
          configMapKeyRef:
            key: otlp.insecure
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_OTLP_HEADERS
        valueFrom:
          configMapKeyRef:
            key: otlp.headers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATION_NAMESPACES
        valueFrom:
          configMapKeyRef:
            key: application.namespaces
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
        valueFrom:
          configMapKeyRef:
            key: server.enable.proxy.extension
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_MAX
        valueFrom:
          configMapKeyRef:
            key: server.k8sclient.retry.max
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
        valueFrom:
          configMapKeyRef:
            key: server.k8sclient.retry.base.backoff
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_API_CONTENT_TYPES
        valueFrom:
          configMapKeyRef:
            key: server.api.content.types
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT
        valueFrom:
          configMapKeyRef:
            key: server.webhook.parallelism.limit
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.new.git.file.globbing
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.scm.root.ca.path
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.allowed.scm.providers
            name: argocd-cmd-params-cm
            optional: true
      - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
        valueFrom:
          configMapKeyRef:
            key: applicationsetcontroller.enable.scm.providers
            name: argocd-cmd-params-cm
            optional: true
      image: quay.io/argoproj/argocd:latest
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz?full=true
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: argocd-server
      ports:
      - containerPort: 8080
        protocol: TCP
      - containerPort: 8083
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/server/tls
        name: argocd-repo-server-tls
      - mountPath: /app/config/dex/tls
        name: argocd-dex-server-tls
      - mountPath: /home/argocd
        name: plugins-home
      - mountPath: /tmp
        name: tmp
      - mountPath: /home/argocd/params
        name: argocd-cmd-params-cm
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-x78c2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: argocd-server
    serviceAccountName: argocd-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: plugins-home
    - emptyDir: {}
      name: tmp
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-repo-server-tls
    - name: argocd-dex-server-tls
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: ca.crt
          path: ca.crt
        optional: true
        secretName: argocd-dex-server-tls
    - configMap:
        defaultMode: 420
        items:
        - key: server.profile.enabled
          path: profiler.enabled
        name: argocd-cmd-params-cm
        optional: true
      name: argocd-cmd-params-cm
    - name: kube-api-access-x78c2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://55f95d37045286ccb433110066f132b4f2e1c2b03715bf4ad5a34296cec15805
      image: quay.io/argoproj/argocd:latest
      imageID: quay.io/argoproj/argocd@sha256:767590161507e27654a6470affab5b2264a25f4f1347ea6dff3eed4a273d8506
      lastState: {}
      name: argocd-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:43:57Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.147
    podIPs:
    - ip: 10.100.38.147
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 28e024ab89619969c2de1b290e500c7b975b020ea010ca649d9ebc43a7d6af75
      cni.projectcalico.org/podIP: 10.100.38.133/32
      cni.projectcalico.org/podIPs: 10.100.38.133/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: c1nd3r-webapp-f599478db-
    labels:
      app: c1nd3r-app
      pod-template-hash: f599478db
    name: c1nd3r-webapp-f599478db-rrj67
    namespace: c1nd3r
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: c1nd3r-webapp-f599478db
      uid: 90006aef-5dbf-4ab3-9420-7c2e5ce73e53
    resourceVersion: "9685888"
    uid: b8c303ca-1166-48d8-b94c-4c9d55aba034
  spec:
    containers:
    - env:
      - name: DB_HOST
        valueFrom:
          secretKeyRef:
            key: DB_HOST
            name: c1nd3r-secret
      - name: DB_USER
        valueFrom:
          secretKeyRef:
            key: DB_USER
            name: c1nd3r-secret
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            key: DB_PASSWORD
            name: c1nd3r-secret
      - name: DB_DATABASE
        valueFrom:
          secretKeyRef:
            key: DB_DATABASE
            name: c1nd3r-secret
      - name: JWT_SECRET
        valueFrom:
          secretKeyRef:
            key: JWT_SECRET
            name: c1nd3r-secret
      - name: JWT_EXPIRES_IN
        valueFrom:
          secretKeyRef:
            key: JWT_EXPIRES_IN
            name: c1nd3r-secret
      - name: JWT_COOKIE_EXPIRES
        valueFrom:
          secretKeyRef:
            key: JWT_COOKIE_EXPIRES
            name: c1nd3r-secret
      image: hunger1607/c1nd3r-webapp:latest
      imagePullPolicy: Always
      name: c1nd3r-webapp
      ports:
      - containerPort: 5000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7l4dg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-7l4dg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://fd52b579e36284195a1cfdc77f454e08ac9ffd435c1d2a41c9c6dfcee264745a
      image: docker.io/hunger1607/c1nd3r-webapp:latest
      imageID: docker.io/hunger1607/c1nd3r-webapp@sha256:3c7c82d48ff1a6d50742498b3b21543ed442d73a30a24aa299aecfc738a4b806
      lastState: {}
      name: c1nd3r-webapp
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:04Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.133
    podIPs:
    - ip: 10.100.38.133
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 65372a8789bb3734e08626d0a7db9002b6ea7feee3085b5e936e21da312f2b1c
      cni.projectcalico.org/podIP: 10.100.38.190/32
      cni.projectcalico.org/podIPs: 10.100.38.190/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: cert-manager-cainjector-5fd6444f95-
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.15.3
      pod-template-hash: 5fd6444f95
    name: cert-manager-cainjector-5fd6444f95-zfc9s
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-5fd6444f95
      uid: 3aa674d1-8ef1-41b1-b7c4-2e1ee29cec1a
    resourceVersion: "9685790"
    uid: dd699f56-a128-4935-83d3-c83ae841599c
  spec:
    containers:
    - args:
      - --v=2
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-cainjector:v1.15.3
      imagePullPolicy: IfNotPresent
      name: cert-manager-cainjector
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5gbqg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-cainjector
    serviceAccountName: cert-manager-cainjector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-5gbqg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://408e2f77097318b1a10eac2496dbe9c24594b962cc12e16d2b132733e64d41cc
      image: quay.io/jetstack/cert-manager-cainjector:v1.15.3
      imageID: quay.io/jetstack/cert-manager-cainjector@sha256:e0ce8ae280c8d7263663b6a6d3ea5e122632936cde9bdd5321cf7109199f51aa
      lastState: {}
      name: cert-manager-cainjector
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:43:55Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.190
    podIPs:
    - ip: 10.100.38.190
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 2ce94d56ae5d6138903be35089ef9686d7c1f5b81165e79e5ac13a7e9d8841ac
      cni.projectcalico.org/podIP: 10.100.234.131/32
      cni.projectcalico.org/podIPs: 10.100.234.131/32
      prometheus.io/path: /metrics
      prometheus.io/port: "9402"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-08-20T04:32:39Z"
    generateName: cert-manager-d894bbbd4-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.15.3
      pod-template-hash: d894bbbd4
    name: cert-manager-d894bbbd4-jpz7n
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-d894bbbd4
      uid: 94e51dba-7d1f-490f-9e5e-b3a028335b22
    resourceVersion: "8453"
    uid: f59e2c4d-1e2a-4b53-88bb-3518c64bfa16
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=kube-system
      - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
      - --max-concurrent-challenges=60
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-controller:v1.15.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          path: /livez
          port: http-healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: cert-manager-controller
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      - containerPort: 9403
        name: http-healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-92t48
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-92t48
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:32:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:32:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:32:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:32:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9c3534e39e733c9bbf8e8d82ecad22a788dc8e743ff5bfb28b5e74617a7dbcb5
      image: quay.io/jetstack/cert-manager-controller:v1.15.3
      imageID: quay.io/jetstack/cert-manager-controller@sha256:eee34b3de2dd63f7e5ac459fc2d407662d433fd267d574557b76ee3c7d4bc44f
      lastState: {}
      name: cert-manager-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:32:44Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.131
    podIPs:
    - ip: 10.100.234.131
    qosClass: BestEffort
    startTime: "2024-08-20T04:32:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 795293d7ba6c51ddb87c3a4df45b55d2d38c8b40b05a87a029f844d595b3240e
      cni.projectcalico.org/podIP: 10.100.38.129/32
      cni.projectcalico.org/podIPs: 10.100.38.129/32
    creationTimestamp: "2024-09-17T02:44:12Z"
    generateName: cert-manager-webhook-869674f96f-
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.15.3
      pod-template-hash: 869674f96f
    name: cert-manager-webhook-869674f96f-hcm6n
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-869674f96f
      uid: 47ae6880-da29-4fbc-978b-598cdb6b00f6
    resourceVersion: "9686246"
    uid: 844a2e22-8103-4ee4-af54-65c29e1d3786
  spec:
    containers:
    - args:
      - --v=2
      - --secure-port=10250
      - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
      - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
      - --dynamic-serving-dns-names=cert-manager-webhook
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-webhook:v1.15.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager-webhook
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      - containerPort: 6080
        name: healthcheck
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mk5vd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-webhook
    serviceAccountName: cert-manager-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-mk5vd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cdcc78d7416435ffb08c3550082aeb53949b3bd4b104c1a68bdeb9c4a45e68e5
      image: quay.io/jetstack/cert-manager-webhook:v1.15.3
      imageID: quay.io/jetstack/cert-manager-webhook@sha256:fdcb9ac4963fa1bb0c9d7cad38f0ba2c65328aa436f8653c998594d936a96488
      lastState: {}
      name: cert-manager-webhook
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:19Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.129
    podIPs:
    - ip: 10.100.38.129
    qosClass: BestEffort
    startTime: "2024-09-17T02:44:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 8a85ff1c215bf02eb31cc4db67f3ab409890949502d9645ebf5011941841dd58
      cni.projectcalico.org/podIP: 10.100.234.169/32
      cni.projectcalico.org/podIPs: 10.100.234.169/32
    creationTimestamp: "2024-09-17T02:44:12Z"
    generateName: kubevpn-traffic-manager-6697f457c5-
    labels:
      app: kubevpn-traffic-manager
      app.kubernetes.io/instance: kubevpn
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubevpn
      app.kubernetes.io/version: v2.2.17
      helm.sh/chart: kubevpn-2.2.17
      pod-template-hash: 6697f457c5
    name: kubevpn-traffic-manager-6697f457c5-976k9
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubevpn-traffic-manager-6697f457c5
      uid: a76c57c2-27a6-4040-8805-fc9d4b653f7a
    resourceVersion: "9686134"
    uid: 4263695a-e5a6-426b-ac77-8dc86b732c6f
  spec:
    containers:
    - args:
      - |2-

        sysctl -w net.ipv4.ip_forward=1
        sysctl -w net.ipv6.conf.all.disable_ipv6=0
        sysctl -w net.ipv6.conf.all.forwarding=1
        update-alternatives --set iptables /usr/sbin/iptables-legacy
        iptables -F
        ip6tables -F
        iptables -P INPUT ACCEPT
        ip6tables -P INPUT ACCEPT
        iptables -P FORWARD ACCEPT
        ip6tables -P FORWARD ACCEPT
        iptables -t nat -A POSTROUTING -s ${CIDR4} -o eth0 -j MASQUERADE
        ip6tables -t nat -A POSTROUTING -s ${CIDR6} -o eth0 -j MASQUERADE
        kubevpn serve -L "tcp://:10800" -L "tun://:8422?net=${TunIPv4}" -L "gtcp://:10801" -L "gudp://:10802" --debug=true
      command:
      - /bin/sh
      - -c
      env:
      - name: CIDR4
        value: 223.254.0.0/16
      - name: CIDR6
        value: efff:ffff:ffff:ffff::/64
      - name: TunIPv4
        value: 223.254.0.100/16
      - name: TunIPv6
        value: efff:ffff:ffff:ffff:ffff:ffff:ffff:9999/64
      envFrom:
      - secretRef:
          name: kubevpn-traffic-manager
      image: naison/kubevpn:v2.2.17
      imagePullPolicy: IfNotPresent
      name: vpn
      ports:
      - containerPort: 8422
        name: 8422-for-udp
        protocol: UDP
      - containerPort: 10800
        name: 10800-for-tcp
        protocol: TCP
      resources:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 512Mi
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-skbkh
        readOnly: true
    - args:
      - control-plane
      - --watchDirectoryFilename
      - /etc/envoy/envoy-config.yaml
      command:
      - kubevpn
      image: naison/kubevpn:v2.2.17
      imagePullPolicy: IfNotPresent
      name: control-plane
      ports:
      - containerPort: 9002
        name: 9002-for-envoy
        protocol: TCP
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/envoy
        name: envoy-config
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-skbkh
        readOnly: true
    - args:
      - webhook
      command:
      - kubevpn
      envFrom:
      - secretRef:
          name: kubevpn-traffic-manager
      image: naison/kubevpn:v2.2.17
      imagePullPolicy: IfNotPresent
      name: webhook
      ports:
      - containerPort: 80
        name: 80-for-webhook
        protocol: TCP
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-skbkh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubevpn-traffic-manager
    serviceAccountName: kubevpn-traffic-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: ENVOY_CONFIG
          path: envoy-config.yaml
        name: kubevpn-traffic-manager
        optional: false
      name: envoy-config
    - name: kube-api-access-skbkh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://462f2ed0de5a945fba2bfe9cd5bdcc0593d67662183414ffad4763ad7146b2f8
      image: docker.io/naison/kubevpn:v2.2.17
      imageID: docker.io/naison/kubevpn@sha256:b9e79ce1759abc602811f390fb6991ff6b7f593768ae570fc420cd27a62df22a
      lastState: {}
      name: control-plane
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:12Z"
    - containerID: containerd://5a5f897e199493ea9dcb3e433ec67b7001ae6bfa2384d0effc601c811c689b8f
      image: docker.io/naison/kubevpn:v2.2.17
      imageID: docker.io/naison/kubevpn@sha256:b9e79ce1759abc602811f390fb6991ff6b7f593768ae570fc420cd27a62df22a
      lastState: {}
      name: vpn
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:12Z"
    - containerID: containerd://793891088834eea91814889bc59946e6d96da1396fc1b8f6142d9d2ee3df4b0b
      image: docker.io/naison/kubevpn:v2.2.17
      imageID: docker.io/naison/kubevpn@sha256:b9e79ce1759abc602811f390fb6991ff6b7f593768ae570fc420cd27a62df22a
      lastState: {}
      name: webhook
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:12Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.169
    podIPs:
    - ip: 10.100.234.169
    qosClass: Burstable
    startTime: "2024-09-17T02:44:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/configmap: db4433f92b88ac1d21d468d68567e2f1d650c621e29f807942a80452899bb240
      checksum/health: 1eace71641fb5bd753e90012419e82c10b1180d694f91d83743b727a5aacca73
      checksum/scripts: 83322e11cf597dc1882546fda61e298abb85b564f4b01ece2d2a4b8bafda377b
      checksum/secret: ecc318c34fad41cacd39ec6e02e8826ff866b145ec822af158ba8114561c5658
    creationTimestamp: "2024-09-06T07:22:12Z"
    generateName: my-release-redis-node-
    labels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/version: 7.4.0
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: my-release-redis-node-657c8dc95d
      helm.sh/chart: redis-20.0.5
      statefulset.kubernetes.io/pod-name: my-release-redis-node-0
    name: my-release-redis-node-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: my-release-redis-node
      uid: e57ab55e-81d7-4b1a-9240-9d76cdcb11a4
    resourceVersion: "9692359"
    uid: aa187233-0f1c-4044-a8a9-ca77fcb286a9
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: node
                app.kubernetes.io/instance: my-release
                app.kubernetes.io/name: redis
            topologyKey: kubernetes.io/hostname
          weight: 1
    automountServiceAccountToken: false
    containers:
    - args:
      - -c
      - /opt/bitnami/scripts/start-scripts/start-node.sh
      command:
      - /bin/bash
      env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: REDIS_MASTER_PORT_NUMBER
        value: "6379"
      - name: ALLOW_EMPTY_PASSWORD
        value: "no"
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: my-release-redis
      - name: REDIS_MASTER_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: my-release-redis
      - name: REDIS_TLS_ENABLED
        value: "no"
      - name: REDIS_PORT
        value: "6379"
      - name: REDIS_SENTINEL_TLS_ENABLED
        value: "no"
      - name: REDIS_SENTINEL_PORT
        value: "26379"
      - name: REDIS_DATA_DIR
        value: /data
      image: docker.io/bitnami/redis:7.4.0-debian-12-r2
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/prestop-redis.sh
      livenessProbe:
        exec:
          command:
          - sh
          - -c
          - /health/ping_liveness_local.sh 5
        failureThreshold: 5
        initialDelaySeconds: 20
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      name: redis
      ports:
      - containerPort: 6379
        name: redis
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - sh
          - -c
          - /health/ping_readiness_local.sh 1
        failureThreshold: 5
        initialDelaySeconds: 20
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: 150m
          ephemeral-storage: 2Gi
          memory: 192Mi
        requests:
          cpu: 100m
          ephemeral-storage: 50Mi
          memory: 128Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        exec:
          command:
          - sh
          - -c
          - /health/ping_liveness_local.sh 5
        failureThreshold: 22
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/bitnami/scripts/start-scripts
        name: start-scripts
      - mountPath: /health
        name: health
      - mountPath: /opt/bitnami/redis-sentinel/etc
        name: sentinel-data
      - mountPath: /data
        name: redis-data
      - mountPath: /opt/bitnami/redis/mounted-etc
        name: config
      - mountPath: /opt/bitnami/redis/etc
        name: empty-dir
        subPath: app-conf-dir
      - mountPath: /tmp
        name: empty-dir
        subPath: tmp-dir
    - args:
      - -c
      - /opt/bitnami/scripts/start-scripts/start-sentinel.sh
      command:
      - /bin/bash
      env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: my-release-redis
      - name: REDIS_SENTINEL_TLS_ENABLED
        value: "no"
      - name: REDIS_SENTINEL_PORT
        value: "26379"
      image: docker.io/bitnami/redis-sentinel:7.4.0-debian-12-r1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/prestop-sentinel.sh
      livenessProbe:
        exec:
          command:
          - sh
          - -c
          - /health/ping_sentinel.sh 5
        failureThreshold: 6
        initialDelaySeconds: 20
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: sentinel
      ports:
      - containerPort: 26379
        name: redis-sentinel
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - sh
          - -c
          - /health/ping_sentinel.sh 1
        failureThreshold: 6
        initialDelaySeconds: 20
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: 150m
          ephemeral-storage: 2Gi
          memory: 192Mi
        requests:
          cpu: 100m
          ephemeral-storage: 50Mi
          memory: 128Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        exec:
          command:
          - sh
          - -c
          - /health/ping_sentinel.sh 5
        failureThreshold: 22
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: empty-dir
        subPath: tmp-dir
      - mountPath: /opt/bitnami/scripts/start-scripts
        name: start-scripts
      - mountPath: /health
        name: health
      - mountPath: /opt/bitnami/redis-sentinel/etc
        name: sentinel-data
      - mountPath: /data
        name: redis-data
      - mountPath: /opt/bitnami/redis-sentinel/mounted-etc
        name: config
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: my-release-redis-node-0
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
      fsGroupChangePolicy: Always
    serviceAccount: my-release-redis
    serviceAccountName: my-release-redis
    subdomain: my-release-redis-headless
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: redis-data
      persistentVolumeClaim:
        claimName: redis-data-my-release-redis-node-0
    - configMap:
        defaultMode: 493
        name: my-release-redis-scripts
      name: start-scripts
    - configMap:
        defaultMode: 493
        name: my-release-redis-health
      name: health
    - configMap:
        defaultMode: 420
        name: my-release-redis-configuration
      name: config
    - emptyDir: {}
      name: sentinel-data
    - emptyDir: {}
      name: empty-dir
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T07:22:12Z"
      message: '0/4 nodes are available: 1 node(s) had untolerated taint {node-role.kubernetes.io/control-plane:
        }, 3 node(s) had volume node affinity conflict. preemption: 0/4 nodes are
        available: 4 Preemption is not helpful for scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: Burstable
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: f81348582125057e8bcf224d7080ac8e06b624ea48ad25ccdac5d61faf9a9cf4
      cni.projectcalico.org/podIP: 10.100.119.142/32
      cni.projectcalico.org/podIPs: 10.100.119.142/32
    creationTimestamp: "2024-09-17T08:41:41Z"
    labels:
      run: nginx-geoip2-test
    name: nginx-geoip2-test
    namespace: default
    resourceVersion: "9780676"
    uid: 40185414-0055-4574-aac9-f2faf5c09fa4
  spec:
    containers:
    - image: anroe/nginx-geoip2
      imagePullPolicy: Always
      name: nginx-geoip2-test
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qdwz4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-qdwz4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T08:41:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T08:41:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T08:41:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T08:41:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6def1d3a8fa058a38cda71ab6b5414be19a12197660498a3c5e3064a22d2364f
      image: docker.io/anroe/nginx-geoip2:latest
      imageID: docker.io/anroe/nginx-geoip2@sha256:1978a92d8e9bdd27169d187d8fbf9085141573ae07121a72b759432b153af1ea
      lastState: {}
      name: nginx-geoip2-test
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T08:41:50Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 10.100.119.142
    podIPs:
    - ip: 10.100.119.142
    qosClass: BestEffort
    startTime: "2024-09-17T08:41:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 38323efc9409f79eb3140d1e46a4c6a6437f295952caaa302e569b2aa44a881e
      cni.projectcalico.org/podIP: 10.100.38.163/32
      cni.projectcalico.org/podIPs: 10.100.38.163/32
      configchecksum: 09c9d8915c54f4267b1f97366172b6ca7bfa6f0f668343d48f675f2113dea8e
    creationTimestamp: "2024-09-18T04:25:07Z"
    generateName: elasticsearch-master-
    labels:
      app: elasticsearch-master
      apps.kubernetes.io/pod-index: "0"
      chart: elasticsearch
      controller-revision-hash: elasticsearch-master-846cb8ff77
      release: elasticsearch
      statefulset.kubernetes.io/pod-name: elasticsearch-master-0
    name: elasticsearch-master-0
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: elasticsearch-master
      uid: 9f112f6a-6da1-4e71-80e1-df0ad5566aa3
    resourceVersion: "10090483"
    uid: 6761cb78-90b5-4776-92a1-c853f6cb8b88
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - elasticsearch-master
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - env:
      - name: node.name
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: cluster.initial_master_nodes
        value: elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,
      - name: node.roles
        value: master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,
      - name: discovery.seed_hosts
        value: elasticsearch-master-headless
      - name: cluster.name
        value: elasticsearch
      - name: network.host
        value: 0.0.0.0
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: elasticsearch-master-credentials
      - name: xpack.security.enabled
        value: "true"
      - name: xpack.security.transport.ssl.enabled
        value: "true"
      - name: xpack.security.http.ssl.enabled
        value: "true"
      - name: xpack.security.transport.ssl.verification_mode
        value: certificate
      - name: xpack.security.transport.ssl.key
        value: /usr/share/elasticsearch/config/certs/tls.key
      - name: xpack.security.transport.ssl.certificate
        value: /usr/share/elasticsearch/config/certs/tls.crt
      - name: xpack.security.transport.ssl.certificate_authorities
        value: /usr/share/elasticsearch/config/certs/ca.crt
      - name: xpack.security.http.ssl.key
        value: /usr/share/elasticsearch/config/certs/tls.key
      - name: xpack.security.http.ssl.certificate
        value: /usr/share/elasticsearch/config/certs/tls.crt
      - name: xpack.security.http.ssl.certificate_authorities
        value: /usr/share/elasticsearch/config/certs/ca.crt
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imagePullPolicy: IfNotPresent
      name: elasticsearch
      ports:
      - containerPort: 9200
        name: http
        protocol: TCP
      - containerPort: 9300
        name: transport
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - bash
          - -c
          - |
            set -e

            # Exit if ELASTIC_PASSWORD in unset
            if [ -z "${ELASTIC_PASSWORD}" ]; then
              echo "ELASTIC_PASSWORD variable is missing, exiting"
              exit 1
            fi

            # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
            # Once it has started only check that the node itself is responding
            START_FILE=/tmp/.es_start_file

            # Disable nss cache to avoid filling dentry cache when calling curl
            # This is required with Elasticsearch Docker using nss < 3.52
            export NSS_SDB_USE_CACHE=no

            http () {
              local path="${1}"
              local args="${2}"
              set -- -XGET -s

              if [ "$args" != "" ]; then
                set -- "$@" $args
              fi

              set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

              curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
            }

            if [ -f "${START_FILE}" ]; then
              echo 'Elasticsearch is already running, lets check the node is healthy'
              HTTP_CODE=$(http "/" "-w %{http_code}")
              RC=$?
              if [[ ${RC} -ne 0 ]]; then
                echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                exit ${RC}
              fi
              # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
              if [[ ${HTTP_CODE} == "200" ]]; then
                exit 0
              elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                exit 0
              else
                echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                exit 1
              fi

            else
              echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
              if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                touch ${START_FILE}
                exit 0
              else
                echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                exit 1
              fi
            fi
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 3
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: "1"
          memory: 2Gi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/elasticsearch/data
        name: elasticsearch-master
      - mountPath: /usr/share/elasticsearch/config/certs
        name: elasticsearch-certs
        readOnly: true
      - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
        name: esconfig
        subPath: elasticsearch.yml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tc22d
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: elasticsearch-master-0
    initContainers:
    - command:
      - sysctl
      - -w
      - vm.max_map_count=262144
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imagePullPolicy: IfNotPresent
      name: configure-sysctl
      resources: {}
      securityContext:
        privileged: true
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tc22d
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount: default
    serviceAccountName: default
    subdomain: elasticsearch-master-headless
    terminationGracePeriodSeconds: 120
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: elasticsearch-master
      persistentVolumeClaim:
        claimName: elasticsearch-master-elasticsearch-master-0
    - configMap:
        defaultMode: 420
        name: elasticsearch-master-config
      name: esconfig
    - name: elasticsearch-certs
      secret:
        defaultMode: 420
        secretName: elasticsearch-master-certs
    - name: kube-api-access-tc22d
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:25:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:26:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:26:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:25:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f3d821a6a1a006c67638f1e5cc2c5a9ed57482cb8c0833e6c3fbb6407087f68f
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imageID: docker.elastic.co/elasticsearch/elasticsearch@sha256:d784066422aec9f66ae424f692d2416057e78853ab015915a04530570c955cc8
      lastState: {}
      name: elasticsearch
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T04:25:09Z"
    hostIP: 192.168.1.227
    initContainerStatuses:
    - containerID: containerd://46088e842f83787477e2106d15302a1773ca4d8c25ca6263935c3049ce435e46
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imageID: docker.elastic.co/elasticsearch/elasticsearch@sha256:d784066422aec9f66ae424f692d2416057e78853ab015915a04530570c955cc8
      lastState: {}
      name: configure-sysctl
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://46088e842f83787477e2106d15302a1773ca4d8c25ca6263935c3049ce435e46
          exitCode: 0
          finishedAt: "2024-09-18T04:25:08Z"
          reason: Completed
          startedAt: "2024-09-18T04:25:08Z"
    phase: Running
    podIP: 10.100.38.163
    podIPs:
    - ip: 10.100.38.163
    qosClass: Burstable
    startTime: "2024-09-18T04:25:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 9cd0b8beb7e00da0c10d57646b5beb38d883c3ae5fa9eaae7aa3f89a2c438cd2
      cni.projectcalico.org/podIP: 10.100.234.177/32
      cni.projectcalico.org/podIPs: 10.100.234.177/32
      configchecksum: 09c9d8915c54f4267b1f97366172b6ca7bfa6f0f668343d48f675f2113dea8e
    creationTimestamp: "2024-09-18T04:24:04Z"
    generateName: elasticsearch-master-
    labels:
      app: elasticsearch-master
      apps.kubernetes.io/pod-index: "1"
      chart: elasticsearch
      controller-revision-hash: elasticsearch-master-846cb8ff77
      release: elasticsearch
      statefulset.kubernetes.io/pod-name: elasticsearch-master-1
    name: elasticsearch-master-1
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: elasticsearch-master
      uid: 9f112f6a-6da1-4e71-80e1-df0ad5566aa3
    resourceVersion: "10090164"
    uid: d044a282-a3ba-4ddb-b26e-f1a29f8bc626
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - elasticsearch-master
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - env:
      - name: node.name
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: cluster.initial_master_nodes
        value: elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,
      - name: node.roles
        value: master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,
      - name: discovery.seed_hosts
        value: elasticsearch-master-headless
      - name: cluster.name
        value: elasticsearch
      - name: network.host
        value: 0.0.0.0
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: elasticsearch-master-credentials
      - name: xpack.security.enabled
        value: "true"
      - name: xpack.security.transport.ssl.enabled
        value: "true"
      - name: xpack.security.http.ssl.enabled
        value: "true"
      - name: xpack.security.transport.ssl.verification_mode
        value: certificate
      - name: xpack.security.transport.ssl.key
        value: /usr/share/elasticsearch/config/certs/tls.key
      - name: xpack.security.transport.ssl.certificate
        value: /usr/share/elasticsearch/config/certs/tls.crt
      - name: xpack.security.transport.ssl.certificate_authorities
        value: /usr/share/elasticsearch/config/certs/ca.crt
      - name: xpack.security.http.ssl.key
        value: /usr/share/elasticsearch/config/certs/tls.key
      - name: xpack.security.http.ssl.certificate
        value: /usr/share/elasticsearch/config/certs/tls.crt
      - name: xpack.security.http.ssl.certificate_authorities
        value: /usr/share/elasticsearch/config/certs/ca.crt
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imagePullPolicy: IfNotPresent
      name: elasticsearch
      ports:
      - containerPort: 9200
        name: http
        protocol: TCP
      - containerPort: 9300
        name: transport
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - bash
          - -c
          - |
            set -e

            # Exit if ELASTIC_PASSWORD in unset
            if [ -z "${ELASTIC_PASSWORD}" ]; then
              echo "ELASTIC_PASSWORD variable is missing, exiting"
              exit 1
            fi

            # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
            # Once it has started only check that the node itself is responding
            START_FILE=/tmp/.es_start_file

            # Disable nss cache to avoid filling dentry cache when calling curl
            # This is required with Elasticsearch Docker using nss < 3.52
            export NSS_SDB_USE_CACHE=no

            http () {
              local path="${1}"
              local args="${2}"
              set -- -XGET -s

              if [ "$args" != "" ]; then
                set -- "$@" $args
              fi

              set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

              curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
            }

            if [ -f "${START_FILE}" ]; then
              echo 'Elasticsearch is already running, lets check the node is healthy'
              HTTP_CODE=$(http "/" "-w %{http_code}")
              RC=$?
              if [[ ${RC} -ne 0 ]]; then
                echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                exit ${RC}
              fi
              # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
              if [[ ${HTTP_CODE} == "200" ]]; then
                exit 0
              elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                exit 0
              else
                echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                exit 1
              fi

            else
              echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
              if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                touch ${START_FILE}
                exit 0
              else
                echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                exit 1
              fi
            fi
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 3
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: "1"
          memory: 2Gi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/elasticsearch/data
        name: elasticsearch-master
      - mountPath: /usr/share/elasticsearch/config/certs
        name: elasticsearch-certs
        readOnly: true
      - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
        name: esconfig
        subPath: elasticsearch.yml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nkkkl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: elasticsearch-master-1
    initContainers:
    - command:
      - sysctl
      - -w
      - vm.max_map_count=262144
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imagePullPolicy: IfNotPresent
      name: configure-sysctl
      resources: {}
      securityContext:
        privileged: true
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nkkkl
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount: default
    serviceAccountName: default
    subdomain: elasticsearch-master-headless
    terminationGracePeriodSeconds: 120
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: elasticsearch-master
      persistentVolumeClaim:
        claimName: elasticsearch-master-elasticsearch-master-1
    - configMap:
        defaultMode: 420
        name: elasticsearch-master-config
      name: esconfig
    - name: elasticsearch-certs
      secret:
        defaultMode: 420
        secretName: elasticsearch-master-certs
    - name: kube-api-access-nkkkl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:24:05Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:25:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:25:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:24:04Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://11e77649a3d39d7afe6ac2096837217a317e7c161a17a9dc33ab2d2b5c1d546d
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imageID: docker.elastic.co/elasticsearch/elasticsearch@sha256:d784066422aec9f66ae424f692d2416057e78853ab015915a04530570c955cc8
      lastState: {}
      name: elasticsearch
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T04:24:05Z"
    hostIP: 192.168.1.93
    initContainerStatuses:
    - containerID: containerd://16bed412a44124ba912969400db0dd2e2435a32f74ce07d622244178c2b6dc62
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imageID: docker.elastic.co/elasticsearch/elasticsearch@sha256:d784066422aec9f66ae424f692d2416057e78853ab015915a04530570c955cc8
      lastState: {}
      name: configure-sysctl
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://16bed412a44124ba912969400db0dd2e2435a32f74ce07d622244178c2b6dc62
          exitCode: 0
          finishedAt: "2024-09-18T04:24:04Z"
          reason: Completed
          startedAt: "2024-09-18T04:24:04Z"
    phase: Running
    podIP: 10.100.234.177
    podIPs:
    - ip: 10.100.234.177
    qosClass: Burstable
    startTime: "2024-09-18T04:24:04Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 5556aa9ab8669444be8631d179c4cda10b6ca34dbcabdd59033fb697ab4601fa
      cni.projectcalico.org/podIP: 10.100.119.159/32
      cni.projectcalico.org/podIPs: 10.100.119.159/32
      configchecksum: 09c9d8915c54f4267b1f97366172b6ca7bfa6f0f668343d48f675f2113dea8e
    creationTimestamp: "2024-09-18T04:22:58Z"
    generateName: elasticsearch-master-
    labels:
      app: elasticsearch-master
      apps.kubernetes.io/pod-index: "2"
      chart: elasticsearch
      controller-revision-hash: elasticsearch-master-846cb8ff77
      release: elasticsearch
      statefulset.kubernetes.io/pod-name: elasticsearch-master-2
    name: elasticsearch-master-2
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: elasticsearch-master
      uid: 9f112f6a-6da1-4e71-80e1-df0ad5566aa3
    resourceVersion: "10089841"
    uid: a8fcf0b2-e107-427d-b464-b2911b20b783
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - elasticsearch-master
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - env:
      - name: node.name
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: cluster.initial_master_nodes
        value: elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,
      - name: node.roles
        value: master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,
      - name: discovery.seed_hosts
        value: elasticsearch-master-headless
      - name: cluster.name
        value: elasticsearch
      - name: network.host
        value: 0.0.0.0
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: elasticsearch-master-credentials
      - name: xpack.security.enabled
        value: "true"
      - name: xpack.security.transport.ssl.enabled
        value: "true"
      - name: xpack.security.http.ssl.enabled
        value: "true"
      - name: xpack.security.transport.ssl.verification_mode
        value: certificate
      - name: xpack.security.transport.ssl.key
        value: /usr/share/elasticsearch/config/certs/tls.key
      - name: xpack.security.transport.ssl.certificate
        value: /usr/share/elasticsearch/config/certs/tls.crt
      - name: xpack.security.transport.ssl.certificate_authorities
        value: /usr/share/elasticsearch/config/certs/ca.crt
      - name: xpack.security.http.ssl.key
        value: /usr/share/elasticsearch/config/certs/tls.key
      - name: xpack.security.http.ssl.certificate
        value: /usr/share/elasticsearch/config/certs/tls.crt
      - name: xpack.security.http.ssl.certificate_authorities
        value: /usr/share/elasticsearch/config/certs/ca.crt
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imagePullPolicy: IfNotPresent
      name: elasticsearch
      ports:
      - containerPort: 9200
        name: http
        protocol: TCP
      - containerPort: 9300
        name: transport
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - bash
          - -c
          - |
            set -e

            # Exit if ELASTIC_PASSWORD in unset
            if [ -z "${ELASTIC_PASSWORD}" ]; then
              echo "ELASTIC_PASSWORD variable is missing, exiting"
              exit 1
            fi

            # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
            # Once it has started only check that the node itself is responding
            START_FILE=/tmp/.es_start_file

            # Disable nss cache to avoid filling dentry cache when calling curl
            # This is required with Elasticsearch Docker using nss < 3.52
            export NSS_SDB_USE_CACHE=no

            http () {
              local path="${1}"
              local args="${2}"
              set -- -XGET -s

              if [ "$args" != "" ]; then
                set -- "$@" $args
              fi

              set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

              curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
            }

            if [ -f "${START_FILE}" ]; then
              echo 'Elasticsearch is already running, lets check the node is healthy'
              HTTP_CODE=$(http "/" "-w %{http_code}")
              RC=$?
              if [[ ${RC} -ne 0 ]]; then
                echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                exit ${RC}
              fi
              # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
              if [[ ${HTTP_CODE} == "200" ]]; then
                exit 0
              elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                exit 0
              else
                echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                exit 1
              fi

            else
              echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
              if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                touch ${START_FILE}
                exit 0
              else
                echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                exit 1
              fi
            fi
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 3
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: "1"
          memory: 2Gi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/elasticsearch/data
        name: elasticsearch-master
      - mountPath: /usr/share/elasticsearch/config/certs
        name: elasticsearch-certs
        readOnly: true
      - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
        name: esconfig
        subPath: elasticsearch.yml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbmdj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: elasticsearch-master-2
    initContainers:
    - command:
      - sysctl
      - -w
      - vm.max_map_count=262144
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imagePullPolicy: IfNotPresent
      name: configure-sysctl
      resources: {}
      securityContext:
        privileged: true
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbmdj
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount: default
    serviceAccountName: default
    subdomain: elasticsearch-master-headless
    terminationGracePeriodSeconds: 120
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: elasticsearch-master
      persistentVolumeClaim:
        claimName: elasticsearch-master-elasticsearch-master-2
    - configMap:
        defaultMode: 420
        name: elasticsearch-master-config
      name: esconfig
    - name: elasticsearch-certs
      secret:
        defaultMode: 420
        secretName: elasticsearch-master-certs
    - name: kube-api-access-qbmdj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:23:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:24:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:24:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:22:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9a49157dc6a7c7617a5c92dc58a4fbec476465a8af19a9efb79aa13e821667aa
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imageID: docker.elastic.co/elasticsearch/elasticsearch@sha256:d784066422aec9f66ae424f692d2416057e78853ab015915a04530570c955cc8
      lastState: {}
      name: elasticsearch
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T04:23:01Z"
    hostIP: 192.168.1.216
    initContainerStatuses:
    - containerID: containerd://af0f8d63002cd03b31748482217cdfaaf2578e54c6c593a94cb574b8ed542b01
      image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
      imageID: docker.elastic.co/elasticsearch/elasticsearch@sha256:d784066422aec9f66ae424f692d2416057e78853ab015915a04530570c955cc8
      lastState: {}
      name: configure-sysctl
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://af0f8d63002cd03b31748482217cdfaaf2578e54c6c593a94cb574b8ed542b01
          exitCode: 0
          finishedAt: "2024-09-18T04:23:00Z"
          reason: Completed
          startedAt: "2024-09-18T04:23:00Z"
    phase: Running
    podIP: 10.100.119.159
    podIPs:
    - ip: 10.100.119.159
    qosClass: Burstable
    startTime: "2024-09-18T04:22:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: a762acbc77da003e6a9d06398616e302c390389dcbb3bbfd434444a9f1a7cfda
      cni.projectcalico.org/containerID: 0fb65e2b359c31474ab0c52ab70f3ed62ecb715fe8752c6fe010320c8a584ea6
      cni.projectcalico.org/podIP: 10.100.234.146/32
      cni.projectcalico.org/podIPs: 10.100.234.146/32
      kubectl.kubernetes.io/restartedAt: "2024-09-19T10:30:58+07:00"
    creationTimestamp: "2024-09-19T03:31:03Z"
    generateName: fluent-bit-
    labels:
      app.kubernetes.io/instance: fluent-bit
      app.kubernetes.io/name: fluent-bit
      controller-revision-hash: 794f54d5
      pod-template-generation: "78"
    name: fluent-bit-kffkt
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluent-bit
      uid: 4106707d-b5e3-4686-86d1-f7947b0e8d4b
    resourceVersion: "10454068"
    uid: 64431aaa-8cd6-48b5-b30e-8648faed88cf
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    containers:
    - args:
      - --workdir=/fluent-bit/etc
      - --config=/fluent-bit/etc/conf/fluent-bit.conf
      command:
      - /fluent-bit/bin/fluent-bit
      image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: fluent-bit
      ports:
      - containerPort: 2020
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/v1/health
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /fluent-bit/etc/conf
        name: config
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /etc/machine-id
        name: etcmachineid
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h72d5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluent-bit
    serviceAccountName: fluent-bit
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: fluent-bit
      name: config
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /etc/machine-id
        type: File
      name: etcmachineid
    - name: kube-api-access-h72d5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7534c98d682e053b46f53b3d6990f07398eca9ed7431af3e93bff851fdf17177
      image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
      imageID: cr.fluentbit.io/fluent/fluent-bit@sha256:a93d6119f67f804843f6d4d97dd8448389abed7e821e7513c5b8f387e57edfb9
      lastState: {}
      name: fluent-bit
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-19T03:31:03Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.146
    podIPs:
    - ip: 10.100.234.146
    qosClass: BestEffort
    startTime: "2024-09-19T03:31:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: a762acbc77da003e6a9d06398616e302c390389dcbb3bbfd434444a9f1a7cfda
      cni.projectcalico.org/containerID: bd451f1d521d46b3f1128c1471ff8314f8e5abfe71ef1f185fbe1b22f22a64b0
      cni.projectcalico.org/podIP: 10.100.119.137/32
      cni.projectcalico.org/podIPs: 10.100.119.137/32
      kubectl.kubernetes.io/restartedAt: "2024-09-19T10:30:58+07:00"
    creationTimestamp: "2024-09-19T03:31:10Z"
    generateName: fluent-bit-
    labels:
      app.kubernetes.io/instance: fluent-bit
      app.kubernetes.io/name: fluent-bit
      controller-revision-hash: 794f54d5
      pod-template-generation: "78"
    name: fluent-bit-s6b9v
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluent-bit
      uid: 4106707d-b5e3-4686-86d1-f7947b0e8d4b
    resourceVersion: "10454129"
    uid: 4ac8c74d-f5ed-4a05-a8dc-9e2997005ec7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    containers:
    - args:
      - --workdir=/fluent-bit/etc
      - --config=/fluent-bit/etc/conf/fluent-bit.conf
      command:
      - /fluent-bit/bin/fluent-bit
      image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: fluent-bit
      ports:
      - containerPort: 2020
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/v1/health
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /fluent-bit/etc/conf
        name: config
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /etc/machine-id
        name: etcmachineid
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7jlkl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluent-bit
    serviceAccountName: fluent-bit
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: fluent-bit
      name: config
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /etc/machine-id
        type: File
      name: etcmachineid
    - name: kube-api-access-7jlkl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c2a4ea83c1395fd58c03af683188d9ff5705da25ff2d5275e8ea88158b11fc7a
      image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
      imageID: cr.fluentbit.io/fluent/fluent-bit@sha256:a93d6119f67f804843f6d4d97dd8448389abed7e821e7513c5b8f387e57edfb9
      lastState: {}
      name: fluent-bit
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-19T03:31:10Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 10.100.119.137
    podIPs:
    - ip: 10.100.119.137
    qosClass: BestEffort
    startTime: "2024-09-19T03:31:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: a762acbc77da003e6a9d06398616e302c390389dcbb3bbfd434444a9f1a7cfda
      cni.projectcalico.org/containerID: 038ede083bc955d87351108891f061cb0a7e0a923e8b3b99b9069114a3c76f1c
      cni.projectcalico.org/podIP: 10.100.38.140/32
      cni.projectcalico.org/podIPs: 10.100.38.140/32
      kubectl.kubernetes.io/restartedAt: "2024-09-19T10:30:58+07:00"
    creationTimestamp: "2024-09-19T03:31:16Z"
    generateName: fluent-bit-
    labels:
      app.kubernetes.io/instance: fluent-bit
      app.kubernetes.io/name: fluent-bit
      controller-revision-hash: 794f54d5
      pod-template-generation: "78"
    name: fluent-bit-w84b5
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: fluent-bit
      uid: 4106707d-b5e3-4686-86d1-f7947b0e8d4b
    resourceVersion: "10454184"
    uid: 38a4f3f3-dfca-48fe-914f-b1f750ba14bc
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    containers:
    - args:
      - --workdir=/fluent-bit/etc
      - --config=/fluent-bit/etc/conf/fluent-bit.conf
      command:
      - /fluent-bit/bin/fluent-bit
      image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: fluent-bit
      ports:
      - containerPort: 2020
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/v1/health
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /fluent-bit/etc/conf
        name: config
      - mountPath: /var/log
        name: varlog
      - mountPath: /var/lib/docker/containers
        name: varlibdockercontainers
        readOnly: true
      - mountPath: /etc/machine-id
        name: etcmachineid
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7pz7r
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: fluent-bit
    serviceAccountName: fluent-bit
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: fluent-bit
      name: config
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
        type: ""
      name: varlibdockercontainers
    - hostPath:
        path: /etc/machine-id
        type: File
      name: etcmachineid
    - name: kube-api-access-7pz7r
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-19T03:31:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a090d63e10b5a003e0b3e40362f9cdcbc09a9ca4b5aa60f8bc1d534c4db48a8f
      image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
      imageID: cr.fluentbit.io/fluent/fluent-bit@sha256:a93d6119f67f804843f6d4d97dd8448389abed7e821e7513c5b8f387e57edfb9
      lastState: {}
      name: fluent-bit
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-19T03:31:16Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.140
    podIPs:
    - ip: 10.100.38.140
    qosClass: BestEffort
    startTime: "2024-09-19T03:31:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: db7be493c2df617d43a6653d5d2f404c1c8898b6abe66e2a5fc911d3a819d3c6
      cni.projectcalico.org/podIP: 10.100.119.160/32
      cni.projectcalico.org/podIPs: 10.100.119.160/32
      kubectl.kubernetes.io/restartedAt: "2024-09-18T11:27:25+07:00"
    creationTimestamp: "2024-09-18T04:27:25Z"
    generateName: kibana-kibana-599764769b-
    labels:
      app: kibana
      pod-template-hash: 599764769b
      release: kibana
    name: kibana-kibana-599764769b-hjgds
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kibana-kibana-599764769b
      uid: 56193e66-5e3d-45f2-bcd5-6dd4fe586bd4
    resourceVersion: "10091095"
    uid: caddfb3d-18f1-48c5-bd43-a875b57d66bc
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: ELASTICSEARCH_HOSTS
        value: https://elasticsearch-master:9200
      - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
        value: /usr/share/kibana/config/certs/ca.crt
      - name: SERVER_HOST
        value: 0.0.0.0
      - name: ELASTICSEARCH_SERVICEACCOUNTTOKEN
        valueFrom:
          secretKeyRef:
            key: token
            name: kibana-kibana-es-token
            optional: false
      - name: NODE_OPTIONS
        value: --max-old-space-size=1800
      image: docker.elastic.co/kibana/kibana:8.5.1
      imagePullPolicy: IfNotPresent
      name: kibana
      ports:
      - containerPort: 5601
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - bash
          - -c
          - |
            #!/usr/bin/env bash -e

            # Disable nss cache to avoid filling dentry cache when calling curl
            # This is required with Kibana Docker using nss < 3.52
            export NSS_SDB_USE_CACHE=no

            http () {
                local path="${1}"
                set -- -XGET -s --fail -L

                if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                  set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                fi

                STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                if [[ "${STATUS}" -eq 200 ]]; then
                  exit 0
                fi

                echo "Error: Got HTTP code ${STATUS} but expected a 200"
                exit 1
            }

            http "/app/kibana"
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 3
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: "1"
          memory: 2Gi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/kibana/config/certs
        name: elasticsearch-certs
        readOnly: true
      - mountPath: /usr/share/kibana/config/tokens
        name: kibana-tokens
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pzq57
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: kibana-tokens
    - name: elasticsearch-certs
      secret:
        defaultMode: 420
        secretName: elasticsearch-master-certs
    - name: kube-api-access-pzq57
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:27:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:28:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:28:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T04:27:25Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://069bf9e6d8949052486eb06cd802f6db9f9e9fa8605b28f49e5e52099705464c
      image: docker.elastic.co/kibana/kibana:8.5.1
      imageID: docker.elastic.co/kibana/kibana@sha256:3266a417b69207dab8da9a732d93c11512944f2ec88a9cd169bfbb0d6fd878f5
      lastState: {}
      name: kibana
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T04:27:42Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 10.100.119.160
    podIPs:
    - ip: 10.100.119.160
    qosClass: Guaranteed
    startTime: "2024-09-18T04:27:25Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/configmap: 0338e47c77ee8d17153bd150ea273a62ad2cddcdaa4e1c7dd7afe75df41ec8c4
      checksum/secrets: 763d5e1555dda7f2b5e483869426ce8f2b0f10afff8e22ff4ed45eefa5c7d834
      cni.projectcalico.org/containerID: 76080d67e9ebbeeb330f71ab3f68dafe1cf230bea69936d7c98ca17d1615c343
      cni.projectcalico.org/podIP: 10.100.38.166/32
      cni.projectcalico.org/podIPs: 10.100.38.166/32
    creationTimestamp: "2024-09-11T08:10:14Z"
    generateName: gitlab-runner-c4d4cbb6f-
    labels:
      app: gitlab-runner
      chart: gitlab-runner-0.68.1
      heritage: Helm
      pod-template-hash: c4d4cbb6f
      release: gitlab-runner
    name: gitlab-runner-c4d4cbb6f-hbgq8
    namespace: gitlab-runner
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: gitlab-runner-c4d4cbb6f
      uid: 42acdd89-7f79-4f2c-a978-203582bb5119
    resourceVersion: "7525229"
    uid: 772f3d43-c804-458f-a76c-61fdbb04fec0
  spec:
    containers:
    - command:
      - /usr/bin/dumb-init
      - --
      - /bin/bash
      - /configmaps/entrypoint
      env:
      - name: CI_SERVER_URL
        value: https://gitlab.com/
      - name: RUNNER_EXECUTOR
        value: kubernetes
      - name: SESSION_SERVER_ADDRESS
      image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v17.3.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /entrypoint
            - unregister
            - --all-runners
      livenessProbe:
        exec:
          command:
          - /bin/bash
          - /configmaps/check-live
          - "3"
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 4
      name: gitlab-runner
      ports:
      - containerPort: 9252
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /usr/bin/pgrep
          - gitlab.*runner
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 4
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /secrets
        name: projected-secrets
      - mountPath: /home/gitlab-runner/.gitlab-runner
        name: etc-gitlab-runner
      - mountPath: /configmaps
        name: configmaps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sjfjk
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65533
      runAsUser: 100
    serviceAccount: gitlab-runner
    serviceAccountName: gitlab-runner
    terminationGracePeriodSeconds: 3600
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: runner-secrets
    - emptyDir:
        medium: Memory
      name: etc-gitlab-runner
    - name: projected-secrets
      projected:
        defaultMode: 420
        sources:
        - secret:
            items:
            - key: runner-registration-token
              path: runner-registration-token
            - key: runner-token
              path: runner-token
            name: gitlab-runner
    - configMap:
        defaultMode: 420
        name: gitlab-runner
      name: configmaps
    - name: kube-api-access-sjfjk
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-11T08:10:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-11T08:11:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-11T08:11:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-11T08:10:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1d2fa53a826d31d0c0b469681d1ba8668e504a7f782443be7d110f99fa4207e4
      image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v17.3.1
      imageID: registry.gitlab.com/gitlab-org/gitlab-runner@sha256:54a6f23b0ebffe0e3201a28a2f461fd9d41dd0ec748aeb4acb81ebe26e891347
      lastState: {}
      name: gitlab-runner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-11T08:10:15Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.166
    podIPs:
    - ip: 10.100.38.166
    qosClass: BestEffort
    startTime: "2024-09-11T08:10:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/configmap: 0338e47c77ee8d17153bd150ea273a62ad2cddcdaa4e1c7dd7afe75df41ec8c4
      checksum/secrets: 763d5e1555dda7f2b5e483869426ce8f2b0f10afff8e22ff4ed45eefa5c7d834
      cni.projectcalico.org/containerID: d6a097a2f4e109e010a72cf5dd82d508a68f7ed004e9e5403c53ec83b84fa1bf
      cni.projectcalico.org/podIP: 10.100.234.163/32
      cni.projectcalico.org/podIPs: 10.100.234.163/32
    creationTimestamp: "2024-09-17T02:44:12Z"
    generateName: gitlab-runner-c4d4cbb6f-
    labels:
      app: gitlab-runner
      chart: gitlab-runner-0.68.1
      heritage: Helm
      pod-template-hash: c4d4cbb6f
      release: gitlab-runner
    name: gitlab-runner-c4d4cbb6f-qtqgr
    namespace: gitlab-runner
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: gitlab-runner-c4d4cbb6f
      uid: 42acdd89-7f79-4f2c-a978-203582bb5119
    resourceVersion: "9686481"
    uid: 22fb4e23-e21a-4910-82e5-e3c5b4dc1fca
  spec:
    containers:
    - command:
      - /usr/bin/dumb-init
      - --
      - /bin/bash
      - /configmaps/entrypoint
      env:
      - name: CI_SERVER_URL
        value: https://gitlab.com/
      - name: RUNNER_EXECUTOR
        value: kubernetes
      - name: SESSION_SERVER_ADDRESS
      image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v17.3.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /entrypoint
            - unregister
            - --all-runners
      livenessProbe:
        exec:
          command:
          - /bin/bash
          - /configmaps/check-live
          - "3"
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 4
      name: gitlab-runner
      ports:
      - containerPort: 9252
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /usr/bin/pgrep
          - gitlab.*runner
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 4
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /secrets
        name: projected-secrets
      - mountPath: /home/gitlab-runner/.gitlab-runner
        name: etc-gitlab-runner
      - mountPath: /configmaps
        name: configmaps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jt2pv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65533
      runAsUser: 100
    serviceAccount: gitlab-runner
    serviceAccountName: gitlab-runner
    terminationGracePeriodSeconds: 3600
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: runner-secrets
    - emptyDir:
        medium: Memory
      name: etc-gitlab-runner
    - name: projected-secrets
      projected:
        defaultMode: 420
        sources:
        - secret:
            items:
            - key: runner-registration-token
              path: runner-registration-token
            - key: runner-token
              path: runner-token
            name: gitlab-runner
    - configMap:
        defaultMode: 420
        name: gitlab-runner
      name: configmaps
    - name: kube-api-access-jt2pv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:45:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:45:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:44:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0b288025fa42f614fb69e053fab7cdfbf7a3f451b6e5502524f210a3940f6b4d
      image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v17.3.1
      imageID: registry.gitlab.com/gitlab-org/gitlab-runner@sha256:54a6f23b0ebffe0e3201a28a2f461fd9d41dd0ec748aeb4acb81ebe26e891347
      lastState: {}
      name: gitlab-runner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:44:12Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.163
    podIPs:
    - ip: 10.100.234.163
    qosClass: BestEffort
    startTime: "2024-09-17T02:44:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 6792e3c0936de77afcea8a298f523a7cf292463a396a0cc7b4a05544a88fa9b6
      cni.projectcalico.org/podIP: ""
      cni.projectcalico.org/podIPs: ""
    creationTimestamp: "2024-08-29T09:00:40Z"
    generateName: ingress-nginx-admission-create-
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      batch.kubernetes.io/controller-uid: 0c905654-141e-48de-af2f-94562599efba
      batch.kubernetes.io/job-name: ingress-nginx-admission-create
      controller-uid: 0c905654-141e-48de-af2f-94562599efba
      job-name: ingress-nginx-admission-create
    name: ingress-nginx-admission-create-6tbn4
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: ingress-nginx-admission-create
      uid: 0c905654-141e-48de-af2f-94562599efba
    resourceVersion: "2687853"
    uid: bca9c2ee-2c79-4d4e-a104-d67d0b7ec425
  spec:
    containers:
    - args:
      - create
      - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
      - --namespace=$(POD_NAMESPACE)
      - --secret-name=ingress-nginx-admission
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
      imagePullPolicy: IfNotPresent
      name: create
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pcsck
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-admission
    serviceAccountName: ingress-nginx-admission
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-pcsck
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:40Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:49Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:49Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://be57c8fa15c77d85e5d5fdaeb4618cd300564c6110e8cb36b2fbffb86ea08a80
      image: sha256:b29d748098e32a42a2ac743679dd53501184ba9c4a1009248b6f60a370895135
      imageID: registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
      lastState: {}
      name: create
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://be57c8fa15c77d85e5d5fdaeb4618cd300564c6110e8cb36b2fbffb86ea08a80
          exitCode: 0
          finishedAt: "2024-08-29T09:00:48Z"
          reason: Completed
          startedAt: "2024-08-29T09:00:48Z"
    hostIP: 192.168.1.227
    phase: Succeeded
    podIP: 10.100.38.182
    podIPs:
    - ip: 10.100.38.182
    qosClass: BestEffort
    startTime: "2024-08-29T09:00:40Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7004e75f7e4bb845b9d2e635dc679d67f9328176ea3c258501aacf3596e5becf
      cni.projectcalico.org/podIP: ""
      cni.projectcalico.org/podIPs: ""
    creationTimestamp: "2024-08-29T09:00:40Z"
    generateName: ingress-nginx-admission-patch-
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      batch.kubernetes.io/controller-uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
      batch.kubernetes.io/job-name: ingress-nginx-admission-patch
      controller-uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
      job-name: ingress-nginx-admission-patch
    name: ingress-nginx-admission-patch-w9bg8
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: ingress-nginx-admission-patch
      uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
    resourceVersion: "2687856"
    uid: 8aa077bd-7c8f-4477-9d89-15f360b8c2e7
  spec:
    containers:
    - args:
      - patch
      - --webhook-name=ingress-nginx-admission
      - --namespace=$(POD_NAMESPACE)
      - --patch-mutating=false
      - --secret-name=ingress-nginx-admission
      - --patch-failure-policy=Fail
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
      imagePullPolicy: IfNotPresent
      name: patch
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ghwsv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-admission
    serviceAccountName: ingress-nginx-admission
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-ghwsv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:40Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:40Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:40Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T09:00:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://22d2835558e5e6120e79105f79eb1d12df4c026f3db1c2877646cfe974b59420
      image: sha256:b29d748098e32a42a2ac743679dd53501184ba9c4a1009248b6f60a370895135
      imageID: registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
      lastState: {}
      name: patch
      ready: false
      restartCount: 1
      started: false
      state:
        terminated:
          containerID: containerd://22d2835558e5e6120e79105f79eb1d12df4c026f3db1c2877646cfe974b59420
          exitCode: 0
          finishedAt: "2024-08-29T09:00:48Z"
          reason: Completed
          startedAt: "2024-08-29T09:00:48Z"
    hostIP: 192.168.1.227
    phase: Succeeded
    podIP: 10.100.38.179
    podIPs:
    - ip: 10.100.38.179
    qosClass: BestEffort
    startTime: "2024-08-29T09:00:40Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: b6e9dbfa9e20d6bca7b997c763fc216dd03d295dd97aa756a2bb8676c5c76766
      cni.projectcalico.org/podIP: 10.100.119.173/32
      cni.projectcalico.org/podIPs: 10.100.119.173/32
      kubectl.kubernetes.io/restartedAt: "2024-09-18T17:10:34+07:00"
    creationTimestamp: "2024-09-18T10:10:34Z"
    generateName: ingress-nginx-controller-65ff8b5689-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 65ff8b5689
    name: ingress-nginx-controller-65ff8b5689-dfnkz
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-controller-65ff8b5689
      uid: 44c51738-607a-48af-be18-4baeaae15edf
    resourceVersion: "10181175"
    uid: 84ad52f4-e9c2-4b7f-99dd-c69a5af9da18
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      - --election-id=ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=false
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /etc/ingress-controller/geoip
        name: geoip
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c6mpx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx
    serviceAccountName: ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission
    - name: geoip
      nfs:
        path: /uit/nfs
        server: 192.168.1.184
    - name: kube-api-access-c6mpx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T10:10:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T10:10:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T10:10:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T10:10:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e536f43e0907912a6b46620a29c2c53cf21e590a3b7ef69a3e066cad5484352e
      image: sha256:ffcc66479b5baa5a65f94b8b7c73c6ee5ed989ec0b7f8f9371999f335ce4f44c
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T10:10:35Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 10.100.119.173
    podIPs:
    - ip: 10.100.119.173
    qosClass: Burstable
    startTime: "2024-09-18T10:10:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 3f3a8a6312236c0bbbfe63d9a9532043b36ba54583155e42370cc1855b49a4c2
      cni.projectcalico.org/podIP: 10.100.234.174/32
      cni.projectcalico.org/podIPs: 10.100.234.174/32
    creationTimestamp: "2024-08-22T07:49:57Z"
    generateName: jenkins-bf6b8d5fb-
    labels:
      app: jenkins-server
      pod-template-hash: bf6b8d5fb
    name: jenkins-bf6b8d5fb-thn27
    namespace: jenkins
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: jenkins-bf6b8d5fb
      uid: 0b2a0bab-9bb3-467f-8b06-660874c0a204
    resourceVersion: "7088161"
    uid: ce39b2cc-f6d9-4914-881f-3fbe21ac2262
  spec:
    containers:
    - image: jenkins/jenkins:lts
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /login
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 90
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: jenkins
      ports:
      - containerPort: 8080
        name: httpport
        protocol: TCP
      - containerPort: 50000
        name: jnlpport
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /login
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 500Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/jenkins_home
        name: jenkins-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hrwqb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount: jenkins-admin
    serviceAccountName: jenkins-admin
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: jenkins-data
      persistentVolumeClaim:
        claimName: jenkins-pv-claim
    - name: kube-api-access-hrwqb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-22T07:49:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-10T04:13:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-10T04:13:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-22T07:49:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e41853dfc19d3a966712c4baee706c2372c0a2f20ef40b916c7bad925ab709b7
      image: docker.io/jenkins/jenkins:lts
      imageID: docker.io/jenkins/jenkins@sha256:2bafb1fb2d6489bccadc1b7c172937e9b56a888ed77e625a4ebe59a6b038221e
      lastState:
        terminated:
          containerID: containerd://89c72ce335a518071771a7b3fc09e4b7d47a01727b5dbbfd7d1d90e9397ecd82
          exitCode: 5
          finishedAt: "2024-09-10T04:12:54Z"
          reason: Error
          startedAt: "2024-09-09T02:02:38Z"
      name: jenkins
      ready: true
      restartCount: 10
      started: true
      state:
        running:
          startedAt: "2024-09-10T04:12:54Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.174
    podIPs:
    - ip: 10.100.234.174
    qosClass: Burstable
    startTime: "2024-08-22T07:49:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 6addbf1c2ea6817290507ae2e3880c7d299fb8c1cadf7abdac476e33be8d965f
      cni.projectcalico.org/podIP: 10.100.134.129/32
      cni.projectcalico.org/podIPs: 10.100.134.129/32
    creationTimestamp: "2024-08-20T03:51:48Z"
    generateName: calico-kube-controllers-69465c984b-
    labels:
      k8s-app: calico-kube-controllers
      pod-template-hash: 69465c984b
    name: calico-kube-controllers-69465c984b-hm9dn
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: calico-kube-controllers-69465c984b
      uid: 38924f2f-f010-48d7-a5b5-b5caf01a767e
    resourceVersion: "680"
    uid: 5163d1ef-74fa-4c6e-9063-228a4811bc3c
  spec:
    containers:
    - env:
      - name: ENABLED_CONTROLLERS
        value: node
      - name: DATASTORE_TYPE
        value: kubernetes
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/kube-controllers:v3.26.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /usr/bin/check-status
          - -l
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-kube-controllers
      readinessProbe:
        exec:
          command:
          - /usr/bin/check-status
          - -r
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5jcn8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-kube-controllers
    serviceAccountName: calico-kube-controllers
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.cloudprovider.kubernetes.io/uninitialized
      value: "true"
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-5jcn8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5840637d272b5a520080e2700b0a9e61cf48371e865f5675dc67b8cee80e65f9
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/kube-controllers:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/kube-controllers@sha256:2c5526ad8cd69740448207b90f4077fd68a5d2e922014e32141b38a529295c55
      lastState: {}
      name: calico-kube-controllers
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:52:05Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.100.134.129
    podIPs:
    - ip: 10.100.134.129
    qosClass: BestEffort
    startTime: "2024-08-20T03:51:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T03:51:48Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 67868dd99
      k8s-app: calico-node
      pod-template-generation: "1"
    name: calico-node-6nm5m
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 51f07c5e-ab2b-4e88-bfa1-11d4dc9280d5
    resourceVersion: "658"
    uid: 83555412-afd5-42ec-8c95-e2c80314866d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-control-plane-tgt6v
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      - name: CLUSTER_TYPE
        value: k8s,bgp
      - name: IP
        value: autodetect
      - name: CALICO_IPV4POOL_IPIP
        value: Always
      - name: CALICO_IPV4POOL_VXLAN
        value: Never
      - name: CALICO_IPV6POOL_VXLAN
        value: Never
      - name: FELIX_IPINIPMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_VXLANMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_WIREGUARDMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_HEALTHENABLED
        value: "true"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-live
          - -bird-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-ready
          - -bird-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /sys/fs/bpf
        name: bpffs
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85hwh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/calico-ipam
      - -upgrade
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: upgrade-ipam
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/cni/networks
        name: host-local-net-dir
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85hwh
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: calico-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: SLEEP
        value: "false"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85hwh
        readOnly: true
    - command:
      - calico-node
      - -init
      - -best-effort
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      name: mount-bpffs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs
        mountPropagation: Bidirectional
        name: sys-fs
      - mountPath: /var/run/calico
        mountPropagation: Bidirectional
        name: var-run-calico
      - mountPath: /nodeproc
        name: nodeproc
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85hwh
        readOnly: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /sys/fs/
        type: DirectoryOrCreate
      name: sys-fs
    - hostPath:
        path: /sys/fs/bpf
        type: Directory
      name: bpffs
    - hostPath:
        path: /proc
        type: ""
      name: nodeproc
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: ""
      name: cni-log-dir
    - hostPath:
        path: /var/lib/cni/networks
        type: ""
      name: host-local-net-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - name: kube-api-access-85hwh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6e8743b73f2df56c625ebc824fda9c2a81ff74e4e0b3e5da5214c8b2df489fc1
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:51:56Z"
    hostIP: 192.168.1.26
    initContainerStatuses:
    - containerID: containerd://e200a9e0d45c54a5c3afd39e81e740695b1f31d42d52c7eb616f493a1286c41d
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: upgrade-ipam
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://e200a9e0d45c54a5c3afd39e81e740695b1f31d42d52c7eb616f493a1286c41d
          exitCode: 0
          finishedAt: "2024-08-20T03:51:50Z"
          reason: Completed
          startedAt: "2024-08-20T03:51:50Z"
    - containerID: containerd://92d799c7f5fbfd3393beb9ca438131b25b461be583564caab67fe510ef6ea0b3
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://92d799c7f5fbfd3393beb9ca438131b25b461be583564caab67fe510ef6ea0b3
          exitCode: 0
          finishedAt: "2024-08-20T03:51:52Z"
          reason: Completed
          startedAt: "2024-08-20T03:51:51Z"
    - containerID: containerd://4099bebe2b0fda10d0d713e678e92bf654d99f1109edfa6e2a7600c172827419
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: mount-bpffs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://4099bebe2b0fda10d0d713e678e92bf654d99f1109edfa6e2a7600c172827419
          exitCode: 0
          finishedAt: "2024-08-20T03:51:55Z"
          reason: Completed
          startedAt: "2024-08-20T03:51:55Z"
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2024-08-20T03:51:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-27T04:28:07Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 67868dd99
      k8s-app: calico-node
      pod-template-generation: "1"
    name: calico-node-pcgth
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 51f07c5e-ab2b-4e88-bfa1-11d4dc9280d5
    resourceVersion: "1926621"
    uid: 4c4aaf10-cd38-4232-a9d5-a81d7993e73e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      - name: CLUSTER_TYPE
        value: k8s,bgp
      - name: IP
        value: autodetect
      - name: CALICO_IPV4POOL_IPIP
        value: Always
      - name: CALICO_IPV4POOL_VXLAN
        value: Never
      - name: CALICO_IPV6POOL_VXLAN
        value: Never
      - name: FELIX_IPINIPMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_VXLANMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_WIREGUARDMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_HEALTHENABLED
        value: "true"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-live
          - -bird-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-ready
          - -bird-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /sys/fs/bpf
        name: bpffs
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-562hn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/calico-ipam
      - -upgrade
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: upgrade-ipam
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/cni/networks
        name: host-local-net-dir
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-562hn
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: calico-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: SLEEP
        value: "false"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-562hn
        readOnly: true
    - command:
      - calico-node
      - -init
      - -best-effort
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      name: mount-bpffs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs
        mountPropagation: Bidirectional
        name: sys-fs
      - mountPath: /var/run/calico
        mountPropagation: Bidirectional
        name: var-run-calico
      - mountPath: /nodeproc
        name: nodeproc
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-562hn
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /sys/fs/
        type: DirectoryOrCreate
      name: sys-fs
    - hostPath:
        path: /sys/fs/bpf
        type: Directory
      name: bpffs
    - hostPath:
        path: /proc
        type: ""
      name: nodeproc
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: ""
      name: cni-log-dir
    - hostPath:
        path: /var/lib/cni/networks
        type: ""
      name: host-local-net-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - name: kube-api-access-562hn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3d635f8de7c6bbdde45d0fcbca685f241d4475548637342936bba5ace9c8b639
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-27T04:28:17Z"
    hostIP: 192.168.1.227
    initContainerStatuses:
    - containerID: containerd://2f41d4ec52fe4fb82658d710b43ff9b2fabad409af3379c2ec00e8d5e541a03a
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: upgrade-ipam
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://2f41d4ec52fe4fb82658d710b43ff9b2fabad409af3379c2ec00e8d5e541a03a
          exitCode: 0
          finishedAt: "2024-08-27T04:28:11Z"
          reason: Completed
          startedAt: "2024-08-27T04:28:11Z"
    - containerID: containerd://a6aaf466b32ea7cc40d9c43c550e941f2d58da1c741c2d3082568e8a66332170
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://a6aaf466b32ea7cc40d9c43c550e941f2d58da1c741c2d3082568e8a66332170
          exitCode: 0
          finishedAt: "2024-08-27T04:28:12Z"
          reason: Completed
          startedAt: "2024-08-27T04:28:11Z"
    - containerID: containerd://3e52b84e55f696a4f9257e9b8832535f6be59325343a3930938b9c0f33167eb3
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: mount-bpffs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://3e52b84e55f696a4f9257e9b8832535f6be59325343a3930938b9c0f33167eb3
          exitCode: 0
          finishedAt: "2024-08-27T04:28:16Z"
          reason: Completed
          startedAt: "2024-08-27T04:28:16Z"
    phase: Running
    podIP: 192.168.1.227
    podIPs:
    - ip: 192.168.1.227
    qosClass: Burstable
    startTime: "2024-08-27T04:28:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T04:01:32Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 67868dd99
      k8s-app: calico-node
      pod-template-generation: "1"
    name: calico-node-sjnwv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 51f07c5e-ab2b-4e88-bfa1-11d4dc9280d5
    resourceVersion: "1980"
    uid: 4749317b-7b00-4134-8aa5-accc2f412260
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      - name: CLUSTER_TYPE
        value: k8s,bgp
      - name: IP
        value: autodetect
      - name: CALICO_IPV4POOL_IPIP
        value: Always
      - name: CALICO_IPV4POOL_VXLAN
        value: Never
      - name: CALICO_IPV6POOL_VXLAN
        value: Never
      - name: FELIX_IPINIPMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_VXLANMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_WIREGUARDMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_HEALTHENABLED
        value: "true"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-live
          - -bird-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-ready
          - -bird-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /sys/fs/bpf
        name: bpffs
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85d66
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/calico-ipam
      - -upgrade
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: upgrade-ipam
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/cni/networks
        name: host-local-net-dir
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85d66
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: calico-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: SLEEP
        value: "false"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85d66
        readOnly: true
    - command:
      - calico-node
      - -init
      - -best-effort
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      name: mount-bpffs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs
        mountPropagation: Bidirectional
        name: sys-fs
      - mountPath: /var/run/calico
        mountPropagation: Bidirectional
        name: var-run-calico
      - mountPath: /nodeproc
        name: nodeproc
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85d66
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /sys/fs/
        type: DirectoryOrCreate
      name: sys-fs
    - hostPath:
        path: /sys/fs/bpf
        type: Directory
      name: bpffs
    - hostPath:
        path: /proc
        type: ""
      name: nodeproc
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: ""
      name: cni-log-dir
    - hostPath:
        path: /var/lib/cni/networks
        type: ""
      name: host-local-net-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - name: kube-api-access-85d66
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5ae446157986240fb875d0da62da38229dd4934807ef62fbd9eaaed38ecda6e8
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:42Z"
    hostIP: 192.168.1.93
    initContainerStatuses:
    - containerID: containerd://844b04626425c1312d8a07a23b45d9da6eb15cfd177e3634b9b84a258fcad774
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: upgrade-ipam
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://844b04626425c1312d8a07a23b45d9da6eb15cfd177e3634b9b84a258fcad774
          exitCode: 0
          finishedAt: "2024-08-20T04:01:35Z"
          reason: Completed
          startedAt: "2024-08-20T04:01:35Z"
    - containerID: containerd://c36e8c6bb24e4a2bfd20f8c97da9515a48d634c8e128b75946501861d31f1056
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://c36e8c6bb24e4a2bfd20f8c97da9515a48d634c8e128b75946501861d31f1056
          exitCode: 0
          finishedAt: "2024-08-20T04:01:37Z"
          reason: Completed
          startedAt: "2024-08-20T04:01:36Z"
    - containerID: containerd://67c4a7ecc4be998263e4e4815a904be06bf969957a058c39612e42d25987d3f5
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: mount-bpffs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://67c4a7ecc4be998263e4e4815a904be06bf969957a058c39612e42d25987d3f5
          exitCode: 0
          finishedAt: "2024-08-20T04:01:41Z"
          reason: Completed
          startedAt: "2024-08-20T04:01:41Z"
    phase: Running
    podIP: 192.168.1.93
    podIPs:
    - ip: 192.168.1.93
    qosClass: Burstable
    startTime: "2024-08-20T04:01:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-17T02:57:54Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 67868dd99
      k8s-app: calico-node
      pod-template-generation: "1"
    name: calico-node-tg9s4
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 51f07c5e-ab2b-4e88-bfa1-11d4dc9280d5
    resourceVersion: "9689990"
    uid: e2b6ed14-6b41-4415-b730-b2f05f7eb698
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      - name: CLUSTER_TYPE
        value: k8s,bgp
      - name: IP
        value: autodetect
      - name: CALICO_IPV4POOL_IPIP
        value: Always
      - name: CALICO_IPV4POOL_VXLAN
        value: Never
      - name: CALICO_IPV6POOL_VXLAN
        value: Never
      - name: FELIX_IPINIPMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_VXLANMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_WIREGUARDMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_HEALTHENABLED
        value: "true"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-live
          - -bird-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-ready
          - -bird-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /sys/fs/bpf
        name: bpffs
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7jgtp
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/calico-ipam
      - -upgrade
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: upgrade-ipam
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/cni/networks
        name: host-local-net-dir
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7jgtp
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: calico-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: SLEEP
        value: "false"
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7jgtp
        readOnly: true
    - command:
      - calico-node
      - -init
      - -best-effort
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imagePullPolicy: IfNotPresent
      name: mount-bpffs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /sys/fs
        mountPropagation: Bidirectional
        name: sys-fs
      - mountPath: /var/run/calico
        mountPropagation: Bidirectional
        name: var-run-calico
      - mountPath: /nodeproc
        name: nodeproc
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7jgtp
        readOnly: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /sys/fs/
        type: DirectoryOrCreate
      name: sys-fs
    - hostPath:
        path: /sys/fs/bpf
        type: Directory
      name: bpffs
    - hostPath:
        path: /proc
        type: ""
      name: nodeproc
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/calico/cni
        type: ""
      name: cni-log-dir
    - hostPath:
        path: /var/lib/cni/networks
        type: ""
      name: host-local-net-dir
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - name: kube-api-access-7jgtp
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:58:04Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:58:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:58:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d0272921462056bf7a550e95a903063b0b885f985fd547e09451969f82d4a15e
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:58:04Z"
    hostIP: 192.168.1.216
    initContainerStatuses:
    - containerID: containerd://b056159b5890131546ad1e5641331557f5c98ac7474c1aee66b7eba2657b1eb5
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: upgrade-ipam
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b056159b5890131546ad1e5641331557f5c98ac7474c1aee66b7eba2657b1eb5
          exitCode: 0
          finishedAt: "2024-09-17T02:57:58Z"
          reason: Completed
          startedAt: "2024-09-17T02:57:58Z"
    - containerID: containerd://38abe578962a6508ab5ca97d78b3c1fea1a77b3eac3c802a3d4cefb2878a1ecc
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni@sha256:86779fab56f3c0c51abcae6d5c5d712f54ed86b50eebf83e54b8c80fdcb4a76e
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://38abe578962a6508ab5ca97d78b3c1fea1a77b3eac3c802a3d4cefb2878a1ecc
          exitCode: 0
          finishedAt: "2024-09-17T02:58:00Z"
          reason: Completed
          startedAt: "2024-09-17T02:57:59Z"
    - containerID: containerd://4a8c1523cf15d4b9c7dc18e6c2ec2de9ea72e8f4353d9373027ae4ecd68e4004
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node@sha256:9459d1b2831955120fdf0037e6816b21e5d88dd11110d6d89398e5ef53cdf54c
      lastState: {}
      name: mount-bpffs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://4a8c1523cf15d4b9c7dc18e6c2ec2de9ea72e8f4353d9373027ae4ecd68e4004
          exitCode: 0
          finishedAt: "2024-09-17T02:58:04Z"
          reason: Completed
          startedAt: "2024-09-17T02:58:03Z"
    phase: Running
    podIP: 192.168.1.216
    podIPs:
    - ip: 192.168.1.216
    qosClass: Burstable
    startTime: "2024-09-17T02:57:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7e4f497bd2d770bb46c6eede0f79fbc93c7156c939e836056032e7c75011b84d
      cni.projectcalico.org/podIP: 10.100.134.130/32
      cni.projectcalico.org/podIPs: 10.100.134.130/32
    creationTimestamp: "2024-08-20T03:51:45Z"
    generateName: coredns-5dd5756b68-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 5dd5756b68
    name: coredns-5dd5756b68-nlgrp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-5dd5756b68
      uid: 35da1839-ea38-4c02-a3b8-f78aee25cba5
    resourceVersion: "696"
    uid: 463cd449-0c1c-4c80-bc6c-6688fe3efaa5
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: registry.k8s.io/coredns/coredns:v1.10.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-frm2m
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-frm2m
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2987bf4f1d3a21bc69193573ab31a16254968560ba54d88612befc97be6151d4
      image: registry.k8s.io/coredns/coredns:v1.10.1
      imageID: registry.k8s.io/coredns/coredns@sha256:a0ead06651cf580044aeb0a0feba63591858fb2e43ade8c9dea45a6a89ae7e5e
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:52:06Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.100.134.130
    podIPs:
    - ip: 10.100.134.130
    qosClass: Burstable
    startTime: "2024-08-20T03:51:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 8cd2603d6467ad4c6f352f8cc1ce4ed8057f78448f38309a8fea0d435e5128ec
      cni.projectcalico.org/podIP: 10.100.134.131/32
      cni.projectcalico.org/podIPs: 10.100.134.131/32
    creationTimestamp: "2024-08-20T03:51:45Z"
    generateName: coredns-5dd5756b68-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 5dd5756b68
    name: coredns-5dd5756b68-wmsnf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-5dd5756b68
      uid: 35da1839-ea38-4c02-a3b8-f78aee25cba5
    resourceVersion: "713"
    uid: 8d6a2eb0-b417-49e4-8ad8-655a11e5cc24
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: registry.k8s.io/coredns/coredns:v1.10.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dknxx
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-dknxx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:52:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://95e914ed98c67488942ac7c46618d9c473925e261f48f96e52b9ee289c65f95d
      image: registry.k8s.io/coredns/coredns:v1.10.1
      imageID: registry.k8s.io/coredns/coredns@sha256:a0ead06651cf580044aeb0a0feba63591858fb2e43ade8c9dea45a6a89ae7e5e
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:52:08Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.100.134.131
    podIPs:
    - ip: 10.100.134.131
    qosClass: Burstable
    startTime: "2024-08-20T03:51:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 24821763756ba49d6b6ffe1ad47b164ccc2a85839b529b18812e62be2f96bcb9
      cni.projectcalico.org/podIP: 10.100.234.130/32
      cni.projectcalico.org/podIPs: 10.100.234.130/32
    creationTimestamp: "2024-08-20T03:51:48Z"
    generateName: csi-cinder-controllerplugin-ffc6c59d6-
    labels:
      app: csi-cinder-controllerplugin
      pod-template-hash: ffc6c59d6
    name: csi-cinder-controllerplugin-ffc6c59d6-pcznv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: csi-cinder-controllerplugin-ffc6c59d6
      uid: 0a2041ff-bf0e-4079-9ff5-193321f3c9f3
    resourceVersion: "2034"
    uid: df058da6-b9d0-4d6a-a1be-3e14005e7aca
  spec:
    containers:
    - args:
      - --csi-address=$(ADDRESS)
      - --timeout=3m
      - --leader-election=true
      - --default-fstype=ext4
      env:
      - name: ADDRESS
        value: /var/lib/csi/sockets/pluginproxy/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-attacher:v4.2.0
      imagePullPolicy: IfNotPresent
      name: csi-attacher
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/csi/sockets/pluginproxy/
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxwfq
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --timeout=3m
      - --default-fstype=ext4
      - --feature-gates=Topology=true
      - --extra-create-metadata
      - --leader-election=true
      env:
      - name: ADDRESS
        value: /var/lib/csi/sockets/pluginproxy/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-provisioner:v3.4.1
      imagePullPolicy: IfNotPresent
      name: csi-provisioner
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/csi/sockets/pluginproxy/
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxwfq
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --timeout=3m
      - --extra-create-metadata
      - --leader-election=true
      env:
      - name: ADDRESS
        value: /var/lib/csi/sockets/pluginproxy/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-snapshotter:v6.2.1
      imagePullPolicy: Always
      name: csi-snapshotter
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/csi/sockets/pluginproxy/
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxwfq
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --timeout=3m
      - --handle-volume-inuse-error=false
      - --leader-election=true
      env:
      - name: ADDRESS
        value: /var/lib/csi/sockets/pluginproxy/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-resizer:v1.8.0
      imagePullPolicy: IfNotPresent
      name: csi-resizer
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/csi/sockets/pluginproxy/
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxwfq
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      env:
      - name: ADDRESS
        value: /var/lib/csi/sockets/pluginproxy/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/csi/sockets/pluginproxy/
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxwfq
        readOnly: true
    - args:
      - /bin/cinder-csi-plugin
      - --endpoint=$(CSI_ENDPOINT)
      - --cloud-config=$(CLOUD_CONFIG)
      - --cluster=$(CLUSTER_NAME)
      - --v=1
      env:
      - name: CSI_ENDPOINT
        value: unix://csi/csi.sock
      - name: CLOUD_CONFIG
        value: /etc/config/cloud.conf
      - name: CLUSTER_NAME
        value: kubernetes
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 10
      name: cinder-csi-plugin
      ports:
      - containerPort: 9808
        name: healthz
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /etc/config
        name: secret-cinderplugin
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxwfq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-cinder-controller-sa
    serviceAccountName: csi-cinder-controller-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: socket-dir
    - name: secret-cinderplugin
      secret:
        defaultMode: 420
        secretName: cloud-config
    - name: kube-api-access-jxwfq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://93f000a072de5566a3eb5627265e59fc1971891891893663111489bb6f841095
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin@sha256:ec9f493789aea488639791dfea9e1c8684bc64ad1bf2f4e11d403cb5808c0a31
      lastState: {}
      name: cinder-csi-plugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:58Z"
    - containerID: containerd://97149278be3fcd2a82cb1f81df569489b20683f6201aa7e13f9d14ef7c8eac8e
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-attacher:v4.2.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-attacher@sha256:f5fb8b820169ac6d53a8513c5537f60da6a154e908ffaa5f5aab3e5b3586f4a1
      lastState: {}
      name: csi-attacher
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:54Z"
    - containerID: containerd://5eb19b6162ed1f753ff887617096a4f23fa5b06f7b0df9fef14c2f4705ed6571
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-provisioner:v3.4.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-provisioner@sha256:c73c0a5376a8efe99f287e8f6f40bc653c187b920f96f17400cb85021d1f19db
      lastState: {}
      name: csi-provisioner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:55Z"
    - containerID: containerd://ad196231433f0803ee13a0ce70a5804f56bd91294fbed3906831c002f4d7b1ce
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-resizer:v1.8.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-resizer@sha256:819f68a4daf75acec336302843f303cf360d4941249f9f5019ffbb690c8ac7c0
      lastState: {}
      name: csi-resizer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:57Z"
    - containerID: containerd://01f3c8e52e89ef7f4863549b5ba6414e1157516e97fec6ff4b89308c2704e59e
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-snapshotter:v6.2.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-snapshotter@sha256:b31c170599fb5a7e6d851cfb13d0e067d0ab7689110d1609c8f02b41e86ea106
      lastState: {}
      name: csi-snapshotter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:56Z"
    - containerID: containerd://8960b99738e84ba9dd33db09c211088510a3c80fed3c4b69b8cc565894f3d63a
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe@sha256:0522eff1d8e9269655080500c1f6388fe2573978e8a74e08beaf3452cd575c2e
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:57Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.130
    podIPs:
    - ip: 10.100.234.130
    qosClass: BestEffort
    startTime: "2024-08-20T04:01:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T03:51:48Z"
    generateName: csi-cinder-nodeplugin-
    labels:
      app: csi-cinder-nodeplugin
      controller-revision-hash: 6d7d67b6dc
      pod-template-generation: "1"
    name: csi-cinder-nodeplugin-4cshr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-cinder-nodeplugin
      uid: cdb79ab1-1de4-447f-a837-d5addf3a450c
    resourceVersion: "610"
    uid: 392f9912-210e-4210-968d-426ed2e56d2a
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-control-plane-tgt6v
    containers:
    - args:
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c6767
        readOnly: true
    - args:
      - --csi-address=/csi/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c6767
        readOnly: true
    - args:
      - /bin/cinder-csi-plugin
      - --endpoint=$(CSI_ENDPOINT)
      - --cloud-config=$(CLOUD_CONFIG)
      - --v=1
      env:
      - name: CSI_ENDPOINT
        value: unix://csi/csi.sock
      - name: CLOUD_CONFIG
        value: /etc/config/cloud.conf
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cinder-csi-plugin
      ports:
      - containerPort: 9808
        hostPort: 9808
        name: healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: kubelet-dir
      - mountPath: /dev
        mountPropagation: HostToContainer
        name: pods-probe-dir
      - mountPath: /etc/config
        name: secret-cinderplugin
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c6767
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-cinder-node-sa
    serviceAccountName: csi-cinder-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/cinder.csi.openstack.org
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: Directory
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: kubelet-dir
    - hostPath:
        path: /dev
        type: Directory
      name: pods-probe-dir
    - name: secret-cinderplugin
      secret:
        defaultMode: 420
        secretName: cloud-config
    - name: kube-api-access-c6767
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a9479eb4e66e575cf7a5815ce3fd0a3d351aef6818aa239341568e1d6cd6a8ae
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin@sha256:ec9f493789aea488639791dfea9e1c8684bc64ad1bf2f4e11d403cb5808c0a31
      lastState: {}
      name: cinder-csi-plugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:51:53Z"
    - containerID: containerd://61351ec03f2bfd338759fab98c2a4cef156895fdd9d2acbfbc4ca9ee43a38b13
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe@sha256:0522eff1d8e9269655080500c1f6388fe2573978e8a74e08beaf3452cd575c2e
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:51:52Z"
    - containerID: containerd://bd3e18c2d5dc44a3f79232f979e5a9b87a4e07730ff96b0d56129ae97c8aa11d
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar@sha256:68ee8f0b10acb4189e506d8a0e40c995362d886a35d5cbb17624e59913af0145
      lastState: {}
      name: node-driver-registrar
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:51:51Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: BestEffort
    startTime: "2024-08-20T03:51:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-17T02:57:54Z"
    generateName: csi-cinder-nodeplugin-
    labels:
      app: csi-cinder-nodeplugin
      controller-revision-hash: 6d7d67b6dc
      pod-template-generation: "1"
    name: csi-cinder-nodeplugin-5dbxk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-cinder-nodeplugin
      uid: cdb79ab1-1de4-447f-a837-d5addf3a450c
    resourceVersion: "9689950"
    uid: 77e547fc-e93f-4289-a1bf-aed3aa8d4cd6
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    containers:
    - args:
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nwfrf
        readOnly: true
    - args:
      - --csi-address=/csi/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nwfrf
        readOnly: true
    - args:
      - /bin/cinder-csi-plugin
      - --endpoint=$(CSI_ENDPOINT)
      - --cloud-config=$(CLOUD_CONFIG)
      - --v=1
      env:
      - name: CSI_ENDPOINT
        value: unix://csi/csi.sock
      - name: CLOUD_CONFIG
        value: /etc/config/cloud.conf
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cinder-csi-plugin
      ports:
      - containerPort: 9808
        hostPort: 9808
        name: healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: kubelet-dir
      - mountPath: /dev
        mountPropagation: HostToContainer
        name: pods-probe-dir
      - mountPath: /etc/config
        name: secret-cinderplugin
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nwfrf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-cinder-node-sa
    serviceAccountName: csi-cinder-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/cinder.csi.openstack.org
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: Directory
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: kubelet-dir
    - hostPath:
        path: /dev
        type: Directory
      name: pods-probe-dir
    - name: secret-cinderplugin
      secret:
        defaultMode: 420
        secretName: cloud-config
    - name: kube-api-access-nwfrf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:58:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:58:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a4e7ed78b0f2da292e68e3a9409d8eeca85a215e7f10d9f12ece956521279c76
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin@sha256:ec9f493789aea488639791dfea9e1c8684bc64ad1bf2f4e11d403cb5808c0a31
      lastState: {}
      name: cinder-csi-plugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:58:05Z"
    - containerID: containerd://99a7998212560ba93a36216bb547fee9abcc12a29bdac923b5eb6e2e5c1c1f98
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe@sha256:0522eff1d8e9269655080500c1f6388fe2573978e8a74e08beaf3452cd575c2e
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:58:00Z"
    - containerID: containerd://ca3937793c3c13cb643b8694a9677159fbcbc3dfbb28690a595d41ac11238170
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar@sha256:68ee8f0b10acb4189e506d8a0e40c995362d886a35d5cbb17624e59913af0145
      lastState: {}
      name: node-driver-registrar
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:57:59Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 192.168.1.216
    podIPs:
    - ip: 192.168.1.216
    qosClass: BestEffort
    startTime: "2024-09-17T02:57:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-27T04:28:07Z"
    generateName: csi-cinder-nodeplugin-
    labels:
      app: csi-cinder-nodeplugin
      controller-revision-hash: 6d7d67b6dc
      pod-template-generation: "1"
    name: csi-cinder-nodeplugin-stkqv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-cinder-nodeplugin
      uid: cdb79ab1-1de4-447f-a837-d5addf3a450c
    resourceVersion: "1926576"
    uid: 41425074-e493-46f9-b370-0f1c58169796
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    containers:
    - args:
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7lb94
        readOnly: true
    - args:
      - --csi-address=/csi/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7lb94
        readOnly: true
    - args:
      - /bin/cinder-csi-plugin
      - --endpoint=$(CSI_ENDPOINT)
      - --cloud-config=$(CLOUD_CONFIG)
      - --v=1
      env:
      - name: CSI_ENDPOINT
        value: unix://csi/csi.sock
      - name: CLOUD_CONFIG
        value: /etc/config/cloud.conf
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cinder-csi-plugin
      ports:
      - containerPort: 9808
        hostPort: 9808
        name: healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: kubelet-dir
      - mountPath: /dev
        mountPropagation: HostToContainer
        name: pods-probe-dir
      - mountPath: /etc/config
        name: secret-cinderplugin
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7lb94
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-cinder-node-sa
    serviceAccountName: csi-cinder-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/cinder.csi.openstack.org
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: Directory
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: kubelet-dir
    - hostPath:
        path: /dev
        type: Directory
      name: pods-probe-dir
    - name: secret-cinderplugin
      secret:
        defaultMode: 420
        secretName: cloud-config
    - name: kube-api-access-7lb94
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:18Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:18Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f5d6a638593ab4606ec65b4c0645113de6cf026a4e4dad565358c145eecdd6d6
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin@sha256:ec9f493789aea488639791dfea9e1c8684bc64ad1bf2f4e11d403cb5808c0a31
      lastState: {}
      name: cinder-csi-plugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-27T04:28:18Z"
    - containerID: containerd://ddc61b41a8a2e7a8227c01e5b1cc6e75df04a4563d2c87161b3ba41c08b611e2
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe@sha256:0522eff1d8e9269655080500c1f6388fe2573978e8a74e08beaf3452cd575c2e
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-27T04:28:13Z"
    - containerID: containerd://8203528bff7e79d090d01545ba493fbe2c47f72c9ac533ef1f064de7a79f0e98
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar@sha256:68ee8f0b10acb4189e506d8a0e40c995362d886a35d5cbb17624e59913af0145
      lastState: {}
      name: node-driver-registrar
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-27T04:28:12Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 192.168.1.227
    podIPs:
    - ip: 192.168.1.227
    qosClass: BestEffort
    startTime: "2024-08-27T04:28:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T04:01:32Z"
    generateName: csi-cinder-nodeplugin-
    labels:
      app: csi-cinder-nodeplugin
      controller-revision-hash: 6d7d67b6dc
      pod-template-generation: "1"
    name: csi-cinder-nodeplugin-tm57t
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-cinder-nodeplugin
      uid: cdb79ab1-1de4-447f-a837-d5addf3a450c
    resourceVersion: "1876"
    uid: ec179762-a957-4135-a26b-1f212f9611ef
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    containers:
    - args:
      - --csi-address=$(ADDRESS)
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8cw2
        readOnly: true
    - args:
      - --csi-address=/csi/csi.sock
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8cw2
        readOnly: true
    - args:
      - /bin/cinder-csi-plugin
      - --endpoint=$(CSI_ENDPOINT)
      - --cloud-config=$(CLOUD_CONFIG)
      - --v=1
      env:
      - name: CSI_ENDPOINT
        value: unix://csi/csi.sock
      - name: CLOUD_CONFIG
        value: /etc/config/cloud.conf
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cinder-csi-plugin
      ports:
      - containerPort: 9808
        hostPort: 9808
        name: healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet
        mountPropagation: Bidirectional
        name: kubelet-dir
      - mountPath: /dev
        mountPropagation: HostToContainer
        name: pods-probe-dir
      - mountPath: /etc/config
        name: secret-cinderplugin
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8cw2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: csi-cinder-node-sa
    serviceAccountName: csi-cinder-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/cinder.csi.openstack.org
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: Directory
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet
        type: Directory
      name: kubelet-dir
    - hostPath:
        path: /dev
        type: Directory
      name: pods-probe-dir
    - name: secret-cinderplugin
      secret:
        defaultMode: 420
        secretName: cloud-config
    - name: kube-api-access-l8cw2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c2858d715c9b99d7f9baee4513011731aaf0630fb8e8ad4d5a58e105ab4110e5
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin@sha256:ec9f493789aea488639791dfea9e1c8684bc64ad1bf2f4e11d403cb5808c0a31
      lastState: {}
      name: cinder-csi-plugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:38Z"
    - containerID: containerd://3bc7eea8351cc8341d188bf45b217e4fbbc239fc64ef3fa04bb0c326f203a370
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe@sha256:0522eff1d8e9269655080500c1f6388fe2573978e8a74e08beaf3452cd575c2e
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:36Z"
    - containerID: containerd://3a0f09374aeaac880683d6c679cb4a54e7936aa77c7e348e3be05c0f33af0d42
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar@sha256:68ee8f0b10acb4189e506d8a0e40c995362d886a35d5cbb17624e59913af0145
      lastState: {}
      name: node-driver-registrar
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:36Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 192.168.1.93
    podIPs:
    - ip: 192.168.1.93
    qosClass: BestEffort
    startTime: "2024-08-20T04:01:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.1.26:2379
      kubernetes.io/config.hash: 0e79c7640f97710ecaefdce16e6eadf2
      kubernetes.io/config.mirror: 0e79c7640f97710ecaefdce16e6eadf2
      kubernetes.io/config.seen: "2024-08-20T03:51:45.297170755Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-20T03:51:45Z"
    labels:
      component: etcd
      tier: control-plane
    name: etcd-kubernetes-52b3-control-plane-tgt6v
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: kubernetes-52b3-control-plane-tgt6v
      uid: a62497f3-2719-4327-92b1-8e7357e70f94
    resourceVersion: "595"
    uid: 0fd38737-9128-4eef-a2b9-077b09e7063d
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://192.168.1.26:2379
      - --cert-file=/etc/kubernetes/pki/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/etcd
      - --experimental-initial-corrupt-check=true
      - --experimental-watch-progress-notify-interval=5s
      - --initial-advertise-peer-urls=https://192.168.1.26:2380
      - --initial-cluster=kubernetes-52b3-control-plane-tgt6v=https://192.168.1.26:2380
      - --key-file=/etc/kubernetes/pki/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://192.168.1.26:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://192.168.1.26:2380
      - --name=kubernetes-52b3-control-plane-tgt6v
      - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key
      - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      image: registry.k8s.io/etcd:3.5.12-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health?exclude=NOSPACE&serializable=true
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /health?serializable=false
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd
        name: etcd-data
      - mountPath: /etc/kubernetes/pki/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/pki/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c9330ede82dfdc060bfffd06e4691a8d56437dae32d61f919a39248ab64a310c
      image: registry.k8s.io/etcd:3.5.12-0
      imageID: registry.k8s.io/etcd@sha256:44a8e24dcbba3470ee1fee21d5e88d128c936e9b55d4bc51fbef8086f8ed123b
      lastState: {}
      name: etcd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:50:57Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2024-08-20T03:51:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.1.26:6443
      kubernetes.io/config.hash: c44b2304d8e0ee09410b6b706a5b421b
      kubernetes.io/config.mirror: c44b2304d8e0ee09410b6b706a5b421b
      kubernetes.io/config.seen: "2024-08-20T03:51:45.297174516Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-20T03:51:45Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    name: kube-apiserver-kubernetes-52b3-control-plane-tgt6v
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: kubernetes-52b3-control-plane-tgt6v
      uid: a62497f3-2719-4327-92b1-8e7357e70f94
    resourceVersion: "597"
    uid: 763874f1-75a7-4a99-8c6a-3b549e4a3ee9
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=192.168.1.26
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --cloud-provider=external
      - --enable-admission-plugins=NodeRestriction
      - --enable-aggregator-routing=true
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
      - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
      - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
      - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
      - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-issuer=https://kubernetes.default.svc.calico
      - --service-account-key-file=/etc/kubernetes/pki/sa.pub
      - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.254.0.0/16
      - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
      - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      image: registry.k8s.io/kube-apiserver:v1.28.9
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 192.168.1.26
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 192.168.1.26
          path: /readyz
          port: 6443
          scheme: HTTPS
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 192.168.1.26
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ffb2528f6fcac44f5629e16039b6e3655085d73f662210888c4b5604bfc6e60e
      image: registry.k8s.io/kube-apiserver:v1.28.9
      imageID: registry.k8s.io/kube-apiserver@sha256:7d11c62b24cf5d3eb1ffd6ac315e6328fa1ae2396d4572d4674043e9a7dd4ec2
      lastState: {}
      name: kube-apiserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:50:57Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2024-08-20T03:51:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 0d2262325c3d822b50bcf8fe3deac3c8
      kubernetes.io/config.mirror: 0d2262325c3d822b50bcf8fe3deac3c8
      kubernetes.io/config.seen: "2024-08-20T03:51:45.297175399Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-20T03:51:45Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    name: kube-controller-manager-kubernetes-52b3-control-plane-tgt6v
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: kubernetes-52b3-control-plane-tgt6v
      uid: a62497f3-2719-4327-92b1-8e7357e70f94
    resourceVersion: "486"
    uid: 345146dc-98a4-405b-8f32-dceec15e2b0e
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --cloud-provider=external
      - --cluster-cidr=10.100.0.0/16
      - --cluster-name=kubernetes-52b3
      - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
      - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=true
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --root-ca-file=/etc/kubernetes/pki/ca.crt
      - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.254.0.0/16
      - --use-service-account-credentials=true
      image: registry.k8s.io/kube-controller-manager:v1.28.9
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://58bbcccfd115d853095103388eb978dc8772332e35e4541c350b3f091d5b577f
      image: registry.k8s.io/kube-controller-manager:v1.28.9
      imageID: registry.k8s.io/kube-controller-manager@sha256:ff6da1614b212c4cb027db6640c2f002a0723b3857be9a69e3ec6ad4ea8a5e1c
      lastState: {}
      name: kube-controller-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:50:57Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2024-08-20T03:51:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-17T02:57:54Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: fd79f757
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-7j2j2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c9dcb587-b48f-4409-90db-2ae8fc4c4e1b
    resourceVersion: "9689854"
    uid: 110b471b-7e08-45ab-b355-a9676e96da75
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.28.9
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6ddqp
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-6ddqp
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:57:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://90b19ce6bca31d1ae21d2befc2ebe695fa43ba9fbf20bf31c1d1f4d57b8c946c
      image: registry.k8s.io/kube-proxy:v1.28.9
      imageID: registry.k8s.io/kube-proxy@sha256:e587ba2b5e150f43ead0d678a47dc27afdfdb698e5371f37ef076040f7307956
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-17T02:57:55Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 192.168.1.216
    podIPs:
    - ip: 192.168.1.216
    qosClass: BestEffort
    startTime: "2024-09-17T02:57:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T04:01:32Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: fd79f757
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-85lk9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c9dcb587-b48f-4409-90db-2ae8fc4c4e1b
    resourceVersion: "1819"
    uid: 51b0860e-442f-44a0-9e71-fa5eb7575792
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.28.9
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wts4f
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-wts4f
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2bcaed389fe4d402b23a301660e4a70a8b6bedcaea5ba494d8b072ec185ce537
      image: registry.k8s.io/kube-proxy:v1.28.9
      imageID: registry.k8s.io/kube-proxy@sha256:e587ba2b5e150f43ead0d678a47dc27afdfdb698e5371f37ef076040f7307956
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:32Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 192.168.1.93
    podIPs:
    - ip: 192.168.1.93
    qosClass: BestEffort
    startTime: "2024-08-20T04:01:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T03:51:45Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: fd79f757
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-gkp45
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c9dcb587-b48f-4409-90db-2ae8fc4c4e1b
    resourceVersion: "381"
    uid: e1c10ad6-8899-4785-a23f-4e60e5ae9271
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-control-plane-tgt6v
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.28.9
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8kz7g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-8kz7g
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6191c601b4f7e4195b937959bf4c1d3ae7c5a45307126339f46c0715e2eeb2be
      image: registry.k8s.io/kube-proxy:v1.28.9
      imageID: registry.k8s.io/kube-proxy@sha256:e587ba2b5e150f43ead0d678a47dc27afdfdb698e5371f37ef076040f7307956
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:51:46Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: BestEffort
    startTime: "2024-08-20T03:51:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-27T04:28:07Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: fd79f757
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-gt9k4
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c9dcb587-b48f-4409-90db-2ae8fc4c4e1b
    resourceVersion: "1926480"
    uid: 6b4767f1-739d-48bb-91bd-087e4d15280b
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.28.9
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ph7s8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-ph7s8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-27T04:28:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://16edf2c33241cf28f207c17a7770a382c3c6f97bb7db5f38e2e6b45ebaa10cde
      image: registry.k8s.io/kube-proxy:v1.28.9
      imageID: registry.k8s.io/kube-proxy@sha256:e587ba2b5e150f43ead0d678a47dc27afdfdb698e5371f37ef076040f7307956
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-27T04:28:08Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 192.168.1.227
    podIPs:
    - ip: 192.168.1.227
    qosClass: BestEffort
    startTime: "2024-08-27T04:28:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 36ca59b20eb69255eb6b100ac212aca3
      kubernetes.io/config.mirror: 36ca59b20eb69255eb6b100ac212aca3
      kubernetes.io/config.seen: "2024-08-20T03:51:45.297176502Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-20T03:51:45Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    name: kube-scheduler-kubernetes-52b3-control-plane-tgt6v
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: kubernetes-52b3-control-plane-tgt6v
      uid: a62497f3-2719-4327-92b1-8e7357e70f94
    resourceVersion: "487"
    uid: a6eac9aa-73a4-4fdb-a5c1-a81d7c54badb
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      image: registry.k8s.io/kube-scheduler:v1.28.9
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:45Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7367b5a0a6a05a97d0b602a30b557c1861f645b283e7545b07af7ec0fbf828ef
      image: registry.k8s.io/kube-scheduler:v1.28.9
      imageID: registry.k8s.io/kube-scheduler@sha256:c2d2f9723c4254010b18cf3870b7f16d71719d59a9c14f95cc5fa2e524d85869
      lastState: {}
      name: kube-scheduler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:50:57Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2024-08-20T03:51:45Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 98d6d0f2e445750c49aa6f21560d8ec6daa6c308f4f3b587de2b30613b745c81
      cni.projectcalico.org/podIP: 10.100.234.129/32
      cni.projectcalico.org/podIPs: 10.100.234.129/32
    creationTimestamp: "2024-08-20T03:51:48Z"
    generateName: metrics-server-75fc49fd67-
    labels:
      k8s-app: metrics-server
      pod-template-hash: 75fc49fd67
    name: metrics-server-75fc49fd67-7xbk4
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-75fc49fd67
      uid: 1a8ad46e-528f-4259-bb27-dd33bb9ad5e4
    resourceVersion: "2114"
    uid: 3b7ba56e-eb22-4ec4-9c6a-58b8b44dec07
  spec:
    containers:
    - args:
      - --cert-dir=/tmp
      - --secure-port=10250
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --kubelet-use-node-status-port
      - --metric-resolution=15s
      - --kubelet-insecure-tls
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/metrics-server:v0.7.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: metrics-server
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6zf46
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-dir
    - name: kube-api-access-6zf46
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:02:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:02:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T04:01:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e9ffdf199a38bd2a9d01d681e54aef0afb61dce215d28c2f85dd252a17c17f3c
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/metrics-server:v0.7.1
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/metrics-server@sha256:799bbdcdd394890e7e4564ff692d3e7506e34cbe2117f7e8db867257f6bc6e08
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T04:01:53Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.129
    podIPs:
    - ip: 10.100.234.129
    qosClass: Burstable
    startTime: "2024-08-20T04:01:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-20T03:51:52Z"
    generateName: openstack-cloud-controller-manager-
    labels:
      controller-revision-hash: 6566c5f59f
      k8s-app: openstack-cloud-controller-manager
      pod-template-generation: "1"
    name: openstack-cloud-controller-manager-gnjgd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: openstack-cloud-controller-manager
      uid: 328adf40-bfc7-4b23-80ca-fb4bcb87bbae
    resourceVersion: "641"
    uid: 5270548d-ee00-4dc6-a1ed-5c12fc1d1e6c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - kubernetes-52b3-control-plane-tgt6v
    containers:
    - args:
      - /bin/openstack-cloud-controller-manager
      - --v=1
      - --cluster-name=$(CLUSTER_NAME)
      - --cloud-config=$(CLOUD_CONFIG)
      - --cloud-provider=openstack
      - --use-service-account-credentials=false
      - --bind-address=127.0.0.1
      env:
      - name: CLOUD_CONFIG
        value: /etc/config/cloud.conf
      - name: CLUSTER_NAME
        value: kubernetes-52b3
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/openstack-cloud-controller-manager:v1.28.2
      imagePullPolicy: IfNotPresent
      name: openstack-cloud-controller-manager
      resources:
        requests:
          cpu: 200m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/config
        name: cloud-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p8xpt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: kubernetes-52b3-control-plane-tgt6v
    nodeSelector:
      node-role.kubernetes.io/control-plane: ""
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsUser: 1001
    serviceAccount: cloud-controller-manager
    serviceAccountName: cloud-controller-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node.cloudprovider.kubernetes.io/uninitialized
      value: "true"
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - name: cloud-config-volume
      secret:
        defaultMode: 420
        secretName: cloud-config
    - name: kube-api-access-p8xpt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-20T03:51:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ca2d564eb35becf5210b4a963095df8725d01b1bcd97f5df5920abd54adf91df
      image: registry1.cloud.cmctelecom.vn/cmck8sv2/openstack-cloud-controller-manager:v1.28.2
      imageID: registry1.cloud.cmctelecom.vn/cmck8sv2/openstack-cloud-controller-manager@sha256:fd14425e6c84e983c0066bd8eb3817c8e529a5a4956961844f344e7bec01a2db
      lastState: {}
      name: openstack-cloud-controller-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-08-20T03:51:57Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2024-08-20T03:51:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 3ae02427253bd9d7fde42c070683efc4c131dbb51745e65312e628f9ec3e2ac9
      cni.projectcalico.org/podIP: 10.100.119.162/32
      cni.projectcalico.org/podIPs: 10.100.119.162/32
    creationTimestamp: "2024-09-18T07:51:11Z"
    generateName: minisys-
    labels:
      app: minisys
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: minisys-867c967c56
      statefulset.kubernetes.io/pod-name: minisys-0
    name: minisys-0
    namespace: minisys
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: minisys
      uid: 9a616daf-4e71-4e35-9e61-ae14619c8763
    resourceVersion: "10144241"
    uid: 8d02484d-8966-4b51-a97c-091d65462510
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: rds-mysql-secret
      image: nhqhub/minisys:2024-09-16_15-56-40
      imagePullPolicy: IfNotPresent
      name: minisys-container
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rkhx5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: minisys-0
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-d8t5n
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-rkhx5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d888fc8b622451a70af994067d38a255587673d53682fc82b1b6df8546424dc3
      image: docker.io/nhqhub/minisys:2024-09-16_15-56-40
      imageID: docker.io/nhqhub/minisys@sha256:87016b3f72fbd13ffacabce4f4bb96a3024c999b3ce05ac4cf824d1f916e58b4
      lastState: {}
      name: minisys-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T07:51:21Z"
    hostIP: 192.168.1.216
    phase: Running
    podIP: 10.100.119.162
    podIPs:
    - ip: 10.100.119.162
    qosClass: BestEffort
    startTime: "2024-09-18T07:51:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 604ab4a3d2869bd0eec3a9aa13bd79bfa0aca5584ae4a5da185a148b6ea95991
      cni.projectcalico.org/podIP: 10.100.38.155/32
      cni.projectcalico.org/podIPs: 10.100.38.155/32
    creationTimestamp: "2024-09-18T07:51:22Z"
    generateName: minisys-
    labels:
      app: minisys
      apps.kubernetes.io/pod-index: "1"
      controller-revision-hash: minisys-867c967c56
      statefulset.kubernetes.io/pod-name: minisys-1
    name: minisys-1
    namespace: minisys
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: minisys
      uid: 9a616daf-4e71-4e35-9e61-ae14619c8763
    resourceVersion: "10144268"
    uid: 7f68e9df-7efc-4dce-9f40-15bb028ff0da
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: rds-mysql-secret
      image: nhqhub/minisys:2024-09-16_15-56-40
      imagePullPolicy: IfNotPresent
      name: minisys-container
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-znpvs
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: minisys-1
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-znpvs
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T07:51:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e197ba1dfba811cfbb29709be4f85fc36bde9f96d8266e153cacdace5d868dfb
      image: docker.io/nhqhub/minisys:2024-09-16_15-56-40
      imageID: docker.io/nhqhub/minisys@sha256:87016b3f72fbd13ffacabce4f4bb96a3024c999b3ce05ac4cf824d1f916e58b4
      lastState: {}
      name: minisys-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T07:51:23Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.155
    podIPs:
    - ip: 10.100.38.155
    qosClass: BestEffort
    startTime: "2024-09-18T07:51:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 3d09e313ea97bbcd5201038d41449f5ccd667ee1b49dacff07d10e0afd875b3c
      cni.projectcalico.org/podIP: 10.100.38.161/32
      cni.projectcalico.org/podIPs: 10.100.38.161/32
    creationTimestamp: "2024-09-18T08:52:27Z"
    generateName: nfs-provisioner-01-nfs-subdir-external-provisioner-8454b8b97b-
    labels:
      app: nfs-subdir-external-provisioner
      pod-template-hash: 8454b8b97b
      release: nfs-provisioner-01
    name: nfs-provisioner-01-nfs-subdir-external-provisioner-8454b8bdjmk4
    namespace: nfs-provisioner
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nfs-provisioner-01-nfs-subdir-external-provisioner-8454b8b97b
      uid: b1794b94-aed7-496c-8567-db5b9f4a3f4f
    resourceVersion: "10159752"
    uid: 5b3ede75-0fc3-4fa8-8862-8e60b3bb72a3
  spec:
    containers:
    - env:
      - name: PROVISIONER_NAME
        value: cluster.local/nfs-provisioner-01-nfs-subdir-external-provisioner
      - name: NFS_SERVER
        value: 192.168.1.184
      - name: NFS_PATH
        value: /uit/nfs
      image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
      imagePullPolicy: IfNotPresent
      name: nfs-subdir-external-provisioner
      resources: {}
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /persistentvolumes
        name: nfs-subdir-external-provisioner-root
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dpjcf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: nfs-provisioner-01-nfs-subdir-external-provisioner
    serviceAccountName: nfs-provisioner-01-nfs-subdir-external-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: nfs-subdir-external-provisioner-root
      nfs:
        path: /uit/nfs
        server: 192.168.1.184
    - name: kube-api-access-dpjcf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:52:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:52:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:52:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T08:52:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2bf7d1d6fd441b88fa4927ca9c625af229b5e14fd3a493f9f694097cd1374fcf
      image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
      imageID: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner@sha256:63d5e04551ec8b5aae83b6f35938ca5ddc50a88d85492d9731810c31591fa4c9
      lastState: {}
      name: nfs-subdir-external-provisioner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-18T08:52:28Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.161
    podIPs:
    - ip: 10.100.38.161
    qosClass: BestEffort
    startTime: "2024-09-18T08:52:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 27a101ee4d7822efaecb2a595e1bc54e907fb5827a4d4bc33144a0e72df7cd95
      cni.projectcalico.org/podIP: 10.100.38.175/32
      cni.projectcalico.org/podIPs: 10.100.38.175/32
      kubectl.kubernetes.io/restartedAt: "2024-08-22T11:16:47+07:00"
    creationTimestamp: "2024-08-29T07:14:49Z"
    generateName: pt-app-deployment-68d5f5484c-
    labels:
      app: pt-app
      pod-template-hash: 68d5f5484c
    name: pt-app-deployment-68d5f5484c-lkm7s
    namespace: pt-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: pt-app-deployment-68d5f5484c
      uid: ad117a40-272b-4a98-9843-59360af1b8f8
    resourceVersion: "3169119"
    uid: bf9ea15c-92b3-4254-872e-dd68420f1d10
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: dotfile-secret
      image: bupmangnon/hihi:v02
      imagePullPolicy: IfNotPresent
      name: pt-app
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kvnx2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-kvnx2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T07:14:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-30T15:49:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-30T15:49:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T07:14:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://345a3f64d72f9bdcca588713530da0085aa6b983df54d5e8fc5fd02bc6755d9c
      image: docker.io/bupmangnon/hihi:v02
      imageID: docker.io/bupmangnon/hihi@sha256:63d5ede29f6d3b5f3c86e94eac86a04f07b03c2aff5ca0ce8495c0fa7bee82e1
      lastState:
        terminated:
          containerID: containerd://17921f2335e95d85edf326bc9fae5d544cba2f8bd10a7f7962c9fdfa27e70dee
          exitCode: 1
          finishedAt: "2024-08-30T15:49:02Z"
          reason: Error
          startedAt: "2024-08-29T17:55:33Z"
      name: pt-app
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2024-08-30T15:49:02Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.175
    podIPs:
    - ip: 10.100.38.175
    qosClass: BestEffort
    startTime: "2024-08-29T07:14:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: ed34ef8813519c6340ccee50118ecf775c2229bb443ace2415a8197e403ac093
      cni.projectcalico.org/podIP: 10.100.234.165/32
      cni.projectcalico.org/podIPs: 10.100.234.165/32
      kubectl.kubernetes.io/restartedAt: "2024-08-22T11:16:47+07:00"
    creationTimestamp: "2024-08-29T07:15:04Z"
    generateName: pt-app-deployment-68d5f5484c-
    labels:
      app: pt-app
      pod-template-hash: 68d5f5484c
    name: pt-app-deployment-68d5f5484c-qxnpd
    namespace: pt-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: pt-app-deployment-68d5f5484c
      uid: ad117a40-272b-4a98-9843-59360af1b8f8
    resourceVersion: "3169073"
    uid: e854d844-355e-4ae2-9efa-5f0d29a602c9
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: dotfile-secret
      image: bupmangnon/hihi:v02
      imagePullPolicy: IfNotPresent
      name: pt-app
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-67j8t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-67j8t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T07:15:04Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-30T15:48:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-30T15:48:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-29T07:15:04Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://44747ae4731c55fd2c04d93a12f3ae776198e055744bc10a4725fde8ed0d8c89
      image: docker.io/bupmangnon/hihi:v02
      imageID: docker.io/bupmangnon/hihi@sha256:63d5ede29f6d3b5f3c86e94eac86a04f07b03c2aff5ca0ce8495c0fa7bee82e1
      lastState:
        terminated:
          containerID: containerd://db0604e45ab323a2741fd721539ce971cded9da91ab8d35a5731d29dbcfd1b01
          exitCode: 1
          finishedAt: "2024-08-30T15:48:54Z"
          reason: Error
          startedAt: "2024-08-29T17:55:22Z"
      name: pt-app
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2024-08-30T15:48:55Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.165
    podIPs:
    - ip: 10.100.234.165
    qosClass: BestEffort
    startTime: "2024-08-29T07:15:04Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7a60240c3662101e95c1cc55e33903f8e57f82c95aee8e247a033770d198b120
      cni.projectcalico.org/podIP: 10.100.38.148/32
      cni.projectcalico.org/podIPs: 10.100.38.148/32
    creationTimestamp: "2024-09-16T15:37:40Z"
    generateName: pt-app--pt-app-deployment-777b9c5d9-
    labels:
      app: pt-app
      pod-template-hash: 777b9c5d9
    name: pt-app--pt-app-deployment-777b9c5d9-2kspx
    namespace: pt-app0
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: pt-app--pt-app-deployment-777b9c5d9
      uid: 892fff31-3b13-452d-9a07-78acfbe9b25b
    resourceVersion: "10337910"
    uid: 9571ba7e-022c-498b-8244-f6f34e9c69b0
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: dotfile-secret
      image: registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c
      imagePullPolicy: IfNotPresent
      name: pt-app
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2fj5t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: pt-app-secret
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-8sd45
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2fj5t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-16T15:37:40Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T20:07:37Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T20:07:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-16T15:37:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b69c8ba2c81bc32dc8b589122648c6494d55b27d5fb5a77c363f143de144049d
      image: registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c
      imageID: registry.gitlab.com/bupmangnon00/hello/login_app@sha256:3fa4e5cb603d5073ab21f74bbbab5eb3f05e1b005a60c0f91d759bff92a1602f
      lastState:
        terminated:
          containerID: containerd://6ef44190e33da2b00e8f65aabe8651cc63ad9ebf323713bfcb84cd05f1d78e16
          exitCode: 1
          finishedAt: "2024-09-18T20:07:35Z"
          reason: Error
          startedAt: "2024-09-18T12:07:34Z"
      name: pt-app
      ready: true
      restartCount: 6
      started: true
      state:
        running:
          startedAt: "2024-09-18T20:07:36Z"
    hostIP: 192.168.1.227
    phase: Running
    podIP: 10.100.38.148
    podIPs:
    - ip: 10.100.38.148
    qosClass: BestEffort
    startTime: "2024-09-16T15:37:40Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 0a224194b2c927b94cec0261df751b2b9dec9b84760bf5020c60443497ba87ac
      cni.projectcalico.org/podIP: 10.100.234.167/32
      cni.projectcalico.org/podIPs: 10.100.234.167/32
    creationTimestamp: "2024-09-17T02:43:41Z"
    generateName: pt-app--pt-app-deployment-777b9c5d9-
    labels:
      app: pt-app
      pod-template-hash: 777b9c5d9
    name: pt-app--pt-app-deployment-777b9c5d9-t9mj4
    namespace: pt-app0
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: pt-app--pt-app-deployment-777b9c5d9
      uid: 892fff31-3b13-452d-9a07-78acfbe9b25b
    resourceVersion: "10380781"
    uid: 584c9c38-2e8c-41fd-926d-7f46ce1da108
  spec:
    containers:
    - envFrom:
      - secretRef:
          name: dotfile-secret
      image: registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c
      imagePullPolicy: IfNotPresent
      name: pt-app
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wm6k2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: pt-app-secret
    nodeName: kubernetes-52b3-nodegroup-zpj8-worker-hwjxr-c8rlg
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-wm6k2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T22:53:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-18T22:53:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-17T02:43:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4fd8a36a48c3a527f4ffc350bfccc09bcadb5105a003f42e17886afe03f9c851
      image: registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c
      imageID: registry.gitlab.com/bupmangnon00/hello/login_app@sha256:3fa4e5cb603d5073ab21f74bbbab5eb3f05e1b005a60c0f91d759bff92a1602f
      lastState:
        terminated:
          containerID: containerd://d7171cd8dcf100e5c2fdb0e3d284c98d59d6df4073b77f4d22459a4ae6668968
          exitCode: 1
          finishedAt: "2024-09-18T22:53:14Z"
          reason: Error
          startedAt: "2024-09-18T14:53:12Z"
      name: pt-app
      ready: true
      restartCount: 5
      started: true
      state:
        running:
          startedAt: "2024-09-18T22:53:14Z"
    hostIP: 192.168.1.93
    phase: Running
    podIP: 10.100.234.167
    podIPs:
    - ip: 10.100.234.167
    qosClass: BestEffort
    startTime: "2024-09-17T02:43:41Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"ad-svc","namespace":"adad"},"spec":{"ports":[{"port":80,"targetPort":80}],"selector":{"app":"web"}}}
    creationTimestamp: "2024-08-29T09:51:58Z"
    name: ad-svc
    namespace: adad
    resourceVersion: "2701529"
    uid: f208acfd-3635-47ce-bb69-1d07498b7f6c
  spec:
    clusterIP: 10.254.44.158
    clusterIPs:
    - 10.254.44.158
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: web
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-09-18T08:48:41Z"
    labels:
      app: appad-web
      app.kubernetes.io/instance: bookstore
    name: bookstore-svc
    namespace: adapp
    resourceVersion: "10158790"
    uid: a31ab198-2851-4907-814e-539262788583
  spec:
    clusterIP: 10.254.220.26
    clusterIPs:
    - 10.254.220.26
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app: appad-web
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:22Z"
    labels:
      app.kubernetes.io/component: applicationset-controller
      app.kubernetes.io/name: argocd-applicationset-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-applicationset-controller
    namespace: argocd
    resourceVersion: "7170"
    uid: e5c56414-1f3a-49aa-a17e-91a034589413
  spec:
    clusterIP: 10.254.211.150
    clusterIPs:
    - 10.254.211.150
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: webhook
      port: 7000
      protocol: TCP
      targetPort: webhook
    - name: metrics
      port: 8080
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/name: argocd-applicationset-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:22Z"
    labels:
      app.kubernetes.io/component: dex-server
      app.kubernetes.io/name: argocd-dex-server
      app.kubernetes.io/part-of: argocd
    name: argocd-dex-server
    namespace: argocd
    resourceVersion: "7174"
    uid: a5b4b764-363e-420a-935a-c40fa566b75a
  spec:
    clusterIP: 10.254.124.109
    clusterIPs:
    - 10.254.124.109
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: TCP
      name: http
      port: 5556
      protocol: TCP
      targetPort: 5556
    - name: grpc
      port: 5557
      protocol: TCP
      targetPort: 5557
    - name: metrics
      port: 5558
      protocol: TCP
      targetPort: 5558
    selector:
      app.kubernetes.io/name: argocd-dex-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/name: argocd-metrics
      app.kubernetes.io/part-of: argocd
    name: argocd-metrics
    namespace: argocd
    resourceVersion: "7178"
    uid: e959b2e2-d2bf-429d-9ae7-ff3e5eaff840
  spec:
    clusterIP: 10.254.111.71
    clusterIPs:
    - 10.254.111.71
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8082
      protocol: TCP
      targetPort: 8082
    selector:
      app.kubernetes.io/name: argocd-application-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    labels:
      app.kubernetes.io/component: notifications-controller
      app.kubernetes.io/name: argocd-notifications-controller-metrics
      app.kubernetes.io/part-of: argocd
    name: argocd-notifications-controller-metrics
    namespace: argocd
    resourceVersion: "7182"
    uid: aeacfd0d-9ff7-489f-bca7-5d84551473d1
  spec:
    clusterIP: 10.254.144.143
    clusterIPs:
    - 10.254.144.143
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9001
      protocol: TCP
      targetPort: 9001
    selector:
      app.kubernetes.io/name: argocd-notifications-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    labels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/name: argocd-redis
      app.kubernetes.io/part-of: argocd
    name: argocd-redis
    namespace: argocd
    resourceVersion: "7186"
    uid: a3e003b2-da3a-4c9e-a789-c542eafb23cf
  spec:
    clusterIP: 10.254.105.18
    clusterIPs:
    - 10.254.105.18
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app.kubernetes.io/name: argocd-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/part-of: argocd
    name: argocd-repo-server
    namespace: argocd
    resourceVersion: "7190"
    uid: 1a3b665d-0c8a-442c-8a7d-f8940552d326
  spec:
    clusterIP: 10.254.16.60
    clusterIPs:
    - 10.254.16.60
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: server
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: metrics
      port: 8084
      protocol: TCP
      targetPort: 8084
    selector:
      app.kubernetes.io/name: argocd-repo-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/part-of: argocd
    name: argocd-server
    namespace: argocd
    resourceVersion: "7194"
    uid: eb291c73-75b1-41a2-a275-7df5f87ab936
  spec:
    clusterIP: 10.254.43.83
    clusterIPs:
    - 10.254.43.83
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/name: argocd-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: argocd-server-metrics
      app.kubernetes.io/part-of: argocd
    name: argocd-server-metrics
    namespace: argocd
    resourceVersion: "7198"
    uid: e423a7fe-0f7b-487a-8e13-c7e487cae653
  spec:
    clusterIP: 10.254.193.61
    clusterIPs:
    - 10.254.193.61
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8083
      protocol: TCP
      targetPort: 8083
    selector:
      app.kubernetes.io/name: argocd-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"c1nd3r-app","app.kubernetes.io/instance":"c1nd3r.me"},"name":"c1nd3r-ingress-service","namespace":"c1nd3r"},"spec":{"ports":[{"port":80,"targetPort":5000}],"selector":{"app":"c1nd3r-app"}}}
    creationTimestamp: "2024-09-16T02:55:31Z"
    labels:
      app: c1nd3r-app
      app.kubernetes.io/instance: c1nd3r.me
    name: c1nd3r-ingress-service
    namespace: c1nd3r
    resourceVersion: "9313592"
    uid: fcd6d647-be93-4713-a75a-e31f312153d5
  spec:
    clusterIP: 10.254.94.8
    clusterIPs:
    - 10.254.94.8
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 5000
    selector:
      app: c1nd3r-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.15.3"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"ports":[{"name":"tcp-prometheus-servicemonitor","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-20T04:32:39Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.15.3
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "8364"
    uid: 34c25cc7-a205-44b7-8a3d-f0cc3c20f6cc
  spec:
    clusterIP: 10.254.62.107
    clusterIPs:
    - 10.254.62.107
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-prometheus-servicemonitor
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.15.3"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"ports":[{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-20T04:32:39Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.15.3
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "8368"
    uid: dbbed376-cb86-48b5-b660-c0a5f22c3dda
  spec:
    clusterIP: 10.254.244.101
    clusterIPs:
    - 10.254.244.101
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T03:51:00Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "189"
    uid: e6937b3a-aff0-4907-8bca-2d2cd6dda9af
  spec:
    clusterIP: 10.254.0.1
    clusterIPs:
    - 10.254.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubevpn
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-28T09:29:42Z"
    labels:
      app: kubevpn-traffic-manager
      app.kubernetes.io/instance: kubevpn
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubevpn
      app.kubernetes.io/version: v2.2.17
      helm.sh/chart: kubevpn-2.2.17
    name: kubevpn-traffic-manager
    namespace: default
    resourceVersion: "2331006"
    uid: 71b57cf5-59e0-4be8-aef5-5770898a8046
  spec:
    clusterIP: 10.254.138.42
    clusterIPs:
    - 10.254.138.42
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: 8422-for-udp
      port: 8422
      protocol: UDP
      targetPort: 8422
    - name: 10800-for-tcp
      port: 10800
      protocol: TCP
      targetPort: 10800
    - name: 9002-for-envoy
      port: 9002
      protocol: TCP
      targetPort: 9002
    - name: 80-for-webhook
      port: 80
      protocol: TCP
      targetPort: 80
    - name: 53-for-dns
      port: 53
      protocol: UDP
      targetPort: 53
    selector:
      app.kubernetes.io/instance: kubevpn
      app.kubernetes.io/name: kubevpn
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: my-release
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-06T07:20:48Z"
    labels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/version: 7.4.0
      helm.sh/chart: redis-20.0.5
    name: my-release-redis
    namespace: default
    resourceVersion: "5645321"
    uid: 94c42afa-2a8f-4a75-b149-c8c6c146ef89
  spec:
    clusterIP: 10.254.168.211
    clusterIPs:
    - 10.254.168.211
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    - name: tcp-sentinel
      port: 26379
      protocol: TCP
      targetPort: 26379
    selector:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: my-release
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-06T07:20:48Z"
    labels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/version: 7.4.0
      helm.sh/chart: redis-20.0.5
    name: my-release-redis-headless
    namespace: default
    resourceVersion: "5645320"
    uid: 274c0873-bf23-416f-bfc2-a541ae0b2b8c
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-redis
      port: 6379
      protocol: TCP
      targetPort: redis
    - name: tcp-sentinel
      port: 26379
      protocol: TCP
      targetPort: redis-sentinel
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: elasticsearch
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-08-27T06:32:13Z"
    labels:
      app: elasticsearch-master
      app.kubernetes.io/managed-by: Helm
      chart: elasticsearch
      heritage: Helm
      release: elasticsearch
    name: elasticsearch-master
    namespace: efk
    resourceVersion: "1956570"
    uid: 74f99a89-0799-47bd-81d8-0b621d4b8c69
  spec:
    clusterIP: 10.254.6.202
    clusterIPs:
    - 10.254.6.202
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: transport
      port: 9300
      protocol: TCP
      targetPort: 9300
    selector:
      app: elasticsearch-master
      chart: elasticsearch
      release: elasticsearch
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: elasticsearch
      meta.helm.sh/release-namespace: efk
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    creationTimestamp: "2024-08-27T06:32:13Z"
    labels:
      app: elasticsearch-master
      app.kubernetes.io/managed-by: Helm
      chart: elasticsearch
      heritage: Helm
      release: elasticsearch
    name: elasticsearch-master-headless
    namespace: efk
    resourceVersion: "1956566"
    uid: ac80f56d-8ca2-404f-9613-994e678ddfb8
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: transport
      port: 9300
      protocol: TCP
      targetPort: 9300
    publishNotReadyAddresses: true
    selector:
      app: elasticsearch-master
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: fluent-bit
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-09-12T03:51:02Z"
    labels:
      app.kubernetes.io/instance: fluent-bit
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: fluent-bit
      app.kubernetes.io/version: 3.1.7
      helm.sh/chart: fluent-bit-0.47.9
    name: fluent-bit
    namespace: efk
    resourceVersion: "7832518"
    uid: f9c37e6a-68c2-41c2-8452-9cc78728cb8b
  spec:
    clusterIP: 10.254.21.248
    clusterIPs:
    - 10.254.21.248
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 2020
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/instance: fluent-bit
      app.kubernetes.io/name: fluent-bit
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kibana
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-08-27T06:59:12Z"
    labels:
      app: kibana
      app.kubernetes.io/managed-by: Helm
      heritage: Helm
      release: kibana
    name: kibana-kibana
    namespace: efk
    resourceVersion: "1963382"
    uid: a4ffd2e6-3454-4bfa-8182-359d10685866
  spec:
    clusterIP: 10.254.220.116
    clusterIPs:
    - 10.254.220.116
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 5601
      protocol: TCP
      targetPort: 5601
    selector:
      app: kibana
      release: kibana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      loadbalancer.openstack.org/class: cmc-loadbalancer-public
      loadbalancer.openstack.org/load-balancer-address: 42.96.38.210
      loadbalancer.openstack.org/load-balancer-id: 96fba5a9-fe7b-456e-b269-537174a2fe8c
      loadbalancer.openstack.org/proxy-protocol: "true"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-29T09:00:40Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "10141109"
    uid: 7d5e1383-72ae-4a54-af05-0572ec67f366
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.254.199.102
    clusterIPs:
    - 10.254.199.102
    externalTrafficPolicy: Local
    healthCheckNodePort: 30482
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 32538
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 32461
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: 42.96.38.210.nip.io
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-29T09:00:40Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
    name: ingress-nginx-controller-admission
    namespace: ingress-nginx
    resourceVersion: "2687721"
    uid: 569e735d-ac6d-4d51-b005-d7390c9ec352
  spec:
    clusterIP: 10.254.160.87
    clusterIPs:
    - 10.254.160.87
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/path: /
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-08-22T07:49:57Z"
    name: jenkins-service
    namespace: jenkins
    resourceVersion: "588037"
    uid: 87be6130-6be4-4a94-a632-7eff7659e38d
  spec:
    clusterIP: 10.254.139.251
    clusterIPs:
    - 10.254.139.251
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - nodePort: 32000
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: jenkins-server
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-08-20T03:51:45Z"
    labels:
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "321"
    uid: d9dc28be-59a3-4809-ac61-6fbafb709cf4
  spec:
    clusterIP: 10.254.0.10
    clusterIPs:
    - 10.254.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-20T03:51:48Z"
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "534"
    uid: 35383e04-892b-4305-b3d7-a36794e9da2d
  spec:
    clusterIP: 10.254.139.80
    clusterIPs:
    - 10.254.139.80
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-09-18T07:51:11Z"
    labels:
      app: minisys
      app.kubernetes.io/instance: minisys
    name: minisys-service
    namespace: minisys
    resourceVersion: "10144107"
    uid: d2630f6d-4b82-4064-8aa5-affb9b060660
  spec:
    clusterIP: 10.254.178.200
    clusterIPs:
    - 10.254.178.200
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: minisys
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"app-clusterip","namespace":"pt-app"},"spec":{"ports":[{"name":"https","port":3000,"targetPort":3000},{"name":"hello","port":443,"targetPort":3000}],"selector":{"app":"pt-app"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-22T03:50:08Z"
    name: app-clusterip
    namespace: pt-app
    resourceVersion: "539781"
    uid: 30b7c828-18dd-4526-8b5f-fe4f76cda8a2
  spec:
    clusterIP: 10.254.114.50
    clusterIPs:
    - 10.254.114.50
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 3000
      protocol: TCP
      targetPort: 3000
    - name: hello
      port: 443
      protocol: TCP
      targetPort: 3000
    selector:
      app: pt-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"pt-app","app.kubernetes.io/instance":"pt-app"},"name":"pt-app-pt-app","namespace":"pt-app0"},"spec":{"ports":[{"name":"https","port":3000,"targetPort":3000},{"name":"hello","port":443,"targetPort":3000}],"selector":{"app":"pt-app"},"type":"ClusterIP"}}
    creationTimestamp: "2024-09-06T04:33:35Z"
    labels:
      app: pt-app
      app.kubernetes.io/instance: pt-app
    name: pt-app-pt-app
    namespace: pt-app0
    resourceVersion: "5600395"
    uid: 5457d878-9805-4f6b-8f00-827e999e96d8
  spec:
    clusterIP: 10.254.98.238
    clusterIPs:
    - 10.254.98.238
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 3000
      protocol: TCP
      targetPort: 3000
    - name: hello
      port: 443
      protocol: TCP
      targetPort: 3000
    selector:
      app: pt-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "78"
      meta.helm.sh/release-name: fluent-bit
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-09-12T03:51:02Z"
    generation: 78
    labels:
      app.kubernetes.io/instance: fluent-bit
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: fluent-bit
      app.kubernetes.io/version: 3.1.7
      helm.sh/chart: fluent-bit-0.47.9
    name: fluent-bit
    namespace: efk
    resourceVersion: "10454187"
    uid: 4106707d-b5e3-4686-86d1-f7947b0e8d4b
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: fluent-bit
        app.kubernetes.io/name: fluent-bit
    template:
      metadata:
        annotations:
          checksum/config: a762acbc77da003e6a9d06398616e302c390389dcbb3bbfd434444a9f1a7cfda
          kubectl.kubernetes.io/restartedAt: "2024-09-19T10:30:58+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: fluent-bit
          app.kubernetes.io/name: fluent-bit
      spec:
        containers:
        - args:
          - --workdir=/fluent-bit/etc
          - --config=/fluent-bit/etc/conf/fluent-bit.conf
          command:
          - /fluent-bit/bin/fluent-bit
          image: cr.fluentbit.io/fluent/fluent-bit:3.1.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: fluent-bit
          ports:
          - containerPort: 2020
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /fluent-bit/etc/conf
            name: config
          - mountPath: /var/log
            name: varlog
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /etc/machine-id
            name: etcmachineid
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: fluent-bit
        serviceAccountName: fluent-bit
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: fluent-bit
          name: config
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
        - hostPath:
            path: /etc/machine-id
            type: File
          name: etcmachineid
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 78
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-08-20T03:51:47Z"
    generation: 1
    labels:
      k8s-app: calico-node
    name: calico-node
    namespace: kube-system
    resourceVersion: "9691948"
    uid: 51f07c5e-ab2b-4e88-bfa1-11d4dc9280d5
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-node
      spec:
        containers:
        - env:
          - name: DATASTORE_TYPE
            value: kubernetes
          - name: WAIT_FOR_DATASTORE
            value: "true"
          - name: NODENAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CALICO_NETWORKING_BACKEND
            valueFrom:
              configMapKeyRef:
                key: calico_backend
                name: calico-config
          - name: CLUSTER_TYPE
            value: k8s,bgp
          - name: IP
            value: autodetect
          - name: CALICO_IPV4POOL_IPIP
            value: Always
          - name: CALICO_IPV4POOL_VXLAN
            value: Never
          - name: CALICO_IPV6POOL_VXLAN
            value: Never
          - name: FELIX_IPINIPMTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: FELIX_VXLANMTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: FELIX_WIREGUARDMTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: CALICO_DISABLE_FILE_LOGGING
            value: "true"
          - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
            value: ACCEPT
          - name: FELIX_IPV6SUPPORT
            value: "false"
          - name: FELIX_HEALTHENABLED
            value: "true"
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/calico-node
                - -shutdown
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: calico-node
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 250m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /var/run/calico
            name: var-run-calico
          - mountPath: /var/lib/calico
            name: var-lib-calico
          - mountPath: /var/run/nodeagent
            name: policysync
          - mountPath: /sys/fs/bpf
            name: bpffs
          - mountPath: /var/log/calico/cni
            name: cni-log-dir
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /opt/cni/bin/calico-ipam
          - -upgrade
          env:
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CALICO_NETWORKING_BACKEND
            valueFrom:
              configMapKeyRef:
                key: calico_backend
                name: calico-config
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
          imagePullPolicy: IfNotPresent
          name: upgrade-ipam
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/cni/networks
            name: host-local-net-dir
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        - command:
          - /opt/cni/bin/install
          env:
          - name: CNI_CONF_NAME
            value: 10-calico.conflist
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: calico-config
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CNI_MTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: SLEEP
            value: "false"
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/cni:v3.26.1
          imagePullPolicy: IfNotPresent
          name: install-cni
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
        - command:
          - calico-node
          - -init
          - -best-effort
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/node:v3.26.1
          imagePullPolicy: IfNotPresent
          name: mount-bpffs
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /sys/fs
            mountPropagation: Bidirectional
            name: sys-fs
          - mountPath: /var/run/calico
            mountPropagation: Bidirectional
            name: var-run-calico
          - mountPath: /nodeproc
            name: nodeproc
            readOnly: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-node
        serviceAccountName: calico-node
        terminationGracePeriodSeconds: 0
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /var/run/calico
            type: ""
          name: var-run-calico
        - hostPath:
            path: /var/lib/calico
            type: ""
          name: var-lib-calico
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
          name: sys-fs
        - hostPath:
            path: /sys/fs/bpf
            type: Directory
          name: bpffs
        - hostPath:
            path: /proc
            type: ""
          name: nodeproc
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/calico/cni
            type: ""
          name: cni-log-dir
        - hostPath:
            path: /var/lib/cni/networks
            type: ""
          name: host-local-net-dir
        - hostPath:
            path: /var/run/nodeagent
            type: DirectoryOrCreate
          name: policysync
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    name: csi-cinder-nodeplugin
    namespace: kube-system
    resourceVersion: "9691961"
    uid: cdb79ab1-1de4-447f-a837-d5addf3a450c
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-cinder-nodeplugin
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-cinder-nodeplugin
      spec:
        containers:
        - args:
          - --csi-address=$(ADDRESS)
          - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          - name: DRIVER_REG_SOCK_PATH
            value: /var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-node-driver-registrar:v2.6.3
          imagePullPolicy: IfNotPresent
          name: node-driver-registrar
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /registration
            name: registration-dir
        - args:
          - --csi-address=/csi/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - /bin/cinder-csi-plugin
          - --endpoint=$(CSI_ENDPOINT)
          - --cloud-config=$(CLOUD_CONFIG)
          - --v=1
          env:
          - name: CSI_ENDPOINT
            value: unix://csi/csi.sock
          - name: CLOUD_CONFIG
            value: /etc/config/cloud.conf
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cinder-csi-plugin
          ports:
          - containerPort: 9808
            name: healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /var/lib/kubelet
            mountPropagation: Bidirectional
            name: kubelet-dir
          - mountPath: /dev
            mountPropagation: HostToContainer
            name: pods-probe-dir
          - mountPath: /etc/config
            name: secret-cinderplugin
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: csi-cinder-node-sa
        serviceAccountName: csi-cinder-node-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/cinder.csi.openstack.org
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet
            type: Directory
          name: kubelet-dir
        - hostPath:
            path: /dev
            type: Directory
          name: pods-probe-dir
        - name: secret-cinderplugin
          secret:
            defaultMode: 420
            secretName: cloud-config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-08-20T03:51:45Z"
    generation: 1
    labels:
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "9691951"
    uid: c9dcb587-b48f-4409-90db-2ae8fc4c4e1b
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /usr/local/bin/kube-proxy
          - --config=/var/lib/kube-proxy/config.conf
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/kube-proxy:v1.28.9
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kube-proxy
            name: kube-proxy
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kube-proxy
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    labels:
      k8s-app: openstack-cloud-controller-manager
    name: openstack-cloud-controller-manager
    namespace: kube-system
    resourceVersion: "642"
    uid: 328adf40-bfc7-4b23-80ca-fb4bcb87bbae
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: openstack-cloud-controller-manager
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: openstack-cloud-controller-manager
      spec:
        containers:
        - args:
          - /bin/openstack-cloud-controller-manager
          - --v=1
          - --cluster-name=$(CLUSTER_NAME)
          - --cloud-config=$(CLOUD_CONFIG)
          - --cloud-provider=openstack
          - --use-service-account-credentials=false
          - --bind-address=127.0.0.1
          env:
          - name: CLOUD_CONFIG
            value: /etc/config/cloud.conf
          - name: CLUSTER_NAME
            value: kubernetes-52b3
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/openstack-cloud-controller-manager:v1.28.2
          imagePullPolicy: IfNotPresent
          name: openstack-cloud-controller-manager
          resources:
            requests:
              cpu: 200m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kubernetes/pki
            name: k8s-certs
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ca-certs
            readOnly: true
          - mountPath: /etc/config
            name: cloud-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          node-role.kubernetes.io/control-plane: ""
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 1001
        serviceAccount: cloud-controller-manager
        serviceAccountName: cloud-controller-manager
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - hostPath:
            path: /etc/kubernetes/pki
            type: DirectoryOrCreate
          name: k8s-certs
        - hostPath:
            path: /etc/ssl/certs
            type: DirectoryOrCreate
          name: ca-certs
        - name: cloud-config-volume
          secret:
            defaultMode: 420
            secretName: cloud-config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-09-18T08:48:41Z"
    generation: 1
    labels:
      app: appad-web
      app.kubernetes.io/instance: bookstore
    name: bookstore-deployment
    namespace: adapp
    resourceVersion: "10158938"
    uid: 80e21380-01d5-419a-b79a-1a4e8ad9f8e7
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: appad-web
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: appad-web
      spec:
        containers:
        - image: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp:ae4355a9
          imagePullPolicy: IfNotPresent
          name: appad
          ports:
          - containerPort: 5000
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: hna-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-09-18T08:49:05Z"
      lastUpdateTime: "2024-09-18T08:49:05Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-09-18T08:48:41Z"
      lastUpdateTime: "2024-09-18T08:49:05Z"
      message: ReplicaSet "bookstore-deployment-d5c7d656f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: applicationset-controller
      app.kubernetes.io/name: argocd-applicationset-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-applicationset-controller
    namespace: argocd
    resourceVersion: "9685760"
    uid: e1bf4f6e-4dd6-4549-a760-d941d26e56a6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-applicationset-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-applicationset-controller
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-applicationset-controller
          env:
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.annotations
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.labels
                name: argocd-cmd-params-cm
                optional: true
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.leader.election
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.policy.override
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.debug
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.dryrun
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.progressive.syncs
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.new.git.file.globbing
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.concurrent.reconciliations.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.scm.root.ca.path
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.allowed.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.webhook.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: argocd-applicationset-controller
          ports:
          - containerPort: 7000
            name: webhook
            protocol: TCP
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /tmp
            name: tmp
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-applicationset-controller
        serviceAccountName: argocd-applicationset-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:27:23Z"
      lastUpdateTime: "2024-08-20T04:27:25Z"
      message: ReplicaSet "argocd-applicationset-controller-687dcb446b" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:43:51Z"
      lastUpdateTime: "2024-09-17T02:43:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: dex-server
      app.kubernetes.io/name: argocd-dex-server
      app.kubernetes.io/part-of: argocd
    name: argocd-dex-server
    namespace: argocd
    resourceVersion: "9685937"
    uid: a91386c2-2c3d-4cad-b034-6d6af8e857d9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-dex-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-dex-server
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - command:
          - /shared/argocd-dex
          - rundex
          env:
          - name: ARGOCD_DEX_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: dexserver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          image: ghcr.io/dexidp/dex:v2.41.1
          imagePullPolicy: Always
          name: dex
          ports:
          - containerPort: 5556
            protocol: TCP
          - containerPort: 5557
            protocol: TCP
          - containerPort: 5558
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
          - mountPath: /tls
            name: argocd-dex-server-tls
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /shared/argocd-dex
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-dex-server
        serviceAccountName: argocd-dex-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: static-files
        - emptyDir: {}
          name: dexconfig
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:27:23Z"
      lastUpdateTime: "2024-08-20T04:27:34Z"
      message: ReplicaSet "argocd-dex-server-6bd555b694" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:11Z"
      lastUpdateTime: "2024-09-17T02:44:11Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: notifications-controller
      app.kubernetes.io/name: argocd-notifications-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-notifications-controller
    namespace: argocd
    resourceVersion: "10326803"
    uid: c38a979e-82b7-4757-8207-e9c665428a9e
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-notifications-controller
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-notifications-controller
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-notifications
          env:
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.selfservice.enabled
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9001
            timeoutSeconds: 1
          name: argocd-notifications-controller
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          workingDir: /app
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-notifications-controller
        serviceAccountName: argocd-notifications-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:27:23Z"
      lastUpdateTime: "2024-08-20T04:27:27Z"
      message: ReplicaSet "argocd-notifications-controller-5f94cb7845" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-18T19:24:44Z"
      lastUpdateTime: "2024-09-18T19:24:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/name: argocd-redis
      app.kubernetes.io/part-of: argocd
    name: argocd-redis
    namespace: argocd
    resourceVersion: "9686180"
    uid: ad2dae35-6a13-40a9-82f0-819a0e30f716
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-redis
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-redis
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - --save
          - ""
          - --appendonly
          - "no"
          - --requirepass $(REDIS_PASSWORD)
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          image: redis:7.0.15-alpine
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - argocd
          - admin
          - redis-initial-password
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: IfNotPresent
          name: secret-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-redis
        serviceAccountName: argocd-redis
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:27:23Z"
      lastUpdateTime: "2024-08-20T04:27:33Z"
      message: ReplicaSet "argocd-redis-854d54f6b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:16Z"
      lastUpdateTime: "2024-09-17T02:44:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/part-of: argocd
    name: argocd-repo-server
    namespace: argocd
    resourceVersion: "9686277"
    uid: 7102ab2d-d2e4-4456-8e10-fe62a20b0098
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-repo-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-repo-server
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-repo-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        automountServiceAccountToken: false
        containers:
        - args:
          - /usr/local/bin/argocd-repo-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.repo.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.max.combined.directory.manifests.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
            valueFrom:
              configMapKeyRef:
                key: reposerver.plugin.tar.exclusions
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
            valueFrom:
              configMapKeyRef:
                key: reposerver.allow.oob.symlinks
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.tar.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.revision.cache.lock.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: reposerver.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.lsremote.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_REQUEST_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.request.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GRPC_MAX_SIZE_MB
            valueFrom:
              configMapKeyRef:
                key: reposerver.grpc.max.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
            valueFrom:
              configMapKeyRef:
                key: reposerver.include.hidden.directories
                name: argocd-cmd-params-cm
                optional: true
          - name: HELM_CACHE_HOME
            value: /helm-working-dir
          - name: HELM_CONFIG_HOME
            value: /helm-working-dir
          - name: HELM_DATA_HOME
            value: /helm-working-dir
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            protocol: TCP
          - containerPort: 8084
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /tmp
            name: tmp
          - mountPath: /helm-working-dir
            name: helm-working-dir
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-repo-server
        serviceAccountName: argocd-repo-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: helm-working-dir
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:27:23Z"
      lastUpdateTime: "2024-08-20T04:27:43Z"
      message: ReplicaSet "argocd-repo-server-87bccd956" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:32Z"
      lastUpdateTime: "2024-09-17T02:44:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/part-of: argocd
    name: argocd-server
    namespace: argocd
    resourceVersion: "9686057"
    uid: 7fa52082-7a0f-4340-95eb-78f30e5c255b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-server
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - /usr/local/bin/argocd-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_SERVER_INSECURE
            valueFrom:
              configMapKeyRef:
                key: server.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_BASEHREF
            valueFrom:
              configMapKeyRef:
                key: server.basehref
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ROOTPATH
            valueFrom:
              configMapKeyRef:
                key: server.rootpath
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: server.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                key: server.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER
            valueFrom:
              configMapKeyRef:
                key: server.dex.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DISABLE_AUTH
            valueFrom:
              configMapKeyRef:
                key: server.disable.auth
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_GZIP
            valueFrom:
              configMapKeyRef:
                key: server.enable.gzip
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_X_FRAME_OPTIONS
            valueFrom:
              configMapKeyRef:
                key: server.x.frame.options
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
            valueFrom:
              configMapKeyRef:
                key: server.content.security.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: server.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.connection.status.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.oidc.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.login.attempts.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_STATIC_ASSETS
            valueFrom:
              configMapKeyRef:
                key: server.staticassets
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.app.state.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_MAX_COOKIE_NUMBER
            valueFrom:
              configMapKeyRef:
                key: server.http.cookie.maxnumber
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
            valueFrom:
              configMapKeyRef:
                key: server.enable.proxy.extension
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_MAX
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.base.backoff
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_API_CONTENT_TYPES
            valueFrom:
              configMapKeyRef:
                key: server.api.content.types
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: server.webhook.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.new.git.file.globbing
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.scm.root.ca.path
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.allowed.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/dex/tls
            name: argocd-dex-server-tls
          - mountPath: /home/argocd
            name: plugins-home
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/params
            name: argocd-cmd-params-cm
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-server
        serviceAccountName: argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: plugins-home
        - emptyDir: {}
          name: tmp
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
        - configMap:
            defaultMode: 420
            items:
            - key: server.profile.enabled
              path: profiler.enabled
            name: argocd-cmd-params-cm
            optional: true
          name: argocd-cmd-params-cm
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:27:23Z"
      lastUpdateTime: "2024-08-20T04:27:53Z"
      message: ReplicaSet "argocd-server-559586695d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:12Z"
      lastUpdateTime: "2024-09-17T02:44:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"c1nd3r.me"},"name":"c1nd3r-webapp","namespace":"c1nd3r"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"c1nd3r-app"}},"template":{"metadata":{"labels":{"app":"c1nd3r-app"}},"spec":{"containers":[{"env":[{"name":"DB_HOST","valueFrom":{"secretKeyRef":{"key":"DB_HOST","name":"c1nd3r-secret"}}},{"name":"DB_USER","valueFrom":{"secretKeyRef":{"key":"DB_USER","name":"c1nd3r-secret"}}},{"name":"DB_PASSWORD","valueFrom":{"secretKeyRef":{"key":"DB_PASSWORD","name":"c1nd3r-secret"}}},{"name":"DB_DATABASE","valueFrom":{"secretKeyRef":{"key":"DB_DATABASE","name":"c1nd3r-secret"}}},{"name":"JWT_SECRET","valueFrom":{"secretKeyRef":{"key":"JWT_SECRET","name":"c1nd3r-secret"}}},{"name":"JWT_EXPIRES_IN","valueFrom":{"secretKeyRef":{"key":"JWT_EXPIRES_IN","name":"c1nd3r-secret"}}},{"name":"JWT_COOKIE_EXPIRES","valueFrom":{"secretKeyRef":{"key":"JWT_COOKIE_EXPIRES","name":"c1nd3r-secret"}}}],"image":"hunger1607/c1nd3r-webapp:latest","imagePullPolicy":"Always","name":"c1nd3r-webapp","ports":[{"containerPort":5000}]}]}}}}
    creationTimestamp: "2024-09-16T02:55:31Z"
    generation: 5
    labels:
      app.kubernetes.io/instance: c1nd3r.me
    name: c1nd3r-webapp
    namespace: c1nd3r
    resourceVersion: "9685892"
    uid: 254127c8-3108-4eff-90c9-76087dfa7330
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: c1nd3r-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: c1nd3r-app
      spec:
        containers:
        - env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: DB_HOST
                name: c1nd3r-secret
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: DB_USER
                name: c1nd3r-secret
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DB_PASSWORD
                name: c1nd3r-secret
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: DB_DATABASE
                name: c1nd3r-secret
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                key: JWT_SECRET
                name: c1nd3r-secret
          - name: JWT_EXPIRES_IN
            valueFrom:
              secretKeyRef:
                key: JWT_EXPIRES_IN
                name: c1nd3r-secret
          - name: JWT_COOKIE_EXPIRES
            valueFrom:
              secretKeyRef:
                key: JWT_COOKIE_EXPIRES
                name: c1nd3r-secret
          image: hunger1607/c1nd3r-webapp:latest
          imagePullPolicy: Always
          name: c1nd3r-webapp
          ports:
          - containerPort: 5000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-09-16T02:55:31Z"
      lastUpdateTime: "2024-09-16T03:03:54Z"
      message: ReplicaSet "c1nd3r-webapp-f599478db" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:05Z"
      lastUpdateTime: "2024-09-17T02:44:05Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.15.3"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.15.3"}},"spec":{"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system","--acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3","--max-concurrent-challenges=60"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-controller:v1.15.3","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":8,"httpGet":{"path":"/livez","port":"http-healthz","scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":15},"name":"cert-manager-controller","ports":[{"containerPort":9402,"name":"http-metrics","protocol":"TCP"},{"containerPort":9403,"name":"http-healthz","protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"enableServiceLinks":false,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cert-manager"}}}}
    creationTimestamp: "2024-08-20T04:32:39Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.15.3
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "8457"
    uid: 23f58265-8b53-4cf4-8a3d-ee8ca1d7a193
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.15.3
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
          - --max-concurrent-challenges=60
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.15.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:32:45Z"
      lastUpdateTime: "2024-08-20T04:32:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-20T04:32:39Z"
      lastUpdateTime: "2024-08-20T04:32:45Z"
      message: ReplicaSet "cert-manager-d894bbbd4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.15.3"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector"}},"template":{"metadata":{"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.15.3"}},"spec":{"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-cainjector:v1.15.3","imagePullPolicy":"IfNotPresent","name":"cert-manager-cainjector","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"enableServiceLinks":false,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cert-manager-cainjector"}}}}
    creationTimestamp: "2024-08-20T04:32:39Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.15.3
    name: cert-manager-cainjector
    namespace: cert-manager
    resourceVersion: "9685792"
    uid: 00830e31-98e3-4322-9327-2140637ab19a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.15.3
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.15.3
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:32:39Z"
      lastUpdateTime: "2024-08-20T04:32:45Z"
      message: ReplicaSet "cert-manager-cainjector-5fd6444f95" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:43:56Z"
      lastUpdateTime: "2024-09-17T02:43:56Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.15.3"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"}},"template":{"metadata":{"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.15.3"}},"spec":{"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook","--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)","--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-webhook:v1.15.3","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager-webhook","ports":[{"containerPort":10250,"name":"https","protocol":"TCP"},{"containerPort":6080,"name":"healthcheck","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"enableServiceLinks":false,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cert-manager-webhook"}}}}
    creationTimestamp: "2024-08-20T04:32:39Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.15.3
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "9686250"
    uid: ee6754e6-2acc-44ea-ad94-6ac766ea3ef6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.15.3
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.15.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:32:39Z"
      lastUpdateTime: "2024-08-20T04:32:54Z"
      message: ReplicaSet "cert-manager-webhook-869674f96f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:27Z"
      lastUpdateTime: "2024-09-17T02:44:27Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubevpn
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-28T09:29:42Z"
    generation: 3
    labels:
      app: kubevpn-traffic-manager
      app.kubernetes.io/instance: kubevpn
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubevpn
      app.kubernetes.io/version: v2.2.17
      helm.sh/chart: kubevpn-2.2.17
    name: kubevpn-traffic-manager
    namespace: default
    resourceVersion: "9686138"
    uid: e8be6430-d93c-4261-bd19-467f983764ce
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubevpn
        app.kubernetes.io/name: kubevpn
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubevpn-traffic-manager
          app.kubernetes.io/instance: kubevpn
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubevpn
          app.kubernetes.io/version: v2.2.17
          helm.sh/chart: kubevpn-2.2.17
      spec:
        containers:
        - args:
          - |2-

            sysctl -w net.ipv4.ip_forward=1
            sysctl -w net.ipv6.conf.all.disable_ipv6=0
            sysctl -w net.ipv6.conf.all.forwarding=1
            update-alternatives --set iptables /usr/sbin/iptables-legacy
            iptables -F
            ip6tables -F
            iptables -P INPUT ACCEPT
            ip6tables -P INPUT ACCEPT
            iptables -P FORWARD ACCEPT
            ip6tables -P FORWARD ACCEPT
            iptables -t nat -A POSTROUTING -s ${CIDR4} -o eth0 -j MASQUERADE
            ip6tables -t nat -A POSTROUTING -s ${CIDR6} -o eth0 -j MASQUERADE
            kubevpn serve -L "tcp://:10800" -L "tun://:8422?net=${TunIPv4}" -L "gtcp://:10801" -L "gudp://:10802" --debug=true
          command:
          - /bin/sh
          - -c
          env:
          - name: CIDR4
            value: 223.254.0.0/16
          - name: CIDR6
            value: efff:ffff:ffff:ffff::/64
          - name: TunIPv4
            value: 223.254.0.100/16
          - name: TunIPv6
            value: efff:ffff:ffff:ffff:ffff:ffff:ffff:9999/64
          envFrom:
          - secretRef:
              name: kubevpn-traffic-manager
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: vpn
          ports:
          - containerPort: 8422
            name: 8422-for-udp
            protocol: UDP
          - containerPort: 10800
            name: 10800-for-tcp
            protocol: TCP
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 512Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - control-plane
          - --watchDirectoryFilename
          - /etc/envoy/envoy-config.yaml
          command:
          - kubevpn
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: control-plane
          ports:
          - containerPort: 9002
            name: 9002-for-envoy
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/envoy
            name: envoy-config
            readOnly: true
        - args:
          - webhook
          command:
          - kubevpn
          envFrom:
          - secretRef:
              name: kubevpn-traffic-manager
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: webhook
          ports:
          - containerPort: 80
            name: 80-for-webhook
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubevpn-traffic-manager
        serviceAccountName: kubevpn-traffic-manager
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: ENVOY_CONFIG
              path: envoy-config.yaml
            name: kubevpn-traffic-manager
            optional: false
          name: envoy-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-28T09:29:42Z"
      lastUpdateTime: "2024-08-28T09:29:54Z"
      message: ReplicaSet "kubevpn-traffic-manager-6697f457c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:44:12Z"
      lastUpdateTime: "2024-09-17T02:44:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: kibana
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-08-27T06:59:12Z"
    generation: 2
    labels:
      app: kibana
      app.kubernetes.io/managed-by: Helm
      heritage: Helm
      release: kibana
    name: kibana-kibana
    namespace: efk
    resourceVersion: "10091099"
    uid: 7bf71496-cc81-45db-b2e7-3df24adb11ac
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kibana
        release: kibana
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T11:27:25+07:00"
        creationTimestamp: null
        labels:
          app: kibana
          release: kibana
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: ELASTICSEARCH_HOSTS
            value: https://elasticsearch-master:9200
          - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
            value: /usr/share/kibana/config/certs/ca.crt
          - name: SERVER_HOST
            value: 0.0.0.0
          - name: ELASTICSEARCH_SERVICEACCOUNTTOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: kibana-kibana-es-token
                optional: false
          - name: NODE_OPTIONS
            value: --max-old-space-size=1800
          image: docker.elastic.co/kibana/kibana:8.5.1
          imagePullPolicy: IfNotPresent
          name: kibana
          ports:
          - containerPort: 5601
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - |
                #!/usr/bin/env bash -e

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Kibana Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                    local path="${1}"
                    set -- -XGET -s --fail -L

                    if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                    fi

                    STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                    if [[ "${STATUS}" -eq 200 ]]; then
                      exit 0
                    fi

                    echo "Error: Got HTTP code ${STATUS} but expected a 200"
                    exit 1
                }

                http "/app/kibana"
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/kibana/config/certs
            name: elasticsearch-certs
            readOnly: true
          - mountPath: /usr/share/kibana/config/tokens
            name: kibana-tokens
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: kibana-tokens
        - name: elasticsearch-certs
          secret:
            defaultMode: 420
            secretName: elasticsearch-master-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-09-18T04:28:16Z"
      lastUpdateTime: "2024-09-18T04:28:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-27T06:59:12Z"
      lastUpdateTime: "2024-09-18T04:28:16Z"
      message: ReplicaSet "kibana-kibana-599764769b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: gitlab-runner
      meta.helm.sh/release-namespace: gitlab-runner
    creationTimestamp: "2024-09-11T08:10:14Z"
    generation: 1
    labels:
      app: gitlab-runner
      app.kubernetes.io/managed-by: Helm
      chart: gitlab-runner-0.68.1
      heritage: Helm
      release: gitlab-runner
    name: gitlab-runner
    namespace: gitlab-runner
    resourceVersion: "9686483"
    uid: 18d807f7-6eb9-4308-a393-60c528dc662c
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: gitlab-runner
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/configmap: 0338e47c77ee8d17153bd150ea273a62ad2cddcdaa4e1c7dd7afe75df41ec8c4
          checksum/secrets: 763d5e1555dda7f2b5e483869426ce8f2b0f10afff8e22ff4ed45eefa5c7d834
        creationTimestamp: null
        labels:
          app: gitlab-runner
          chart: gitlab-runner-0.68.1
          heritage: Helm
          release: gitlab-runner
      spec:
        containers:
        - command:
          - /usr/bin/dumb-init
          - --
          - /bin/bash
          - /configmaps/entrypoint
          env:
          - name: CI_SERVER_URL
            value: https://gitlab.com/
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: SESSION_SERVER_ADDRESS
          image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v17.3.1
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /entrypoint
                - unregister
                - --all-runners
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /configmaps/check-live
              - "3"
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 4
          name: gitlab-runner
          ports:
          - containerPort: 9252
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/bin/pgrep
              - gitlab.*runner
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 4
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secrets
            name: projected-secrets
          - mountPath: /home/gitlab-runner/.gitlab-runner
            name: etc-gitlab-runner
          - mountPath: /configmaps
            name: configmaps
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65533
          runAsUser: 100
        serviceAccount: gitlab-runner
        serviceAccountName: gitlab-runner
        terminationGracePeriodSeconds: 3600
        volumes:
        - emptyDir:
            medium: Memory
          name: runner-secrets
        - emptyDir:
            medium: Memory
          name: etc-gitlab-runner
        - name: projected-secrets
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: runner-registration-token
                  path: runner-registration-token
                - key: runner-token
                  path: runner-token
                name: gitlab-runner
        - configMap:
            defaultMode: 420
            name: gitlab-runner
          name: configmaps
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-09-11T08:10:14Z"
      lastUpdateTime: "2024-09-11T08:11:24Z"
      message: ReplicaSet "gitlab-runner-c4d4cbb6f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-17T02:45:12Z"
      lastUpdateTime: "2024-09-17T02:45:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "19"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-29T09:00:40Z"
    generation: 19
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "10181181"
    uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T17:10:34+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/ingress-controller/geoip
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-29T09:00:40Z"
      lastUpdateTime: "2024-08-29T09:00:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-09-17T09:42:55Z"
      lastUpdateTime: "2024-09-18T10:10:54Z"
      message: ReplicaSet "ingress-nginx-controller-65ff8b5689" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 19
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-22T07:49:57Z"
    generation: 1
    name: jenkins
    namespace: jenkins
    resourceVersion: "7088166"
    uid: ce36215f-d812-49a6-b425-1b1b9ab6884d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: jenkins-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: jenkins-server
      spec:
        containers:
        - image: jenkins/jenkins:lts
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: jenkins
          ports:
          - containerPort: 8080
            name: httpport
            protocol: TCP
          - containerPort: 50000
            name: jnlpport
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/jenkins_home
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        serviceAccount: jenkins-admin
        serviceAccountName: jenkins-admin
        terminationGracePeriodSeconds: 30
        volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-pv-claim
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-22T07:49:57Z"
      lastUpdateTime: "2024-08-22T07:50:58Z"
      message: ReplicaSet "jenkins-bf6b8d5fb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-10T04:13:58Z"
      lastUpdateTime: "2024-09-10T04:13:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    labels:
      k8s-app: calico-kube-controllers
    name: calico-kube-controllers
    namespace: kube-system
    resourceVersion: "683"
    uid: 02923fef-07ff-42fe-b3df-34033da4a8c0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
        name: calico-kube-controllers
        namespace: kube-system
      spec:
        containers:
        - env:
          - name: ENABLED_CONTROLLERS
            value: node
          - name: DATASTORE_TYPE
            value: kubernetes
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/kube-controllers:v3.26.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T03:52:06Z"
      lastUpdateTime: "2024-08-20T03:52:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-20T03:51:48Z"
      lastUpdateTime: "2024-08-20T03:52:06Z"
      message: ReplicaSet "calico-kube-controllers-69465c984b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:45Z"
    generation: 1
    labels:
      k8s-app: kube-dns
    name: coredns
    namespace: kube-system
    resourceVersion: "717"
    uid: 297db7d4-bbeb-48df-86e4-7ae972756714
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: registry.k8s.io/coredns/coredns:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-08-20T03:52:08Z"
      lastUpdateTime: "2024-08-20T03:52:08Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-20T03:51:45Z"
      lastUpdateTime: "2024-08-20T03:52:09Z"
      message: ReplicaSet "coredns-5dd5756b68" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    name: csi-cinder-controllerplugin
    namespace: kube-system
    resourceVersion: "2036"
    uid: daab6b8b-f057-4ecc-a026-eabab140a346
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-cinder-controllerplugin
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-cinder-controllerplugin
      spec:
        containers:
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --leader-election=true
          - --default-fstype=ext4
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-attacher:v4.2.0
          imagePullPolicy: IfNotPresent
          name: csi-attacher
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --default-fstype=ext4
          - --feature-gates=Topology=true
          - --extra-create-metadata
          - --leader-election=true
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-provisioner:v3.4.1
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --extra-create-metadata
          - --leader-election=true
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-snapshotter:v6.2.1
          imagePullPolicy: Always
          name: csi-snapshotter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --handle-volume-inuse-error=false
          - --leader-election=true
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-resizer:v1.8.0
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - /bin/cinder-csi-plugin
          - --endpoint=$(CSI_ENDPOINT)
          - --cloud-config=$(CLOUD_CONFIG)
          - --cluster=$(CLUSTER_NAME)
          - --v=1
          env:
          - name: CSI_ENDPOINT
            value: unix://csi/csi.sock
          - name: CLOUD_CONFIG
            value: /etc/config/cloud.conf
          - name: CLUSTER_NAME
            value: kubernetes
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          name: cinder-csi-plugin
          ports:
          - containerPort: 9808
            name: healthz
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /etc/config
            name: secret-cinderplugin
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: csi-cinder-controller-sa
        serviceAccountName: csi-cinder-controller-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: socket-dir
        - name: secret-cinderplugin
          secret:
            defaultMode: 420
            secretName: cloud-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:01:58Z"
      lastUpdateTime: "2024-08-20T04:01:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-20T04:01:58Z"
      lastUpdateTime: "2024-08-20T04:01:58Z"
      message: ReplicaSet "csi-cinder-controllerplugin-ffc6c59d6" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "2118"
    uid: def63c1f-2630-4ec6-8182-8f9217c8fdac
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=10250
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/metrics-server:v0.7.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-20T04:02:21Z"
      lastUpdateTime: "2024-08-20T04:02:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-20T04:02:21Z"
      lastUpdateTime: "2024-08-20T04:02:21Z"
      message: ReplicaSet "metrics-server-75fc49fd67" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nfs-provisioner-01
      meta.helm.sh/release-namespace: nfs-provisioner
    creationTimestamp: "2024-09-18T08:52:27Z"
    generation: 1
    labels:
      app: nfs-subdir-external-provisioner
      app.kubernetes.io/managed-by: Helm
      chart: nfs-subdir-external-provisioner-4.0.18
      heritage: Helm
      release: nfs-provisioner-01
    name: nfs-provisioner-01-nfs-subdir-external-provisioner
    namespace: nfs-provisioner
    resourceVersion: "10159754"
    uid: a98d370a-312d-4882-848b-ad9e7d2c9cda
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nfs-subdir-external-provisioner
        release: nfs-provisioner-01
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nfs-subdir-external-provisioner
          release: nfs-provisioner-01
      spec:
        containers:
        - env:
          - name: PROVISIONER_NAME
            value: cluster.local/nfs-provisioner-01-nfs-subdir-external-provisioner
          - name: NFS_SERVER
            value: 192.168.1.184
          - name: NFS_PATH
            value: /uit/nfs
          image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
          imagePullPolicy: IfNotPresent
          name: nfs-subdir-external-provisioner
          resources: {}
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /persistentvolumes
            name: nfs-subdir-external-provisioner-root
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nfs-provisioner-01-nfs-subdir-external-provisioner
        serviceAccountName: nfs-provisioner-01-nfs-subdir-external-provisioner
        terminationGracePeriodSeconds: 30
        volumes:
        - name: nfs-subdir-external-provisioner-root
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-09-18T08:52:29Z"
      lastUpdateTime: "2024-09-18T08:52:29Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-09-18T08:52:27Z"
      lastUpdateTime: "2024-09-18T08:52:29Z"
      message: ReplicaSet "nfs-provisioner-01-nfs-subdir-external-provisioner-8454b8b97b"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"pt-app"},"name":"pt-app-deployment","namespace":"pt-app"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"pt-app"}},"template":{"metadata":{"labels":{"app":"pt-app"}},"spec":{"containers":[{"envFrom":[{"secretRef":{"name":"dotfile-secret"}}],"image":"bupmangnon/hihi:v0","name":"pt-app","ports":[{"containerPort":3000}]}]}}}}
    creationTimestamp: "2024-08-22T03:50:08Z"
    generation: 6
    labels:
      app: pt-app
    name: pt-app-deployment
    namespace: pt-app
    resourceVersion: "3169123"
    uid: afbbac6e-7a26-44f7-8ef7-4d926fb43750
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pt-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-08-22T11:16:47+07:00"
        creationTimestamp: null
        labels:
          app: pt-app
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: dotfile-secret
          image: bupmangnon/hihi:v02
          imagePullPolicy: IfNotPresent
          name: pt-app
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-08-22T03:50:08Z"
      lastUpdateTime: "2024-08-29T07:15:13Z"
      message: ReplicaSet "pt-app-deployment-68d5f5484c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-08-30T15:49:03Z"
      lastUpdateTime: "2024-08-30T15:49:03Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 6
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "19"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"pt-app","app.kubernetes.io/instance":"pt-app"},"name":"pt-app--pt-app-deployment","namespace":"pt-app0"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"pt-app"}},"template":{"metadata":{"labels":{"app":"pt-app"}},"spec":{"containers":[{"envFrom":[{"secretRef":{"name":"dotfile-secret"}}],"image":"registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c","name":"pt-app","ports":[{"containerPort":3000}]}],"imagePullSecrets":[{"name":"pt-app-secret"}]}}}}
    creationTimestamp: "2024-09-06T04:33:35Z"
    generation: 19
    labels:
      app: pt-app
      app.kubernetes.io/instance: pt-app
    name: pt-app--pt-app-deployment
    namespace: pt-app0
    resourceVersion: "10380785"
    uid: fbbbff30-cf62-4aa1-94c9-c44512f5596d
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pt-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pt-app
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: dotfile-secret
          image: registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c
          imagePullPolicy: IfNotPresent
          name: pt-app
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: pt-app-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-09-06T04:33:35Z"
      lastUpdateTime: "2024-09-16T15:37:53Z"
      message: ReplicaSet "pt-app--pt-app-deployment-777b9c5d9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-18T22:53:15Z"
      lastUpdateTime: "2024-09-18T22:53:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 19
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-09-18T08:48:41Z"
    generation: 1
    labels:
      app: appad-web
      pod-template-hash: d5c7d656f
    name: bookstore-deployment-d5c7d656f
    namespace: adapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: bookstore-deployment
      uid: 80e21380-01d5-419a-b79a-1a4e8ad9f8e7
    resourceVersion: "10158937"
    uid: 6d65675b-e761-47e2-bfbf-d2e98085c55f
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: appad-web
        pod-template-hash: d5c7d656f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: appad-web
          pod-template-hash: d5c7d656f
      spec:
        containers:
        - image: registry.gitlab.com/pri-anhduong/cmc_intern/bookapp:ae4355a9
          imagePullPolicy: IfNotPresent
          name: appad
          ports:
          - containerPort: 5000
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: hna-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-applicationset-controller
      pod-template-hash: 687dcb446b
    name: argocd-applicationset-controller-687dcb446b
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-applicationset-controller
      uid: e1bf4f6e-4dd6-4549-a760-d941d26e56a6
    resourceVersion: "9685759"
    uid: e4a8eac7-f8ee-49a5-8451-0586e8d56a5c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-applicationset-controller
        pod-template-hash: 687dcb446b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-applicationset-controller
          pod-template-hash: 687dcb446b
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-applicationset-controller
          env:
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.annotations
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.global.preserved.labels
                name: argocd-cmd-params-cm
                optional: true
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.leader.election
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.policy.override
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.debug
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.dryrun
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.progressive.syncs
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.new.git.file.globbing
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.concurrent.reconciliations.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.scm.root.ca.path
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.allowed.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.webhook.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: argocd-applicationset-controller
          ports:
          - containerPort: 7000
            name: webhook
            protocol: TCP
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /tmp
            name: tmp
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-applicationset-controller
        serviceAccountName: argocd-applicationset-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-dex-server
      pod-template-hash: 6bd555b694
    name: argocd-dex-server-6bd555b694
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-dex-server
      uid: a91386c2-2c3d-4cad-b034-6d6af8e857d9
    resourceVersion: "9685936"
    uid: dba6d210-4cde-46db-adea-e09fb830339f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-dex-server
        pod-template-hash: 6bd555b694
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-dex-server
          pod-template-hash: 6bd555b694
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - command:
          - /shared/argocd-dex
          - rundex
          env:
          - name: ARGOCD_DEX_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: dexserver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          image: ghcr.io/dexidp/dex:v2.41.1
          imagePullPolicy: Always
          name: dex
          ports:
          - containerPort: 5556
            protocol: TCP
          - containerPort: 5557
            protocol: TCP
          - containerPort: 5558
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
          - mountPath: /tls
            name: argocd-dex-server-tls
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /shared/argocd-dex
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /shared
            name: static-files
          - mountPath: /tmp
            name: dexconfig
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-dex-server
        serviceAccountName: argocd-dex-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: static-files
        - emptyDir: {}
          name: dexconfig
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-notifications-controller
      pod-template-hash: 5f94cb7845
    name: argocd-notifications-controller-5f94cb7845
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-notifications-controller
      uid: c38a979e-82b7-4757-8207-e9c665428a9e
    resourceVersion: "10326802"
    uid: 7c2592d2-e7d4-4a56-899d-a2a3d5766100
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-notifications-controller
        pod-template-hash: 5f94cb7845
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-notifications-controller
          pod-template-hash: 5f94cb7845
      spec:
        containers:
        - args:
          - /usr/local/bin/argocd-notifications
          env:
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED
            valueFrom:
              configMapKeyRef:
                key: notificationscontroller.selfservice.enabled
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9001
            timeoutSeconds: 1
          name: argocd-notifications-controller
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          workingDir: /app
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-notifications-controller
        serviceAccountName: argocd-notifications-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-redis
      pod-template-hash: 854d54f6b
    name: argocd-redis-854d54f6b
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-redis
      uid: ad2dae35-6a13-40a9-82f0-819a0e30f716
    resourceVersion: "9686179"
    uid: 88abef87-1fbf-4873-8c31-6b44d825f513
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-redis
        pod-template-hash: 854d54f6b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-redis
          pod-template-hash: 854d54f6b
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-redis
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - --save
          - ""
          - --appendonly
          - "no"
          - --requirepass $(REDIS_PASSWORD)
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          image: redis:7.0.15-alpine
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - argocd
          - admin
          - redis-initial-password
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: IfNotPresent
          name: secret-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: argocd-redis
        serviceAccountName: argocd-redis
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-repo-server
      pod-template-hash: 87bccd956
    name: argocd-repo-server-87bccd956
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-repo-server
      uid: 7102ab2d-d2e4-4456-8e10-fe62a20b0098
    resourceVersion: "9686276"
    uid: 3cf2f152-cea1-4a97-b554-943d3620737b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-repo-server
        pod-template-hash: 87bccd956
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-repo-server
          pod-template-hash: 87bccd956
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-repo-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        automountServiceAccountToken: false
        containers:
        - args:
          - /usr/local/bin/argocd-repo-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: reposerver.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: reposerver.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_TLS
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: reposerver.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.repo.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: reposerver.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.max.combined.directory.manifests.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
            valueFrom:
              configMapKeyRef:
                key: reposerver.plugin.tar.exclusions
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
            valueFrom:
              configMapKeyRef:
                key: reposerver.allow.oob.symlinks
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.tar.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.streamed.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
            valueFrom:
              configMapKeyRef:
                key: reposerver.disable.helm.manifest.max.extracted.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.revision.cache.lock.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_MODULES_ENABLED
            valueFrom:
              configMapKeyRef:
                key: reposerver.enable.git.submodule
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.lsremote.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GIT_REQUEST_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: reposerver.git.request.timeout
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_GRPC_MAX_SIZE_MB
            valueFrom:
              configMapKeyRef:
                key: reposerver.grpc.max.size
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
            valueFrom:
              configMapKeyRef:
                key: reposerver.include.hidden.directories
                name: argocd-cmd-params-cm
                optional: true
          - name: HELM_CACHE_HOME
            value: /helm-working-dir
          - name: HELM_CONFIG_HOME
            value: /helm-working-dir
          - name: HELM_DATA_HOME
            value: /helm-working-dir
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            protocol: TCP
          - containerPort: 8084
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /tmp
            name: tmp
          - mountPath: /helm-working-dir
            name: helm-working-dir
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-repo-server
        serviceAccountName: argocd-repo-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: helm-working-dir
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/name: argocd-server
      pod-template-hash: 559586695d
    name: argocd-server-559586695d
    namespace: argocd
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-server
      uid: 7fa52082-7a0f-4340-95eb-78f30e5c255b
    resourceVersion: "9686049"
    uid: 8c0e6490-db73-4a01-adab-fd84e26f8453
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-server
        pod-template-hash: 559586695d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-server
          pod-template-hash: 559586695d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-server
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - /usr/local/bin/argocd-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_SERVER_INSECURE
            valueFrom:
              configMapKeyRef:
                key: server.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_BASEHREF
            valueFrom:
              configMapKeyRef:
                key: server.basehref
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ROOTPATH
            valueFrom:
              configMapKeyRef:
                key: server.rootpath
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: server.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                key: server.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER
            valueFrom:
              configMapKeyRef:
                key: server.dex.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DISABLE_AUTH
            valueFrom:
              configMapKeyRef:
                key: server.disable.auth
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_GZIP
            valueFrom:
              configMapKeyRef:
                key: server.enable.gzip
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_X_FRAME_OPTIONS
            valueFrom:
              configMapKeyRef:
                key: server.x.frame.options
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
            valueFrom:
              configMapKeyRef:
                key: server.content.security.policy
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: server.dex.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MIN_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.minversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_MAX_VERSION
            valueFrom:
              configMapKeyRef:
                key: server.tls.maxversion
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_TLS_CIPHERS
            valueFrom:
              configMapKeyRef:
                key: server.tls.ciphers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.connection.status.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.oidc.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.login.attempts.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_STATIC_ASSETS
            valueFrom:
              configMapKeyRef:
                key: server.staticassets
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.app.state.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: server.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_MAX_COOKIE_NUMBER
            valueFrom:
              configMapKeyRef:
                key: server.http.cookie.maxnumber
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: server.metrics.listen.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
            valueFrom:
              configMapKeyRef:
                key: server.enable.proxy.extension
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_MAX
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
            valueFrom:
              configMapKeyRef:
                key: server.k8sclient.retry.base.backoff
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_API_CONTENT_TYPES
            valueFrom:
              configMapKeyRef:
                key: server.api.content.types
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: server.webhook.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.new.git.file.globbing
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.scm.root.ca.path
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.allowed.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
            valueFrom:
              configMapKeyRef:
                key: applicationsetcontroller.enable.scm.providers
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz?full=true
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/dex/tls
            name: argocd-dex-server-tls
          - mountPath: /home/argocd
            name: plugins-home
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/params
            name: argocd-cmd-params-cm
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-server
        serviceAccountName: argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: plugins-home
        - emptyDir: {}
          name: tmp
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-dex-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-dex-server-tls
        - configMap:
            defaultMode: 420
            items:
            - key: server.profile.enabled
              path: profiler.enabled
            name: argocd-cmd-params-cm
            optional: true
          name: argocd-cmd-params-cm
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
    creationTimestamp: "2024-09-16T03:03:51Z"
    generation: 1
    labels:
      app: c1nd3r-app
      pod-template-hash: f599478db
    name: c1nd3r-webapp-f599478db
    namespace: c1nd3r
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: c1nd3r-webapp
      uid: 254127c8-3108-4eff-90c9-76087dfa7330
    resourceVersion: "9685891"
    uid: 90006aef-5dbf-4ab3-9420-7c2e5ce73e53
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: c1nd3r-app
        pod-template-hash: f599478db
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: c1nd3r-app
          pod-template-hash: f599478db
      spec:
        containers:
        - env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: DB_HOST
                name: c1nd3r-secret
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: DB_USER
                name: c1nd3r-secret
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DB_PASSWORD
                name: c1nd3r-secret
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: DB_DATABASE
                name: c1nd3r-secret
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                key: JWT_SECRET
                name: c1nd3r-secret
          - name: JWT_EXPIRES_IN
            valueFrom:
              secretKeyRef:
                key: JWT_EXPIRES_IN
                name: c1nd3r-secret
          - name: JWT_COOKIE_EXPIRES
            valueFrom:
              secretKeyRef:
                key: JWT_COOKIE_EXPIRES
                name: c1nd3r-secret
          image: hunger1607/c1nd3r-webapp:latest
          imagePullPolicy: Always
          name: c1nd3r-webapp
          ports:
          - containerPort: 5000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:32:39Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.15.3
      pod-template-hash: 5fd6444f95
    name: cert-manager-cainjector-5fd6444f95
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 00830e31-98e3-4322-9327-2140637ab19a
    resourceVersion: "9685791"
    uid: 3aa674d1-8ef1-41b1-b7c4-2e1ee29cec1a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 5fd6444f95
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.15.3
          pod-template-hash: 5fd6444f95
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.15.3
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:32:39Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.15.3
      pod-template-hash: d894bbbd4
    name: cert-manager-d894bbbd4
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 23f58265-8b53-4cf4-8a3d-ee8ca1d7a193
    resourceVersion: "8456"
    uid: 94e51dba-7d1f-490f-9e5e-b3a028335b22
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: d894bbbd4
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.15.3
          pod-template-hash: d894bbbd4
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.15.3
          - --max-concurrent-challenges=60
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.15.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T04:32:39Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.15.3
      pod-template-hash: 869674f96f
    name: cert-manager-webhook-869674f96f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: ee6754e6-2acc-44ea-ad94-6ac766ea3ef6
    resourceVersion: "9686249"
    uid: 47ae6880-da29-4fbc-978b-598cdb6b00f6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 869674f96f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.15.3
          pod-template-hash: 869674f96f
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.15.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubevpn
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-28T09:29:42Z"
    generation: 3
    labels:
      app: kubevpn-traffic-manager
      app.kubernetes.io/instance: kubevpn
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubevpn
      app.kubernetes.io/version: v2.2.17
      helm.sh/chart: kubevpn-2.2.17
      pod-template-hash: 6697f457c5
    name: kubevpn-traffic-manager-6697f457c5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubevpn-traffic-manager
      uid: e8be6430-d93c-4261-bd19-467f983764ce
    resourceVersion: "9686137"
    uid: a76c57c2-27a6-4040-8805-fc9d4b653f7a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubevpn
        app.kubernetes.io/name: kubevpn
        pod-template-hash: 6697f457c5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubevpn-traffic-manager
          app.kubernetes.io/instance: kubevpn
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubevpn
          app.kubernetes.io/version: v2.2.17
          helm.sh/chart: kubevpn-2.2.17
          pod-template-hash: 6697f457c5
      spec:
        containers:
        - args:
          - |2-

            sysctl -w net.ipv4.ip_forward=1
            sysctl -w net.ipv6.conf.all.disable_ipv6=0
            sysctl -w net.ipv6.conf.all.forwarding=1
            update-alternatives --set iptables /usr/sbin/iptables-legacy
            iptables -F
            ip6tables -F
            iptables -P INPUT ACCEPT
            ip6tables -P INPUT ACCEPT
            iptables -P FORWARD ACCEPT
            ip6tables -P FORWARD ACCEPT
            iptables -t nat -A POSTROUTING -s ${CIDR4} -o eth0 -j MASQUERADE
            ip6tables -t nat -A POSTROUTING -s ${CIDR6} -o eth0 -j MASQUERADE
            kubevpn serve -L "tcp://:10800" -L "tun://:8422?net=${TunIPv4}" -L "gtcp://:10801" -L "gudp://:10802" --debug=true
          command:
          - /bin/sh
          - -c
          env:
          - name: CIDR4
            value: 223.254.0.0/16
          - name: CIDR6
            value: efff:ffff:ffff:ffff::/64
          - name: TunIPv4
            value: 223.254.0.100/16
          - name: TunIPv6
            value: efff:ffff:ffff:ffff:ffff:ffff:ffff:9999/64
          envFrom:
          - secretRef:
              name: kubevpn-traffic-manager
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: vpn
          ports:
          - containerPort: 8422
            name: 8422-for-udp
            protocol: UDP
          - containerPort: 10800
            name: 10800-for-tcp
            protocol: TCP
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 512Mi
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - control-plane
          - --watchDirectoryFilename
          - /etc/envoy/envoy-config.yaml
          command:
          - kubevpn
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: control-plane
          ports:
          - containerPort: 9002
            name: 9002-for-envoy
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/envoy
            name: envoy-config
            readOnly: true
        - args:
          - webhook
          command:
          - kubevpn
          envFrom:
          - secretRef:
              name: kubevpn-traffic-manager
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: webhook
          ports:
          - containerPort: 80
            name: 80-for-webhook
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubevpn-traffic-manager
        serviceAccountName: kubevpn-traffic-manager
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: ENVOY_CONFIG
              path: envoy-config.yaml
            name: kubevpn-traffic-manager
            optional: false
          name: envoy-config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: kibana
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-09-18T04:27:25Z"
    generation: 1
    labels:
      app: kibana
      pod-template-hash: 599764769b
      release: kibana
    name: kibana-kibana-599764769b
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kibana-kibana
      uid: 7bf71496-cc81-45db-b2e7-3df24adb11ac
    resourceVersion: "10091098"
    uid: 56193e66-5e3d-45f2-bcd5-6dd4fe586bd4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kibana
        pod-template-hash: 599764769b
        release: kibana
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T11:27:25+07:00"
        creationTimestamp: null
        labels:
          app: kibana
          pod-template-hash: 599764769b
          release: kibana
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: ELASTICSEARCH_HOSTS
            value: https://elasticsearch-master:9200
          - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
            value: /usr/share/kibana/config/certs/ca.crt
          - name: SERVER_HOST
            value: 0.0.0.0
          - name: ELASTICSEARCH_SERVICEACCOUNTTOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: kibana-kibana-es-token
                optional: false
          - name: NODE_OPTIONS
            value: --max-old-space-size=1800
          image: docker.elastic.co/kibana/kibana:8.5.1
          imagePullPolicy: IfNotPresent
          name: kibana
          ports:
          - containerPort: 5601
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - |
                #!/usr/bin/env bash -e

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Kibana Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                    local path="${1}"
                    set -- -XGET -s --fail -L

                    if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                    fi

                    STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                    if [[ "${STATUS}" -eq 200 ]]; then
                      exit 0
                    fi

                    echo "Error: Got HTTP code ${STATUS} but expected a 200"
                    exit 1
                }

                http "/app/kibana"
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/kibana/config/certs
            name: elasticsearch-certs
            readOnly: true
          - mountPath: /usr/share/kibana/config/tokens
            name: kibana-tokens
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: kibana-tokens
        - name: elasticsearch-certs
          secret:
            defaultMode: 420
            secretName: elasticsearch-master-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kibana
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-08-27T06:59:12Z"
    generation: 2
    labels:
      app: kibana
      pod-template-hash: 8446b87c9f
      release: kibana
    name: kibana-kibana-8446b87c9f
    namespace: efk
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kibana-kibana
      uid: 7bf71496-cc81-45db-b2e7-3df24adb11ac
    resourceVersion: "10090844"
    uid: c68c526c-aac8-4635-9dd9-be3de07062d3
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: kibana
        pod-template-hash: 8446b87c9f
        release: kibana
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kibana
          pod-template-hash: 8446b87c9f
          release: kibana
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: ELASTICSEARCH_HOSTS
            value: https://elasticsearch-master:9200
          - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
            value: /usr/share/kibana/config/certs/ca.crt
          - name: SERVER_HOST
            value: 0.0.0.0
          - name: ELASTICSEARCH_SERVICEACCOUNTTOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: kibana-kibana-es-token
                optional: false
          - name: NODE_OPTIONS
            value: --max-old-space-size=1800
          image: docker.elastic.co/kibana/kibana:8.5.1
          imagePullPolicy: IfNotPresent
          name: kibana
          ports:
          - containerPort: 5601
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - |
                #!/usr/bin/env bash -e

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Kibana Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                    local path="${1}"
                    set -- -XGET -s --fail -L

                    if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                    fi

                    STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                    if [[ "${STATUS}" -eq 200 ]]; then
                      exit 0
                    fi

                    echo "Error: Got HTTP code ${STATUS} but expected a 200"
                    exit 1
                }

                http "/app/kibana"
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/kibana/config/certs
            name: elasticsearch-certs
            readOnly: true
          - mountPath: /usr/share/kibana/config/tokens
            name: kibana-tokens
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: kibana-tokens
        - name: elasticsearch-certs
          secret:
            defaultMode: 420
            secretName: elasticsearch-master-certs
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: gitlab-runner
      meta.helm.sh/release-namespace: gitlab-runner
    creationTimestamp: "2024-09-11T08:10:14Z"
    generation: 1
    labels:
      app: gitlab-runner
      chart: gitlab-runner-0.68.1
      heritage: Helm
      pod-template-hash: c4d4cbb6f
      release: gitlab-runner
    name: gitlab-runner-c4d4cbb6f
    namespace: gitlab-runner
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: gitlab-runner
      uid: 18d807f7-6eb9-4308-a393-60c528dc662c
    resourceVersion: "9686482"
    uid: 42acdd89-7f79-4f2c-a978-203582bb5119
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: gitlab-runner
        pod-template-hash: c4d4cbb6f
    template:
      metadata:
        annotations:
          checksum/configmap: 0338e47c77ee8d17153bd150ea273a62ad2cddcdaa4e1c7dd7afe75df41ec8c4
          checksum/secrets: 763d5e1555dda7f2b5e483869426ce8f2b0f10afff8e22ff4ed45eefa5c7d834
        creationTimestamp: null
        labels:
          app: gitlab-runner
          chart: gitlab-runner-0.68.1
          heritage: Helm
          pod-template-hash: c4d4cbb6f
          release: gitlab-runner
      spec:
        containers:
        - command:
          - /usr/bin/dumb-init
          - --
          - /bin/bash
          - /configmaps/entrypoint
          env:
          - name: CI_SERVER_URL
            value: https://gitlab.com/
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: SESSION_SERVER_ADDRESS
          image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v17.3.1
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /entrypoint
                - unregister
                - --all-runners
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /configmaps/check-live
              - "3"
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 4
          name: gitlab-runner
          ports:
          - containerPort: 9252
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/bin/pgrep
              - gitlab.*runner
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 4
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secrets
            name: projected-secrets
          - mountPath: /home/gitlab-runner/.gitlab-runner
            name: etc-gitlab-runner
          - mountPath: /configmaps
            name: configmaps
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65533
          runAsUser: 100
        serviceAccount: gitlab-runner
        serviceAccountName: gitlab-runner
        terminationGracePeriodSeconds: 3600
        volumes:
        - emptyDir:
            medium: Memory
          name: runner-secrets
        - emptyDir:
            medium: Memory
          name: etc-gitlab-runner
        - name: projected-secrets
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: runner-registration-token
                  path: runner-registration-token
                - key: runner-token
                  path: runner-token
                name: gitlab-runner
        - configMap:
            defaultMode: 420
            name: gitlab-runner
          name: configmaps
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "17"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:50:12Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 585dcb7b7b
    name: ingress-nginx-controller-585dcb7b7b
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10176699"
    uid: e46e0a7b-34a9-4f65-99d5-6cde71e97564
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 585dcb7b7b
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:50:12+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 585dcb7b7b
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/ingress-controller/geoip
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "16"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:29:50Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 587f988c54
    name: ingress-nginx-controller-587f988c54
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10175389"
    uid: 934797ce-2cd1-4b67-ab8a-6e8a1cba319d
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 587f988c54
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:29:50+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 587f988c54
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/ingress-controller/geoip
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "14"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:20:00Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 5cb8f8f455
    name: ingress-nginx-controller-5cb8f8f455
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10168482"
    uid: b0b69ea6-ec0e-4a41-8628-4ef4a2edf781
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 5cb8f8f455
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:20:00+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 5cb8f8f455
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/nginx/geoip/
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "13"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:19:14Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 5fd85c4f9b
    name: ingress-nginx-controller-5fd85c4f9b
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10167339"
    uid: 692aa89b-1878-4d57-ae38-568ef183b8af
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 5fd85c4f9b
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:19:14+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 5fd85c4f9b
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/nginx/geoip/
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "19"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T10:10:34Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 65ff8b5689
    name: ingress-nginx-controller-65ff8b5689
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10181180"
    uid: 44c51738-607a-48af-be18-4baeaae15edf
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 65ff8b5689
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T17:10:34+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 65ff8b5689
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/ingress-controller/geoip
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "11"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:14:43Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 6f56b55c67
    name: ingress-nginx-controller-6f56b55c67
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10166438"
    uid: d6b7d7ec-f36e-4c12-80e6-8ba3392e5a21
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 6f56b55c67
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:14:43+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 6f56b55c67
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/nginx/geoip/
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "15"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:24:05Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 6f98db4ff4
    name: ingress-nginx-controller-6f98db4ff4
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10170038"
    uid: b787d8fd-c01b-4d81-aa7e-e5c3f3fd610f
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 6f98db4ff4
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:20:00+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 6f98db4ff4
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/ingress-controller/geoip
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "9"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T06:32:28Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 748894d858
    name: ingress-nginx-controller-748894d858
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10161417"
    uid: 1321fb82-1683-45a9-9b35-008e2e250343
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 748894d858
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T13:32:28+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 748894d858
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/nginx/geoip/
            name: geoip-storage
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip-storage
          persistentVolumeClaim:
            claimName: geoip-pvc
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "12"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:17:01Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 7bd7d75bfb
    name: ingress-nginx-controller-7bd7d75bfb
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10167074"
    uid: d1123a99-6f44-4f94-ba67-e1970c60607e
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 7bd7d75bfb
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:17:01+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 7bd7d75bfb
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/nginx/geoip/
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "10"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T08:58:49Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: 9f76fb9f
    name: ingress-nginx-controller-9f76fb9f
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10165624"
    uid: c6d4ce13-083e-4526-924d-c84f469cd5e4
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 9f76fb9f
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T13:32:28+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: 9f76fb9f
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/nginx/geoip/
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "18"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-18T09:54:05Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
      pod-template-hash: ddb5b6444
    name: ingress-nginx-controller-ddb5b6444
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: c080b1f3-1dfa-4ec3-bce5-f21dcc04632a
    resourceVersion: "10181054"
    uid: cee44ac2-b3fe-4849-a990-62eb361de531
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: ddb5b6444
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-09-18T16:54:05+07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          pod-template-hash: ddb5b6444
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
          - mountPath: /etc/ingress-controller/geoip
            name: geoip
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
        - name: geoip
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-22T07:49:57Z"
    generation: 1
    labels:
      app: jenkins-server
      pod-template-hash: bf6b8d5fb
    name: jenkins-bf6b8d5fb
    namespace: jenkins
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: jenkins
      uid: ce36215f-d812-49a6-b425-1b1b9ab6884d
    resourceVersion: "7088165"
    uid: 0b2a0bab-9bb3-467f-8b06-660874c0a204
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: jenkins-server
        pod-template-hash: bf6b8d5fb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: jenkins-server
          pod-template-hash: bf6b8d5fb
      spec:
        containers:
        - image: jenkins/jenkins:lts
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: jenkins
          ports:
          - containerPort: 8080
            name: httpport
            protocol: TCP
          - containerPort: 50000
            name: jnlpport
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/jenkins_home
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        serviceAccount: jenkins-admin
        serviceAccountName: jenkins-admin
        terminationGracePeriodSeconds: 30
        volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-pv-claim
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    labels:
      k8s-app: calico-kube-controllers
      pod-template-hash: 69465c984b
    name: calico-kube-controllers-69465c984b
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: calico-kube-controllers
      uid: 02923fef-07ff-42fe-b3df-34033da4a8c0
    resourceVersion: "682"
    uid: 38924f2f-f010-48d7-a5b5-b5caf01a767e
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
        pod-template-hash: 69465c984b
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
          pod-template-hash: 69465c984b
        name: calico-kube-controllers
        namespace: kube-system
      spec:
        containers:
        - env:
          - name: ENABLED_CONTROLLERS
            value: node
          - name: DATASTORE_TYPE
            value: kubernetes
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/calico/kube-controllers:v3.26.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:45Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: 5dd5756b68
    name: coredns-5dd5756b68
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 297db7d4-bbeb-48df-86e4-7ae972756714
    resourceVersion: "716"
    uid: 35da1839-ea38-4c02-a3b8-f78aee25cba5
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 5dd5756b68
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 5dd5756b68
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: registry.k8s.io/coredns/coredns:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    labels:
      app: csi-cinder-controllerplugin
      pod-template-hash: ffc6c59d6
    name: csi-cinder-controllerplugin-ffc6c59d6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: csi-cinder-controllerplugin
      uid: daab6b8b-f057-4ecc-a026-eabab140a346
    resourceVersion: "2035"
    uid: 0a2041ff-bf0e-4079-9ff5-193321f3c9f3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: csi-cinder-controllerplugin
        pod-template-hash: ffc6c59d6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-cinder-controllerplugin
          pod-template-hash: ffc6c59d6
      spec:
        containers:
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --leader-election=true
          - --default-fstype=ext4
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-attacher:v4.2.0
          imagePullPolicy: IfNotPresent
          name: csi-attacher
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --default-fstype=ext4
          - --feature-gates=Topology=true
          - --extra-create-metadata
          - --leader-election=true
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-provisioner:v3.4.1
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --extra-create-metadata
          - --leader-election=true
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-snapshotter:v6.2.1
          imagePullPolicy: Always
          name: csi-snapshotter
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --timeout=3m
          - --handle-volume-inuse-error=false
          - --leader-election=true
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/csi-resizer:v1.8.0
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          env:
          - name: ADDRESS
            value: /var/lib/csi/sockets/pluginproxy/csi.sock
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/livenessprobe:v2.9.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/csi/sockets/pluginproxy/
            name: socket-dir
        - args:
          - /bin/cinder-csi-plugin
          - --endpoint=$(CSI_ENDPOINT)
          - --cloud-config=$(CLOUD_CONFIG)
          - --cluster=$(CLUSTER_NAME)
          - --v=1
          env:
          - name: CSI_ENDPOINT
            value: unix://csi/csi.sock
          - name: CLOUD_CONFIG
            value: /etc/config/cloud.conf
          - name: CLUSTER_NAME
            value: kubernetes
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/cinder-csi-plugin:v1.28.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          name: cinder-csi-plugin
          ports:
          - containerPort: 9808
            name: healthz
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /etc/config
            name: secret-cinderplugin
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: csi-cinder-controller-sa
        serviceAccountName: csi-cinder-controller-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: socket-dir
        - name: secret-cinderplugin
          secret:
            defaultMode: 420
            secretName: cloud-config
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-20T03:51:48Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: 75fc49fd67
    name: metrics-server-75fc49fd67
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: def63c1f-2630-4ec6-8182-8f9217c8fdac
    resourceVersion: "2116"
    uid: 1a8ad46e-528f-4259-bb27-dd33bb9ad5e4
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 75fc49fd67
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 75fc49fd67
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=10250
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls
          image: registry1.cloud.cmctelecom.vn/cmck8sv2/metrics-server:v0.7.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nfs-provisioner-01
      meta.helm.sh/release-namespace: nfs-provisioner
    creationTimestamp: "2024-09-18T08:52:27Z"
    generation: 1
    labels:
      app: nfs-subdir-external-provisioner
      pod-template-hash: 8454b8b97b
      release: nfs-provisioner-01
    name: nfs-provisioner-01-nfs-subdir-external-provisioner-8454b8b97b
    namespace: nfs-provisioner
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nfs-provisioner-01-nfs-subdir-external-provisioner
      uid: a98d370a-312d-4882-848b-ad9e7d2c9cda
    resourceVersion: "10159753"
    uid: b1794b94-aed7-496c-8567-db5b9f4a3f4f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nfs-subdir-external-provisioner
        pod-template-hash: 8454b8b97b
        release: nfs-provisioner-01
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nfs-subdir-external-provisioner
          pod-template-hash: 8454b8b97b
          release: nfs-provisioner-01
      spec:
        containers:
        - env:
          - name: PROVISIONER_NAME
            value: cluster.local/nfs-provisioner-01-nfs-subdir-external-provisioner
          - name: NFS_SERVER
            value: 192.168.1.184
          - name: NFS_PATH
            value: /uit/nfs
          image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
          imagePullPolicy: IfNotPresent
          name: nfs-subdir-external-provisioner
          resources: {}
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /persistentvolumes
            name: nfs-subdir-external-provisioner-root
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nfs-provisioner-01-nfs-subdir-external-provisioner
        serviceAccountName: nfs-provisioner-01-nfs-subdir-external-provisioner
        terminationGracePeriodSeconds: 30
        volumes:
        - name: nfs-subdir-external-provisioner-root
          nfs:
            path: /uit/nfs
            server: 192.168.1.184
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "5"
    creationTimestamp: "2024-08-29T07:14:49Z"
    generation: 3
    labels:
      app: pt-app
      pod-template-hash: 68d5f5484c
    name: pt-app-deployment-68d5f5484c
    namespace: pt-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: pt-app-deployment
      uid: afbbac6e-7a26-44f7-8ef7-4d926fb43750
    resourceVersion: "3169122"
    uid: ad117a40-272b-4a98-9843-59360af1b8f8
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: pt-app
        pod-template-hash: 68d5f5484c
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-08-22T11:16:47+07:00"
        creationTimestamp: null
        labels:
          app: pt-app
          pod-template-hash: 68d5f5484c
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: dotfile-secret
          image: bupmangnon/hihi:v02
          imagePullPolicy: IfNotPresent
          name: pt-app
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 3
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "19"
    creationTimestamp: "2024-09-16T15:37:26Z"
    generation: 2
    labels:
      app: pt-app
      pod-template-hash: 777b9c5d9
    name: pt-app--pt-app-deployment-777b9c5d9
    namespace: pt-app0
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: pt-app--pt-app-deployment
      uid: fbbbff30-cf62-4aa1-94c9-c44512f5596d
    resourceVersion: "10380784"
    uid: 892fff31-3b13-452d-9a07-78acfbe9b25b
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: pt-app
        pod-template-hash: 777b9c5d9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pt-app
          pod-template-hash: 777b9c5d9
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: dotfile-secret
          image: registry.gitlab.com/bupmangnon00/hello/login_app:62225a3c
          imagePullPolicy: IfNotPresent
          name: pt-app
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: pt-app-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2024-08-20T04:27:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: application-controller
      app.kubernetes.io/name: argocd-application-controller
      app.kubernetes.io/part-of: argocd
    name: argocd-application-controller
    namespace: argocd
    resourceVersion: "9686281"
    uid: fc1b02e4-c18e-4c4c-b5c9-92cb9adab92f
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: argocd-application-controller
    serviceName: argocd-application-controller
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: argocd-application-controller
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-application-controller
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - args:
          - /usr/local/bin/argocd-application-controller
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: auth
                name: argocd-redis
          - name: ARGOCD_CONTROLLER_REPLICAS
            value: "1"
          - name: ARGOCD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: timeout.hard.reconciliation
                name: argocd-cm
                optional: true
          - name: ARGOCD_RECONCILIATION_JITTER
            valueFrom:
              configMapKeyRef:
                key: timeout.reconciliation.jitter
                name: argocd-cm
                optional: true
          - name: ARGOCD_REPO_ERROR_GRACE_PERIOD_SECONDS
            valueFrom:
              configMapKeyRef:
                key: controller.repo.error.grace.period.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                key: repo.server
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: controller.repo.server.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
            valueFrom:
              configMapKeyRef:
                key: controller.status.processors
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
            valueFrom:
              configMapKeyRef:
                key: controller.operation.processors
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                key: controller.log.format
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
            valueFrom:
              configMapKeyRef:
                key: controller.log.level
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: controller.metrics.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                key: controller.self.heal.timeout.seconds
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                key: controller.repo.server.plaintext
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
            valueFrom:
              configMapKeyRef:
                key: controller.repo.server.strict.tls
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH
            valueFrom:
              configMapKeyRef:
                key: controller.resource.health.persist
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: controller.app.state.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                key: redis.server
                name: argocd-cmd-params-cm
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                key: redis.compression
                name: argocd-cmd-params-cm
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                key: redis.db
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
            valueFrom:
              configMapKeyRef:
                key: controller.default.cache.expiration
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: otlp.address
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_INSECURE
            valueFrom:
              configMapKeyRef:
                key: otlp.insecure
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_HEADERS
            valueFrom:
              configMapKeyRef:
                key: otlp.headers
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_NAMESPACES
            valueFrom:
              configMapKeyRef:
                key: application.namespaces
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_CONTROLLER_SHARDING_ALGORITHM
            valueFrom:
              configMapKeyRef:
                key: controller.sharding.algorithm
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT
            valueFrom:
              configMapKeyRef:
                key: controller.kubectl.parallelism.limit
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_MAX
            valueFrom:
              configMapKeyRef:
                key: controller.k8sclient.retry.max
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
            valueFrom:
              configMapKeyRef:
                key: controller.k8sclient.retry.base.backoff
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_APPLICATION_CONTROLLER_SERVER_SIDE_DIFF
            valueFrom:
              configMapKeyRef:
                key: controller.diff.server.side
                name: argocd-cmd-params-cm
                optional: true
          - name: ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: controller.ignore.normalizer.jq.timeout
                name: argocd-cmd-params-cm
                optional: true
          image: quay.io/argoproj/argocd:latest
          imagePullPolicy: Always
          name: argocd-application-controller
          ports:
          - containerPort: 8082
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/controller/tls
            name: argocd-repo-server-tls
          - mountPath: /home/argocd
            name: argocd-home
          - mountPath: /home/argocd/params
            name: argocd-cmd-params-cm
          workingDir: /home/argocd
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: argocd-application-controller
        serviceAccountName: argocd-application-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: argocd-home
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - configMap:
            defaultMode: 420
            items:
            - key: controller.profile.enabled
              path: profiler.enabled
            name: argocd-cmd-params-cm
            optional: true
          name: argocd-cmd-params-cm
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: argocd-application-controller-69d5fbfd85
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: argocd-application-controller-69d5fbfd85
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: my-release
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-09-06T07:20:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: node
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/version: 7.4.0
      helm.sh/chart: redis-20.0.5
    name: my-release-redis-node
    namespace: default
    resourceVersion: "5645768"
    uid: e57ab55e-81d7-4b1a-9240-9d76cdcb11a4
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: node
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/name: redis
    serviceName: my-release-redis-headless
    template:
      metadata:
        annotations:
          checksum/configmap: db4433f92b88ac1d21d468d68567e2f1d650c621e29f807942a80452899bb240
          checksum/health: 1eace71641fb5bd753e90012419e82c10b1180d694f91d83743b727a5aacca73
          checksum/scripts: 83322e11cf597dc1882546fda61e298abb85b564f4b01ece2d2a4b8bafda377b
          checksum/secret: ecc318c34fad41cacd39ec6e02e8826ff866b145ec822af158ba8114561c5658
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: node
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: redis
          app.kubernetes.io/version: 7.4.0
          helm.sh/chart: redis-20.0.5
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: node
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                topologyKey: kubernetes.io/hostname
              weight: 1
        automountServiceAccountToken: false
        containers:
        - args:
          - -c
          - /opt/bitnami/scripts/start-scripts/start-node.sh
          command:
          - /bin/bash
          env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: REDIS_MASTER_PORT_NUMBER
            value: "6379"
          - name: ALLOW_EMPTY_PASSWORD
            value: "no"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: my-release-redis
          - name: REDIS_MASTER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: my-release-redis
          - name: REDIS_TLS_ENABLED
            value: "no"
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_SENTINEL_TLS_ENABLED
            value: "no"
          - name: REDIS_SENTINEL_PORT
            value: "26379"
          - name: REDIS_DATA_DIR
            value: /data
          image: docker.io/bitnami/redis:7.4.0-debian-12-r2
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/bitnami/scripts/start-scripts/prestop-redis.sh
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_liveness_local.sh 5
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_readiness_local.sh 1
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_liveness_local.sh 5
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/scripts/start-scripts
            name: start-scripts
          - mountPath: /health
            name: health
          - mountPath: /opt/bitnami/redis-sentinel/etc
            name: sentinel-data
          - mountPath: /data
            name: redis-data
          - mountPath: /opt/bitnami/redis/mounted-etc
            name: config
          - mountPath: /opt/bitnami/redis/etc
            name: empty-dir
            subPath: app-conf-dir
          - mountPath: /tmp
            name: empty-dir
            subPath: tmp-dir
        - args:
          - -c
          - /opt/bitnami/scripts/start-scripts/start-sentinel.sh
          command:
          - /bin/bash
          env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: my-release-redis
          - name: REDIS_SENTINEL_TLS_ENABLED
            value: "no"
          - name: REDIS_SENTINEL_PORT
            value: "26379"
          image: docker.io/bitnami/redis-sentinel:7.4.0-debian-12-r1
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/bitnami/scripts/start-scripts/prestop-sentinel.sh
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_sentinel.sh 5
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sentinel
          ports:
          - containerPort: 26379
            name: redis-sentinel
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_sentinel.sh 1
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_sentinel.sh 5
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: empty-dir
            subPath: tmp-dir
          - mountPath: /opt/bitnami/scripts/start-scripts
            name: start-scripts
          - mountPath: /health
            name: health
          - mountPath: /opt/bitnami/redis-sentinel/etc
            name: sentinel-data
          - mountPath: /data
            name: redis-data
          - mountPath: /opt/bitnami/redis-sentinel/mounted-etc
            name: config
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          fsGroupChangePolicy: Always
        serviceAccount: my-release-redis
        serviceAccountName: my-release-redis
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 493
            name: my-release-redis-scripts
          name: start-scripts
        - configMap:
            defaultMode: 493
            name: my-release-redis-health
          name: health
        - configMap:
            defaultMode: 420
            name: my-release-redis-configuration
          name: config
        - emptyDir: {}
          name: sentinel-data
        - emptyDir: {}
          name: empty-dir
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: node
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: redis
        name: redis-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 0
    collisionCount: 0
    currentReplicas: 1
    currentRevision: my-release-redis-node-657c8dc95d
    observedGeneration: 1
    replicas: 1
    updateRevision: my-release-redis-node-657c8dc95d
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      esMajorVersion: "8"
      meta.helm.sh/release-name: elasticsearch
      meta.helm.sh/release-namespace: efk
    creationTimestamp: "2024-08-27T06:32:13Z"
    generation: 3
    labels:
      app: elasticsearch-master
      app.kubernetes.io/managed-by: Helm
      chart: elasticsearch
      heritage: Helm
      release: elasticsearch
    name: elasticsearch-master
    namespace: efk
    resourceVersion: "10090488"
    uid: 9f112f6a-6da1-4e71-80e1-df0ad5566aa3
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: elasticsearch-master
    serviceName: elasticsearch-master-headless
    template:
      metadata:
        annotations:
          configchecksum: 09c9d8915c54f4267b1f97366172b6ca7bfa6f0f668343d48f675f2113dea8e
        creationTimestamp: null
        labels:
          app: elasticsearch-master
          chart: elasticsearch
          release: elasticsearch
        name: elasticsearch-master
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - elasticsearch-master
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - env:
          - name: node.name
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,
          - name: node.roles
            value: master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,
          - name: discovery.seed_hosts
            value: elasticsearch-master-headless
          - name: cluster.name
            value: elasticsearch
          - name: network.host
            value: 0.0.0.0
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: elasticsearch-master-credentials
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: certificate
          - name: xpack.security.transport.ssl.key
            value: /usr/share/elasticsearch/config/certs/tls.key
          - name: xpack.security.transport.ssl.certificate
            value: /usr/share/elasticsearch/config/certs/tls.crt
          - name: xpack.security.transport.ssl.certificate_authorities
            value: /usr/share/elasticsearch/config/certs/ca.crt
          - name: xpack.security.http.ssl.key
            value: /usr/share/elasticsearch/config/certs/tls.key
          - name: xpack.security.http.ssl.certificate
            value: /usr/share/elasticsearch/config/certs/tls.crt
          - name: xpack.security.http.ssl.certificate_authorities
            value: /usr/share/elasticsearch/config/certs/ca.crt
          image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
          imagePullPolicy: IfNotPresent
          name: elasticsearch
          ports:
          - containerPort: 9200
            name: http
            protocol: TCP
          - containerPort: 9300
            name: transport
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-master
          - mountPath: /usr/share/elasticsearch/config/certs
            name: elasticsearch-certs
            readOnly: true
          - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
            name: esconfig
            subPath: elasticsearch.yml
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        initContainers:
        - command:
          - sysctl
          - -w
          - vm.max_map_count=262144
          image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
          imagePullPolicy: IfNotPresent
          name: configure-sysctl
          resources: {}
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            defaultMode: 420
            name: elasticsearch-master-config
          name: esconfig
        - name: elasticsearch-certs
          secret:
            defaultMode: 420
            secretName: elasticsearch-master-certs
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        labels:
          app: elasticsearch-master
          chart: elasticsearch
          release: elasticsearch
        name: elasticsearch-master
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
        storageClassName: highio-hn-az3
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 3
    collisionCount: 0
    currentReplicas: 3
    currentRevision: elasticsearch-master-846cb8ff77
    observedGeneration: 3
    readyReplicas: 3
    replicas: 3
    updateRevision: elasticsearch-master-846cb8ff77
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2024-09-18T07:51:11Z"
    generation: 1
    labels:
      app: minisys
      app.kubernetes.io/instance: minisys
    name: minisys
    namespace: minisys
    resourceVersion: "10144271"
    uid: 9a616daf-4e71-4e35-9e61-ae14619c8763
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: minisys
    serviceName: ""
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: minisys
      spec:
        containers:
        - envFrom:
          - secretRef:
              name: rds-mysql-secret
          image: nhqhub/minisys:2024-09-16_15-56-40
          imagePullPolicy: IfNotPresent
          name: minisys-container
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 2
    collisionCount: 0
    currentReplicas: 2
    currentRevision: minisys-867c967c56
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updateRevision: minisys-867c967c56
    updatedReplicas: 2
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-delete-policy: before-hook-creation
    creationTimestamp: "2024-08-28T09:29:42Z"
    generation: 1
    labels:
      app: kubevpn-traffic-manager
      app.kubernetes.io/instance: kubevpn
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubevpn
      app.kubernetes.io/version: v2.2.17
      helm.sh/chart: kubevpn-2.2.17
    name: kubevpn-traffic-manager
    namespace: default
    resourceVersion: "2331174"
    uid: 7e898449-d09b-4323-8fa8-12ee9a3223b1
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 7e898449-d09b-4323-8fa8-12ee9a3223b1
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kubevpn-traffic-manager
          app.kubernetes.io/instance: kubevpn
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubevpn
          app.kubernetes.io/version: v2.2.17
          batch.kubernetes.io/controller-uid: 7e898449-d09b-4323-8fa8-12ee9a3223b1
          batch.kubernetes.io/job-name: kubevpn-traffic-manager
          controller-uid: 7e898449-d09b-4323-8fa8-12ee9a3223b1
          helm.sh/chart: kubevpn-2.2.17
          job-name: kubevpn-traffic-manager
      spec:
        containers:
        - args:
          - |2-

            echo "Label namespace default"
            kubectl label ns default ns=default

            echo "Generating https certificate"
            openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -subj "/CN=kubevpn-traffic-manager.default.svc" -addext "subjectAltName=DNS:kubevpn-traffic-manager.default.svc.cluster.local,DNS:kubevpn-traffic-manager.default.svc" -keyout server.key -out server.crt

            export TLS_CRT=$(cat server.crt | base64 | tr -d '\n')
            echo "Patch mutatingwebhookconfigurations kubevpn-traffic-manager.default"
            kubectl patch mutatingwebhookconfigurations kubevpn-traffic-manager.default -p "{\"webhooks\":[{\"name\":\"kubevpn-traffic-manager.naison.io\",\"sideEffects\":\"None\",\"admissionReviewVersions\":[\"v1\", \"v1beta1\"],\"clientConfig\":{\"service\":{\"namespace\":\"default\",\"name\":\"kubevpn-traffic-manager\"},\"caBundle\":\"$TLS_CRT\"}}]}"

            export TLS_KEY=$(cat server.key | base64 | tr -d '\n')
            echo "Patch secret kubevpn-traffic-manager"
            kubectl patch secret kubevpn-traffic-manager -n default -p "{\"data\":{\"tls_key\":\"$TLS_KEY\",\"tls_crt\":\"$TLS_CRT\"}}"

            echo "Restart the pods..."
            kubectl scale -n default --replicas=0 deployment/kubevpn-traffic-manager
            kubectl scale -n default --replicas=1 deployment/kubevpn-traffic-manager

            export POOLS=$(kubectl get cm kubevpn-traffic-manager -n default -o jsonpath='{.data.IPv4_POOLS}')
            if [[ -z "${POOLS// }" ]];then
              echo "Cidr is empty"
              echo "Get pod cidr..."
              export POD_CIDR=$(kubectl get nodes -o jsonpath='{.items[*].spec.podCIDR}' | tr -s '\n' ' ')
              echo "Get service cidr..."
              export SVC_CIDR=$(echo '{"apiVersion":"v1","kind":"Service","metadata":{"name":"kubevpn-get-svc-cidr-default", "namespace": "default"},"spec":{"clusterIP":"1.1.1.1","ports":[{"port":443}]}}' | kubectl apply -f - 2>&1 | sed 's/.*valid IPs is //')
              echo "Pod cidr: $POD_CIDR, service cidr: $SVC_CIDR"
              echo "Patch configmap kubevpn-traffic-manager"
              kubectl patch configmap kubevpn-traffic-manager -n default -p "{\"data\":{\"IPv4_POOLS\":\"$POD_CIDR $SVC_CIDR\"}}"
            else
              echo "Cidr is NOT empty"
            fi

            echo "Done~"
            exit 0
          command:
          - /bin/bash
          - -c
          image: naison/kubevpn:v2.2.17
          imagePullPolicy: IfNotPresent
          name: label-ns
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubevpn-traffic-manager
        serviceAccountName: kubevpn-traffic-manager
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2024-08-28T09:29:57Z"
    conditions:
    - lastProbeTime: "2024-08-28T09:29:57Z"
      lastTransitionTime: "2024-08-28T09:29:57Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-08-28T09:29:42Z"
    succeeded: 1
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-29T09:00:40Z"
    generation: 1
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
    name: ingress-nginx-admission-create
    namespace: ingress-nginx
    resourceVersion: "2687852"
    uid: 0c905654-141e-48de-af2f-94562599efba
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 0c905654-141e-48de-af2f-94562599efba
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: admission-webhook
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          batch.kubernetes.io/controller-uid: 0c905654-141e-48de-af2f-94562599efba
          batch.kubernetes.io/job-name: ingress-nginx-admission-create
          controller-uid: 0c905654-141e-48de-af2f-94562599efba
          job-name: ingress-nginx-admission-create
        name: ingress-nginx-admission-create
      spec:
        containers:
        - args:
          - create
          - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
          - --namespace=$(POD_NAMESPACE)
          - --secret-name=ingress-nginx-admission
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
          imagePullPolicy: IfNotPresent
          name: create
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-admission
        serviceAccountName: ingress-nginx-admission
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2024-08-29T09:00:51Z"
    conditions:
    - lastProbeTime: "2024-08-29T09:00:51Z"
      lastTransitionTime: "2024-08-29T09:00:51Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-08-29T09:00:40Z"
    succeeded: 1
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-08-29T09:00:40Z"
    generation: 1
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.10.0
    name: ingress-nginx-admission-patch
    namespace: ingress-nginx
    resourceVersion: "2687857"
    uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: admission-webhook
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.10.0
          batch.kubernetes.io/controller-uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
          batch.kubernetes.io/job-name: ingress-nginx-admission-patch
          controller-uid: 35b0078e-7457-4f44-b3a4-91fbd212dcb4
          job-name: ingress-nginx-admission-patch
        name: ingress-nginx-admission-patch
      spec:
        containers:
        - args:
          - patch
          - --webhook-name=ingress-nginx-admission
          - --namespace=$(POD_NAMESPACE)
          - --patch-mutating=false
          - --secret-name=ingress-nginx-admission
          - --patch-failure-policy=Fail
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
          imagePullPolicy: IfNotPresent
          name: patch
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-admission
        serviceAccountName: ingress-nginx-admission
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2024-08-29T09:00:51Z"
    conditions:
    - lastProbeTime: "2024-08-29T09:00:51Z"
      lastTransitionTime: "2024-08-29T09:00:51Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-08-29T09:00:40Z"
    succeeded: 1
    uncountedTerminatedPods: {}
kind: List
metadata:
  resourceVersion: ""
